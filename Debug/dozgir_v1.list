
dozgir_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004980  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08004a40  08004a40  00014a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a8c  08004a8c  00020228  2**0
                  CONTENTS
  4 .ARM          00000000  08004a8c  08004a8c  00020228  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004a8c  08004a8c  00020228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a8c  08004a8c  00014a8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a90  08004a90  00014a90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000228  20000000  08004a94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000468  20000228  08004cbc  00020228  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000690  08004cbc  00020690  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001174c  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000023e6  00000000  00000000  0003199c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fb8  00000000  00000000  00033d88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f08  00000000  00000000  00034d40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00012166  00000000  00000000  00035c48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000dd1d  00000000  00000000  00047dae  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006729d  00000000  00000000  00055acb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bcd68  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003844  00000000  00000000  000bcde4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000228 	.word	0x20000228
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004a28 	.word	0x08004a28

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000022c 	.word	0x2000022c
 8000104:	08004a28 	.word	0x08004a28

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <getChannel>:
	uint8_t channel_id;
} channel_data;
channel_data c1 = { .state = audio_idle, .channel_id = 0, .audioBuffer = NULL },
		c2 = { .state = audio_idle, .channel_id = 1, .audioBuffer = NULL };

static channel_data* getChannel(uint8_t channel) {
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	0002      	movs	r2, r0
 8000228:	1dfb      	adds	r3, r7, #7
 800022a:	701a      	strb	r2, [r3, #0]
	if (channel == 0)
 800022c:	1dfb      	adds	r3, r7, #7
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	2b00      	cmp	r3, #0
 8000232:	d101      	bne.n	8000238 <getChannel+0x18>
		return &c1;
 8000234:	4b06      	ldr	r3, [pc, #24]	; (8000250 <getChannel+0x30>)
 8000236:	e006      	b.n	8000246 <getChannel+0x26>
	else if (channel == 1)
 8000238:	1dfb      	adds	r3, r7, #7
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	2b01      	cmp	r3, #1
 800023e:	d101      	bne.n	8000244 <getChannel+0x24>
		return &c2;
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <getChannel+0x34>)
 8000242:	e000      	b.n	8000246 <getChannel+0x26>
	return NULL;
 8000244:	2300      	movs	r3, #0
}
 8000246:	0018      	movs	r0, r3
 8000248:	46bd      	mov	sp, r7
 800024a:	b002      	add	sp, #8
 800024c:	bd80      	pop	{r7, pc}
 800024e:	46c0      	nop			; (mov r8, r8)
 8000250:	20000244 	.word	0x20000244
 8000254:	20000000 	.word	0x20000000

08000258 <player_init>:

void player_init() {
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
	playerll_init();
 800025c:	f000 fa92 	bl	8000784 <playerll_init>

}
 8000260:	46c0      	nop			; (mov r8, r8)
 8000262:	46bd      	mov	sp, r7
 8000264:	bd80      	pop	{r7, pc}
	...

08000268 <player_play>:

	swHappend = false;
	while (!swHappend)
		; // wait until sw_it to executed
}
void player_play(uint8_t channel, uint32_t address, uint32_t len) {
 8000268:	b580      	push	{r7, lr}
 800026a:	b086      	sub	sp, #24
 800026c:	af00      	add	r7, sp, #0
 800026e:	60b9      	str	r1, [r7, #8]
 8000270:	607a      	str	r2, [r7, #4]
 8000272:	210f      	movs	r1, #15
 8000274:	187b      	adds	r3, r7, r1
 8000276:	1c02      	adds	r2, r0, #0
 8000278:	701a      	strb	r2, [r3, #0]
	channel_data *c = getChannel(channel);
 800027a:	187b      	adds	r3, r7, r1
 800027c:	781b      	ldrb	r3, [r3, #0]
 800027e:	0018      	movs	r0, r3
 8000280:	f7ff ffce 	bl	8000220 <getChannel>
 8000284:	0003      	movs	r3, r0
 8000286:	617b      	str	r3, [r7, #20]
	if (!c)
 8000288:	697b      	ldr	r3, [r7, #20]
 800028a:	2b00      	cmp	r3, #0
 800028c:	d021      	beq.n	80002d2 <player_play+0x6a>
		return;
	player_abort(channel);
 800028e:	230f      	movs	r3, #15
 8000290:	18fb      	adds	r3, r7, r3
 8000292:	781b      	ldrb	r3, [r3, #0]
 8000294:	0018      	movs	r0, r3
 8000296:	f000 f823 	bl	80002e0 <player_abort>
	c->address = address;
 800029a:	697a      	ldr	r2, [r7, #20]
 800029c:	2384      	movs	r3, #132	; 0x84
 800029e:	009b      	lsls	r3, r3, #2
 80002a0:	68b9      	ldr	r1, [r7, #8]
 80002a2:	50d1      	str	r1, [r2, r3]
	c->size = len;
 80002a4:	697a      	ldr	r2, [r7, #20]
 80002a6:	2385      	movs	r3, #133	; 0x85
 80002a8:	009b      	lsls	r3, r3, #2
 80002aa:	6879      	ldr	r1, [r7, #4]
 80002ac:	50d1      	str	r1, [r2, r3]
	c->state = audio_starting;
 80002ae:	697b      	ldr	r3, [r7, #20]
 80002b0:	2203      	movs	r2, #3
 80002b2:	701a      	strb	r2, [r3, #0]
	playerll_generate_software_it();
 80002b4:	f000 fb1a 	bl	80008ec <playerll_generate_software_it>

	swHappend = false;
 80002b8:	4b08      	ldr	r3, [pc, #32]	; (80002dc <player_play+0x74>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	701a      	strb	r2, [r3, #0]
	while (!swHappend)
 80002be:	46c0      	nop			; (mov r8, r8)
 80002c0:	4b06      	ldr	r3, [pc, #24]	; (80002dc <player_play+0x74>)
 80002c2:	781b      	ldrb	r3, [r3, #0]
 80002c4:	b2db      	uxtb	r3, r3
 80002c6:	2201      	movs	r2, #1
 80002c8:	4053      	eors	r3, r2
 80002ca:	b2db      	uxtb	r3, r3
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d1f7      	bne.n	80002c0 <player_play+0x58>
 80002d0:	e000      	b.n	80002d4 <player_play+0x6c>
		return;
 80002d2:	46c0      	nop			; (mov r8, r8)
		; // wait until sw_it to executed

}
 80002d4:	46bd      	mov	sp, r7
 80002d6:	b006      	add	sp, #24
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	46c0      	nop			; (mov r8, r8)
 80002dc:	20000460 	.word	0x20000460

080002e0 <player_abort>:
void player_abort(uint8_t channel) {
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b084      	sub	sp, #16
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	0002      	movs	r2, r0
 80002e8:	1dfb      	adds	r3, r7, #7
 80002ea:	701a      	strb	r2, [r3, #0]
	channel_data *c = getChannel(channel);
 80002ec:	1dfb      	adds	r3, r7, #7
 80002ee:	781b      	ldrb	r3, [r3, #0]
 80002f0:	0018      	movs	r0, r3
 80002f2:	f7ff ff95 	bl	8000220 <getChannel>
 80002f6:	0003      	movs	r3, r0
 80002f8:	60fb      	str	r3, [r7, #12]
	if (!c)
 80002fa:	68fb      	ldr	r3, [r7, #12]
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d016      	beq.n	800032e <player_abort+0x4e>
		return;
	if (c->state == audio_idle)
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	781b      	ldrb	r3, [r3, #0]
 8000304:	b2db      	uxtb	r3, r3
 8000306:	2b00      	cmp	r3, #0
 8000308:	d013      	beq.n	8000332 <player_abort+0x52>
		return;
	c->state = audio_idle;
 800030a:	68fb      	ldr	r3, [r7, #12]
 800030c:	2200      	movs	r2, #0
 800030e:	701a      	strb	r2, [r3, #0]
	playerll_generate_software_it();
 8000310:	f000 faec 	bl	80008ec <playerll_generate_software_it>

	swHappend = false;
 8000314:	4b09      	ldr	r3, [pc, #36]	; (800033c <player_abort+0x5c>)
 8000316:	2200      	movs	r2, #0
 8000318:	701a      	strb	r2, [r3, #0]
	while (!swHappend)
 800031a:	46c0      	nop			; (mov r8, r8)
 800031c:	4b07      	ldr	r3, [pc, #28]	; (800033c <player_abort+0x5c>)
 800031e:	781b      	ldrb	r3, [r3, #0]
 8000320:	b2db      	uxtb	r3, r3
 8000322:	2201      	movs	r2, #1
 8000324:	4053      	eors	r3, r2
 8000326:	b2db      	uxtb	r3, r3
 8000328:	2b00      	cmp	r3, #0
 800032a:	d1f7      	bne.n	800031c <player_abort+0x3c>
 800032c:	e002      	b.n	8000334 <player_abort+0x54>
		return;
 800032e:	46c0      	nop			; (mov r8, r8)
 8000330:	e000      	b.n	8000334 <player_abort+0x54>
		return;
 8000332:	46c0      	nop			; (mov r8, r8)
		; // wait until sw_it to executed
}
 8000334:	46bd      	mov	sp, r7
 8000336:	b004      	add	sp, #16
 8000338:	bd80      	pop	{r7, pc}
 800033a:	46c0      	nop			; (mov r8, r8)
 800033c:	20000460 	.word	0x20000460

08000340 <player_on_pwm_finish>:
		return audio_playing;
	return c->state;

}

void player_on_pwm_finish(uint8_t channel) {
 8000340:	b590      	push	{r4, r7, lr}
 8000342:	b085      	sub	sp, #20
 8000344:	af00      	add	r7, sp, #0
 8000346:	0002      	movs	r2, r0
 8000348:	1dfb      	adds	r3, r7, #7
 800034a:	701a      	strb	r2, [r3, #0]
	channel_data *c = getChannel(channel);
 800034c:	1dfb      	adds	r3, r7, #7
 800034e:	781b      	ldrb	r3, [r3, #0]
 8000350:	0018      	movs	r0, r3
 8000352:	f7ff ff65 	bl	8000220 <getChannel>
 8000356:	0003      	movs	r3, r0
 8000358:	60fb      	str	r3, [r7, #12]
//	if (!c)
//		return;
	c->devider++;
 800035a:	68fa      	ldr	r2, [r7, #12]
 800035c:	2386      	movs	r3, #134	; 0x86
 800035e:	009b      	lsls	r3, r3, #2
 8000360:	5cd3      	ldrb	r3, [r2, r3]
 8000362:	b2db      	uxtb	r3, r3
 8000364:	3301      	adds	r3, #1
 8000366:	b2d9      	uxtb	r1, r3
 8000368:	68fa      	ldr	r2, [r7, #12]
 800036a:	2386      	movs	r3, #134	; 0x86
 800036c:	009b      	lsls	r3, r3, #2
 800036e:	54d1      	strb	r1, [r2, r3]
	c->devider %= 4;
 8000370:	68fa      	ldr	r2, [r7, #12]
 8000372:	2386      	movs	r3, #134	; 0x86
 8000374:	009b      	lsls	r3, r3, #2
 8000376:	5cd3      	ldrb	r3, [r2, r3]
 8000378:	b2db      	uxtb	r3, r3
 800037a:	2203      	movs	r2, #3
 800037c:	4013      	ands	r3, r2
 800037e:	b2d9      	uxtb	r1, r3
 8000380:	68fa      	ldr	r2, [r7, #12]
 8000382:	2386      	movs	r3, #134	; 0x86
 8000384:	009b      	lsls	r3, r3, #2
 8000386:	54d1      	strb	r1, [r2, r3]
	if (c->devider != 1) {
 8000388:	68fa      	ldr	r2, [r7, #12]
 800038a:	2386      	movs	r3, #134	; 0x86
 800038c:	009b      	lsls	r3, r3, #2
 800038e:	5cd3      	ldrb	r3, [r2, r3]
 8000390:	b2db      	uxtb	r3, r3
 8000392:	2b01      	cmp	r3, #1
 8000394:	d148      	bne.n	8000428 <player_on_pwm_finish+0xe8>
		return;
	}

	if (c->audioBuffer == NULL){
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	685b      	ldr	r3, [r3, #4]
 800039a:	2b00      	cmp	r3, #0
 800039c:	d046      	beq.n	800042c <player_on_pwm_finish+0xec>
		return;
	}
	if (c->bufferIndex == c->bufferIndexCeil) {
 800039e:	68fa      	ldr	r2, [r7, #12]
 80003a0:	2382      	movs	r3, #130	; 0x82
 80003a2:	009b      	lsls	r3, r3, #2
 80003a4:	5ad2      	ldrh	r2, [r2, r3]
 80003a6:	68fb      	ldr	r3, [r7, #12]
 80003a8:	4922      	ldr	r1, [pc, #136]	; (8000434 <player_on_pwm_finish+0xf4>)
 80003aa:	5a5b      	ldrh	r3, [r3, r1]
 80003ac:	429a      	cmp	r2, r3
 80003ae:	d124      	bne.n	80003fa <player_on_pwm_finish+0xba>
		c->bufferIndex = 0;
 80003b0:	68fa      	ldr	r2, [r7, #12]
 80003b2:	2382      	movs	r3, #130	; 0x82
 80003b4:	009b      	lsls	r3, r3, #2
 80003b6:	2100      	movs	r1, #0
 80003b8:	52d1      	strh	r1, [r2, r3]
		c->bufferIndexCeil = c->preloadBufferIndexCeil;
 80003ba:	68fa      	ldr	r2, [r7, #12]
 80003bc:	2383      	movs	r3, #131	; 0x83
 80003be:	009b      	lsls	r3, r3, #2
 80003c0:	5ad1      	ldrh	r1, [r2, r3]
 80003c2:	68fb      	ldr	r3, [r7, #12]
 80003c4:	4a1b      	ldr	r2, [pc, #108]	; (8000434 <player_on_pwm_finish+0xf4>)
 80003c6:	5299      	strh	r1, [r3, r2]

		if (c->audioBuffer == c->segment1)
 80003c8:	68fb      	ldr	r3, [r7, #12]
 80003ca:	685a      	ldr	r2, [r3, #4]
 80003cc:	68fb      	ldr	r3, [r7, #12]
 80003ce:	3308      	adds	r3, #8
 80003d0:	429a      	cmp	r2, r3
 80003d2:	d106      	bne.n	80003e2 <player_on_pwm_finish+0xa2>
			c->audioBuffer = c->segment2;
 80003d4:	68fb      	ldr	r3, [r7, #12]
 80003d6:	3309      	adds	r3, #9
 80003d8:	33ff      	adds	r3, #255	; 0xff
 80003da:	001a      	movs	r2, r3
 80003dc:	68fb      	ldr	r3, [r7, #12]
 80003de:	605a      	str	r2, [r3, #4]
 80003e0:	e004      	b.n	80003ec <player_on_pwm_finish+0xac>
		else
			c->audioBuffer = c->segment1;
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	3308      	adds	r3, #8
 80003e6:	001a      	movs	r2, r3
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	605a      	str	r2, [r3, #4]
		c->fillNeeded=true;
 80003ec:	68fb      	ldr	r3, [r7, #12]
 80003ee:	4a12      	ldr	r2, [pc, #72]	; (8000438 <player_on_pwm_finish+0xf8>)
 80003f0:	2101      	movs	r1, #1
 80003f2:	5499      	strb	r1, [r3, r2]
		playerll_generate_software_it();
 80003f4:	f000 fa7a 	bl	80008ec <playerll_generate_software_it>
 80003f8:	e019      	b.n	800042e <player_on_pwm_finish+0xee>

	} else
		playerll_pwm_set(channel, c->audioBuffer[c->bufferIndex++]);
 80003fa:	68fb      	ldr	r3, [r7, #12]
 80003fc:	685a      	ldr	r2, [r3, #4]
 80003fe:	68f9      	ldr	r1, [r7, #12]
 8000400:	2382      	movs	r3, #130	; 0x82
 8000402:	009b      	lsls	r3, r3, #2
 8000404:	5acb      	ldrh	r3, [r1, r3]
 8000406:	1c59      	adds	r1, r3, #1
 8000408:	b28c      	uxth	r4, r1
 800040a:	68f8      	ldr	r0, [r7, #12]
 800040c:	2182      	movs	r1, #130	; 0x82
 800040e:	0089      	lsls	r1, r1, #2
 8000410:	5244      	strh	r4, [r0, r1]
 8000412:	18d3      	adds	r3, r2, r3
 8000414:	781b      	ldrb	r3, [r3, #0]
 8000416:	b2db      	uxtb	r3, r3
 8000418:	001a      	movs	r2, r3
 800041a:	1dfb      	adds	r3, r7, #7
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	0011      	movs	r1, r2
 8000420:	0018      	movs	r0, r3
 8000422:	f000 fa07 	bl	8000834 <playerll_pwm_set>
 8000426:	e002      	b.n	800042e <player_on_pwm_finish+0xee>
		return;
 8000428:	46c0      	nop			; (mov r8, r8)
 800042a:	e000      	b.n	800042e <player_on_pwm_finish+0xee>
		return;
 800042c:	46c0      	nop			; (mov r8, r8)

}
 800042e:	46bd      	mov	sp, r7
 8000430:	b005      	add	sp, #20
 8000432:	bd90      	pop	{r4, r7, pc}
 8000434:	0000020a 	.word	0x0000020a
 8000438:	0000020e 	.word	0x0000020e

0800043c <audioFill>:
static uint16_t audioFill(channel_data *c, uint8_t *buffer) {
 800043c:	b590      	push	{r4, r7, lr}
 800043e:	b085      	sub	sp, #20
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
 8000444:	6039      	str	r1, [r7, #0]
	uint16_t readSize;
	if (c->size == 0)
 8000446:	687a      	ldr	r2, [r7, #4]
 8000448:	2385      	movs	r3, #133	; 0x85
 800044a:	009b      	lsls	r3, r3, #2
 800044c:	58d3      	ldr	r3, [r2, r3]
 800044e:	2b00      	cmp	r3, #0
 8000450:	d101      	bne.n	8000456 <audioFill+0x1a>
		return 0;
 8000452:	2300      	movs	r3, #0
 8000454:	e038      	b.n	80004c8 <audioFill+0x8c>
	if (c->size > segment_size)
 8000456:	687a      	ldr	r2, [r7, #4]
 8000458:	2385      	movs	r3, #133	; 0x85
 800045a:	009b      	lsls	r3, r3, #2
 800045c:	58d2      	ldr	r2, [r2, r3]
 800045e:	2380      	movs	r3, #128	; 0x80
 8000460:	005b      	lsls	r3, r3, #1
 8000462:	429a      	cmp	r2, r3
 8000464:	d905      	bls.n	8000472 <audioFill+0x36>
		readSize = segment_size;
 8000466:	230e      	movs	r3, #14
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	2280      	movs	r2, #128	; 0x80
 800046c:	0052      	lsls	r2, r2, #1
 800046e:	801a      	strh	r2, [r3, #0]
 8000470:	e006      	b.n	8000480 <audioFill+0x44>
	else
		readSize = c->size;
 8000472:	687a      	ldr	r2, [r7, #4]
 8000474:	2385      	movs	r3, #133	; 0x85
 8000476:	009b      	lsls	r3, r3, #2
 8000478:	58d2      	ldr	r2, [r2, r3]
 800047a:	230e      	movs	r3, #14
 800047c:	18fb      	adds	r3, r7, r3
 800047e:	801a      	strh	r2, [r3, #0]

	playerll_read(c->address, readSize, buffer);
 8000480:	687a      	ldr	r2, [r7, #4]
 8000482:	2384      	movs	r3, #132	; 0x84
 8000484:	009b      	lsls	r3, r3, #2
 8000486:	58d0      	ldr	r0, [r2, r3]
 8000488:	240e      	movs	r4, #14
 800048a:	193b      	adds	r3, r7, r4
 800048c:	881b      	ldrh	r3, [r3, #0]
 800048e:	683a      	ldr	r2, [r7, #0]
 8000490:	0019      	movs	r1, r3
 8000492:	f000 f9ef 	bl	8000874 <playerll_read>
	c->address += readSize;
 8000496:	687a      	ldr	r2, [r7, #4]
 8000498:	2384      	movs	r3, #132	; 0x84
 800049a:	009b      	lsls	r3, r3, #2
 800049c:	58d2      	ldr	r2, [r2, r3]
 800049e:	0020      	movs	r0, r4
 80004a0:	183b      	adds	r3, r7, r0
 80004a2:	881b      	ldrh	r3, [r3, #0]
 80004a4:	18d1      	adds	r1, r2, r3
 80004a6:	687a      	ldr	r2, [r7, #4]
 80004a8:	2384      	movs	r3, #132	; 0x84
 80004aa:	009b      	lsls	r3, r3, #2
 80004ac:	50d1      	str	r1, [r2, r3]
	c->size -= readSize;
 80004ae:	687a      	ldr	r2, [r7, #4]
 80004b0:	2385      	movs	r3, #133	; 0x85
 80004b2:	009b      	lsls	r3, r3, #2
 80004b4:	58d2      	ldr	r2, [r2, r3]
 80004b6:	183b      	adds	r3, r7, r0
 80004b8:	881b      	ldrh	r3, [r3, #0]
 80004ba:	1ad1      	subs	r1, r2, r3
 80004bc:	687a      	ldr	r2, [r7, #4]
 80004be:	2385      	movs	r3, #133	; 0x85
 80004c0:	009b      	lsls	r3, r3, #2
 80004c2:	50d1      	str	r1, [r2, r3]
	return readSize;
 80004c4:	183b      	adds	r3, r7, r0
 80004c6:	881b      	ldrh	r3, [r3, #0]
}
 80004c8:	0018      	movs	r0, r3
 80004ca:	46bd      	mov	sp, r7
 80004cc:	b005      	add	sp, #20
 80004ce:	bd90      	pop	{r4, r7, pc}

080004d0 <handle_sw_it>:
static void handle_sw_it(channel_data *c) {
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]

	switch (c->state) {
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	b2db      	uxtb	r3, r3
 80004de:	2b04      	cmp	r3, #4
 80004e0:	d900      	bls.n	80004e4 <handle_sw_it+0x14>
 80004e2:	e0a6      	b.n	8000632 <handle_sw_it+0x162>
 80004e4:	009a      	lsls	r2, r3, #2
 80004e6:	4b54      	ldr	r3, [pc, #336]	; (8000638 <handle_sw_it+0x168>)
 80004e8:	18d3      	adds	r3, r2, r3
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	469f      	mov	pc, r3
	case audio_playing:
		if (c->size == 0) {
 80004ee:	687a      	ldr	r2, [r7, #4]
 80004f0:	2385      	movs	r3, #133	; 0x85
 80004f2:	009b      	lsls	r3, r3, #2
 80004f4:	58d3      	ldr	r3, [r2, r3]
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d10c      	bne.n	8000514 <handle_sw_it+0x44>
			playerll_pwm_stop(c->channel_id);
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	4a4f      	ldr	r2, [pc, #316]	; (800063c <handle_sw_it+0x16c>)
 80004fe:	5c9b      	ldrb	r3, [r3, r2]
 8000500:	0018      	movs	r0, r3
 8000502:	f000 f975 	bl	80007f0 <playerll_pwm_stop>
			c->audioBuffer = NULL;
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	2200      	movs	r2, #0
 800050a:	605a      	str	r2, [r3, #4]
			c->state = audio_idle;
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	2200      	movs	r2, #0
 8000510:	701a      	strb	r2, [r3, #0]
			break;
 8000512:	e08e      	b.n	8000632 <handle_sw_it+0x162>
		}
		if(!c->fillNeeded)
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	4a4a      	ldr	r2, [pc, #296]	; (8000640 <handle_sw_it+0x170>)
 8000518:	5c9b      	ldrb	r3, [r3, r2]
 800051a:	b2db      	uxtb	r3, r3
 800051c:	2201      	movs	r2, #1
 800051e:	4053      	eors	r3, r2
 8000520:	b2db      	uxtb	r3, r3
 8000522:	2b00      	cmp	r3, #0
 8000524:	d000      	beq.n	8000528 <handle_sw_it+0x58>
 8000526:	e081      	b.n	800062c <handle_sw_it+0x15c>
			return;
		if (c->audioBuffer == c->segment1)
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	685a      	ldr	r2, [r3, #4]
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	3308      	adds	r3, #8
 8000530:	429a      	cmp	r2, r3
 8000532:	d10f      	bne.n	8000554 <handle_sw_it+0x84>
			c->preloadBufferIndexCeil = audioFill(c, c->segment2);
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	3309      	adds	r3, #9
 8000538:	33ff      	adds	r3, #255	; 0xff
 800053a:	001a      	movs	r2, r3
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	0011      	movs	r1, r2
 8000540:	0018      	movs	r0, r3
 8000542:	f7ff ff7b 	bl	800043c <audioFill>
 8000546:	0003      	movs	r3, r0
 8000548:	0019      	movs	r1, r3
 800054a:	687a      	ldr	r2, [r7, #4]
 800054c:	2383      	movs	r3, #131	; 0x83
 800054e:	009b      	lsls	r3, r3, #2
 8000550:	52d1      	strh	r1, [r2, r3]
 8000552:	e00d      	b.n	8000570 <handle_sw_it+0xa0>
		else
			c->preloadBufferIndexCeil = audioFill(c, c->segment1);
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	3308      	adds	r3, #8
 8000558:	001a      	movs	r2, r3
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	0011      	movs	r1, r2
 800055e:	0018      	movs	r0, r3
 8000560:	f7ff ff6c 	bl	800043c <audioFill>
 8000564:	0003      	movs	r3, r0
 8000566:	0019      	movs	r1, r3
 8000568:	687a      	ldr	r2, [r7, #4]
 800056a:	2383      	movs	r3, #131	; 0x83
 800056c:	009b      	lsls	r3, r3, #2
 800056e:	52d1      	strh	r1, [r2, r3]
		c->fillNeeded=false;
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	4a33      	ldr	r2, [pc, #204]	; (8000640 <handle_sw_it+0x170>)
 8000574:	2100      	movs	r1, #0
 8000576:	5499      	strb	r1, [r3, r2]

		break;
 8000578:	e05b      	b.n	8000632 <handle_sw_it+0x162>
	case audio_idle:
		if (c->audioBuffer == NULL)
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	685b      	ldr	r3, [r3, #4]
 800057e:	2b00      	cmp	r3, #0
 8000580:	d056      	beq.n	8000630 <handle_sw_it+0x160>
			break;
		playerll_pwm_stop(c->channel_id);
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	4a2d      	ldr	r2, [pc, #180]	; (800063c <handle_sw_it+0x16c>)
 8000586:	5c9b      	ldrb	r3, [r3, r2]
 8000588:	0018      	movs	r0, r3
 800058a:	f000 f931 	bl	80007f0 <playerll_pwm_stop>
		c->audioBuffer = NULL;
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	2200      	movs	r2, #0
 8000592:	605a      	str	r2, [r3, #4]
		break;
 8000594:	e04d      	b.n	8000632 <handle_sw_it+0x162>
	case audio_starting:
		c->devider = 0;
 8000596:	687a      	ldr	r2, [r7, #4]
 8000598:	2386      	movs	r3, #134	; 0x86
 800059a:	009b      	lsls	r3, r3, #2
 800059c:	2100      	movs	r1, #0
 800059e:	54d1      	strb	r1, [r2, r3]
		c->bufferIndex = 0;
 80005a0:	687a      	ldr	r2, [r7, #4]
 80005a2:	2382      	movs	r3, #130	; 0x82
 80005a4:	009b      	lsls	r3, r3, #2
 80005a6:	2100      	movs	r1, #0
 80005a8:	52d1      	strh	r1, [r2, r3]
		c->audioBuffer = c->segment1;
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	3308      	adds	r3, #8
 80005ae:	001a      	movs	r2, r3
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	605a      	str	r2, [r3, #4]

		c->bufferIndexCeil = audioFill(c, c->segment1);
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	3308      	adds	r3, #8
 80005b8:	001a      	movs	r2, r3
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	0011      	movs	r1, r2
 80005be:	0018      	movs	r0, r3
 80005c0:	f7ff ff3c 	bl	800043c <audioFill>
 80005c4:	0003      	movs	r3, r0
 80005c6:	0019      	movs	r1, r3
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	4a1e      	ldr	r2, [pc, #120]	; (8000644 <handle_sw_it+0x174>)
 80005cc:	5299      	strh	r1, [r3, r2]
		c->preloadBufferIndexCeil = audioFill(c, c->segment2);
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	3309      	adds	r3, #9
 80005d2:	33ff      	adds	r3, #255	; 0xff
 80005d4:	001a      	movs	r2, r3
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	0011      	movs	r1, r2
 80005da:	0018      	movs	r0, r3
 80005dc:	f7ff ff2e 	bl	800043c <audioFill>
 80005e0:	0003      	movs	r3, r0
 80005e2:	0019      	movs	r1, r3
 80005e4:	687a      	ldr	r2, [r7, #4]
 80005e6:	2383      	movs	r3, #131	; 0x83
 80005e8:	009b      	lsls	r3, r3, #2
 80005ea:	52d1      	strh	r1, [r2, r3]
		c->fillNeeded=false;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	4a14      	ldr	r2, [pc, #80]	; (8000640 <handle_sw_it+0x170>)
 80005f0:	2100      	movs	r1, #0
 80005f2:	5499      	strb	r1, [r3, r2]

		c->state = audio_playing;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	2202      	movs	r2, #2
 80005f8:	701a      	strb	r2, [r3, #0]

		playerll_pwm_start(c->channel_id);
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	4a0f      	ldr	r2, [pc, #60]	; (800063c <handle_sw_it+0x16c>)
 80005fe:	5c9b      	ldrb	r3, [r3, r2]
 8000600:	0018      	movs	r0, r3
 8000602:	f000 f8d3 	bl	80007ac <playerll_pwm_start>
		break;
 8000606:	e014      	b.n	8000632 <handle_sw_it+0x162>
	case audio_pause:
		playerll_pwm_stop(c->channel_id);
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	4a0c      	ldr	r2, [pc, #48]	; (800063c <handle_sw_it+0x16c>)
 800060c:	5c9b      	ldrb	r3, [r3, r2]
 800060e:	0018      	movs	r0, r3
 8000610:	f000 f8ee 	bl	80007f0 <playerll_pwm_stop>
		break;
 8000614:	e00d      	b.n	8000632 <handle_sw_it+0x162>
	case audio_resuming:
		c->state = audio_playing;
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	2202      	movs	r2, #2
 800061a:	701a      	strb	r2, [r3, #0]
		playerll_pwm_start(c->channel_id);
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	4a07      	ldr	r2, [pc, #28]	; (800063c <handle_sw_it+0x16c>)
 8000620:	5c9b      	ldrb	r3, [r3, r2]
 8000622:	0018      	movs	r0, r3
 8000624:	f000 f8c2 	bl	80007ac <playerll_pwm_start>
		break;
 8000628:	46c0      	nop			; (mov r8, r8)
 800062a:	e002      	b.n	8000632 <handle_sw_it+0x162>
			return;
 800062c:	46c0      	nop			; (mov r8, r8)
 800062e:	e000      	b.n	8000632 <handle_sw_it+0x162>
			break;
 8000630:	46c0      	nop			; (mov r8, r8)

	}

}
 8000632:	46bd      	mov	sp, r7
 8000634:	b002      	add	sp, #8
 8000636:	bd80      	pop	{r7, pc}
 8000638:	08004a60 	.word	0x08004a60
 800063c:	00000219 	.word	0x00000219
 8000640:	0000020e 	.word	0x0000020e
 8000644:	0000020a 	.word	0x0000020a

08000648 <player_on_sw_it>:
void player_on_sw_it() {
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
	swHappend = true;
 800064c:	4b06      	ldr	r3, [pc, #24]	; (8000668 <player_on_sw_it+0x20>)
 800064e:	2201      	movs	r2, #1
 8000650:	701a      	strb	r2, [r3, #0]
	handle_sw_it(&c1);
 8000652:	4b06      	ldr	r3, [pc, #24]	; (800066c <player_on_sw_it+0x24>)
 8000654:	0018      	movs	r0, r3
 8000656:	f7ff ff3b 	bl	80004d0 <handle_sw_it>
	handle_sw_it(&c2);
 800065a:	4b05      	ldr	r3, [pc, #20]	; (8000670 <player_on_sw_it+0x28>)
 800065c:	0018      	movs	r0, r3
 800065e:	f7ff ff37 	bl	80004d0 <handle_sw_it>

}
 8000662:	46c0      	nop			; (mov r8, r8)
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	20000460 	.word	0x20000460
 800066c:	20000244 	.word	0x20000244
 8000670:	20000000 	.word	0x20000000

08000674 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	0002      	movs	r2, r0
 800067c:	1dfb      	adds	r3, r7, #7
 800067e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000680:	1dfb      	adds	r3, r7, #7
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	2b7f      	cmp	r3, #127	; 0x7f
 8000686:	d809      	bhi.n	800069c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000688:	1dfb      	adds	r3, r7, #7
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	001a      	movs	r2, r3
 800068e:	231f      	movs	r3, #31
 8000690:	401a      	ands	r2, r3
 8000692:	4b04      	ldr	r3, [pc, #16]	; (80006a4 <__NVIC_EnableIRQ+0x30>)
 8000694:	2101      	movs	r1, #1
 8000696:	4091      	lsls	r1, r2
 8000698:	000a      	movs	r2, r1
 800069a:	601a      	str	r2, [r3, #0]
  }
}
 800069c:	46c0      	nop			; (mov r8, r8)
 800069e:	46bd      	mov	sp, r7
 80006a0:	b002      	add	sp, #8
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	e000e100 	.word	0xe000e100

080006a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006a8:	b590      	push	{r4, r7, lr}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	0002      	movs	r2, r0
 80006b0:	6039      	str	r1, [r7, #0]
 80006b2:	1dfb      	adds	r3, r7, #7
 80006b4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80006b6:	1dfb      	adds	r3, r7, #7
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	2b7f      	cmp	r3, #127	; 0x7f
 80006bc:	d828      	bhi.n	8000710 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006be:	4a2f      	ldr	r2, [pc, #188]	; (800077c <__NVIC_SetPriority+0xd4>)
 80006c0:	1dfb      	adds	r3, r7, #7
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	b25b      	sxtb	r3, r3
 80006c6:	089b      	lsrs	r3, r3, #2
 80006c8:	33c0      	adds	r3, #192	; 0xc0
 80006ca:	009b      	lsls	r3, r3, #2
 80006cc:	589b      	ldr	r3, [r3, r2]
 80006ce:	1dfa      	adds	r2, r7, #7
 80006d0:	7812      	ldrb	r2, [r2, #0]
 80006d2:	0011      	movs	r1, r2
 80006d4:	2203      	movs	r2, #3
 80006d6:	400a      	ands	r2, r1
 80006d8:	00d2      	lsls	r2, r2, #3
 80006da:	21ff      	movs	r1, #255	; 0xff
 80006dc:	4091      	lsls	r1, r2
 80006de:	000a      	movs	r2, r1
 80006e0:	43d2      	mvns	r2, r2
 80006e2:	401a      	ands	r2, r3
 80006e4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	019b      	lsls	r3, r3, #6
 80006ea:	22ff      	movs	r2, #255	; 0xff
 80006ec:	401a      	ands	r2, r3
 80006ee:	1dfb      	adds	r3, r7, #7
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	0018      	movs	r0, r3
 80006f4:	2303      	movs	r3, #3
 80006f6:	4003      	ands	r3, r0
 80006f8:	00db      	lsls	r3, r3, #3
 80006fa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006fc:	481f      	ldr	r0, [pc, #124]	; (800077c <__NVIC_SetPriority+0xd4>)
 80006fe:	1dfb      	adds	r3, r7, #7
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	b25b      	sxtb	r3, r3
 8000704:	089b      	lsrs	r3, r3, #2
 8000706:	430a      	orrs	r2, r1
 8000708:	33c0      	adds	r3, #192	; 0xc0
 800070a:	009b      	lsls	r3, r3, #2
 800070c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800070e:	e031      	b.n	8000774 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000710:	4a1b      	ldr	r2, [pc, #108]	; (8000780 <__NVIC_SetPriority+0xd8>)
 8000712:	1dfb      	adds	r3, r7, #7
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	0019      	movs	r1, r3
 8000718:	230f      	movs	r3, #15
 800071a:	400b      	ands	r3, r1
 800071c:	3b08      	subs	r3, #8
 800071e:	089b      	lsrs	r3, r3, #2
 8000720:	3306      	adds	r3, #6
 8000722:	009b      	lsls	r3, r3, #2
 8000724:	18d3      	adds	r3, r2, r3
 8000726:	3304      	adds	r3, #4
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	1dfa      	adds	r2, r7, #7
 800072c:	7812      	ldrb	r2, [r2, #0]
 800072e:	0011      	movs	r1, r2
 8000730:	2203      	movs	r2, #3
 8000732:	400a      	ands	r2, r1
 8000734:	00d2      	lsls	r2, r2, #3
 8000736:	21ff      	movs	r1, #255	; 0xff
 8000738:	4091      	lsls	r1, r2
 800073a:	000a      	movs	r2, r1
 800073c:	43d2      	mvns	r2, r2
 800073e:	401a      	ands	r2, r3
 8000740:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000742:	683b      	ldr	r3, [r7, #0]
 8000744:	019b      	lsls	r3, r3, #6
 8000746:	22ff      	movs	r2, #255	; 0xff
 8000748:	401a      	ands	r2, r3
 800074a:	1dfb      	adds	r3, r7, #7
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	0018      	movs	r0, r3
 8000750:	2303      	movs	r3, #3
 8000752:	4003      	ands	r3, r0
 8000754:	00db      	lsls	r3, r3, #3
 8000756:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000758:	4809      	ldr	r0, [pc, #36]	; (8000780 <__NVIC_SetPriority+0xd8>)
 800075a:	1dfb      	adds	r3, r7, #7
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	001c      	movs	r4, r3
 8000760:	230f      	movs	r3, #15
 8000762:	4023      	ands	r3, r4
 8000764:	3b08      	subs	r3, #8
 8000766:	089b      	lsrs	r3, r3, #2
 8000768:	430a      	orrs	r2, r1
 800076a:	3306      	adds	r3, #6
 800076c:	009b      	lsls	r3, r3, #2
 800076e:	18c3      	adds	r3, r0, r3
 8000770:	3304      	adds	r3, #4
 8000772:	601a      	str	r2, [r3, #0]
}
 8000774:	46c0      	nop			; (mov r8, r8)
 8000776:	46bd      	mov	sp, r7
 8000778:	b003      	add	sp, #12
 800077a:	bd90      	pop	{r4, r7, pc}
 800077c:	e000e100 	.word	0xe000e100
 8000780:	e000ed00 	.word	0xe000ed00

08000784 <playerll_init>:
#include "w25qxx.h"

extern TIM_HandleTypeDef htim16;
extern TIM_HandleTypeDef htim17;

void playerll_init() {
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
	// software itr at exti line 2
	EXTI->IMR |= 1 << 2;
 8000788:	4b07      	ldr	r3, [pc, #28]	; (80007a8 <playerll_init+0x24>)
 800078a:	681a      	ldr	r2, [r3, #0]
 800078c:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <playerll_init+0x24>)
 800078e:	2104      	movs	r1, #4
 8000790:	430a      	orrs	r2, r1
 8000792:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(EXTI2_3_IRQn);
 8000794:	2006      	movs	r0, #6
 8000796:	f7ff ff6d 	bl	8000674 <__NVIC_EnableIRQ>
	NVIC_SetPriority(EXTI2_3_IRQn, 3);
 800079a:	2103      	movs	r1, #3
 800079c:	2006      	movs	r0, #6
 800079e:	f7ff ff83 	bl	80006a8 <__NVIC_SetPriority>
	// need 8mhz clock for timer , 256clk period
	// enable timer interrupt for PWM
	// timer timer should be higher priority than software interrupt
	// both interrupt should have higher priority than user interrupt

}
 80007a2:	46c0      	nop			; (mov r8, r8)
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40010400 	.word	0x40010400

080007ac <playerll_pwm_start>:
void playerll_pwm_start(uint8_t channel) {
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	0002      	movs	r2, r0
 80007b4:	1dfb      	adds	r3, r7, #7
 80007b6:	701a      	strb	r2, [r3, #0]
	if (channel == 0)
 80007b8:	1dfb      	adds	r3, r7, #7
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d105      	bne.n	80007cc <playerll_pwm_start+0x20>
		HAL_TIM_PWM_Start_IT(&htim16, TIM_CHANNEL_1);
 80007c0:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <playerll_pwm_start+0x3c>)
 80007c2:	2100      	movs	r1, #0
 80007c4:	0018      	movs	r0, r3
 80007c6:	f002 ff63 	bl	8003690 <HAL_TIM_PWM_Start_IT>
	else if (channel == 1)
		HAL_TIM_PWM_Start_IT(&htim17, TIM_CHANNEL_1);
}
 80007ca:	e008      	b.n	80007de <playerll_pwm_start+0x32>
	else if (channel == 1)
 80007cc:	1dfb      	adds	r3, r7, #7
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	2b01      	cmp	r3, #1
 80007d2:	d104      	bne.n	80007de <playerll_pwm_start+0x32>
		HAL_TIM_PWM_Start_IT(&htim17, TIM_CHANNEL_1);
 80007d4:	4b05      	ldr	r3, [pc, #20]	; (80007ec <playerll_pwm_start+0x40>)
 80007d6:	2100      	movs	r1, #0
 80007d8:	0018      	movs	r0, r3
 80007da:	f002 ff59 	bl	8003690 <HAL_TIM_PWM_Start_IT>
}
 80007de:	46c0      	nop			; (mov r8, r8)
 80007e0:	46bd      	mov	sp, r7
 80007e2:	b002      	add	sp, #8
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	46c0      	nop			; (mov r8, r8)
 80007e8:	20000600 	.word	0x20000600
 80007ec:	2000048c 	.word	0x2000048c

080007f0 <playerll_pwm_stop>:
void playerll_pwm_stop(uint8_t channel) {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	0002      	movs	r2, r0
 80007f8:	1dfb      	adds	r3, r7, #7
 80007fa:	701a      	strb	r2, [r3, #0]
	if (channel == 0)
 80007fc:	1dfb      	adds	r3, r7, #7
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d105      	bne.n	8000810 <playerll_pwm_stop+0x20>
		HAL_TIM_PWM_Stop_IT(&htim16, TIM_CHANNEL_1);
 8000804:	4b09      	ldr	r3, [pc, #36]	; (800082c <playerll_pwm_stop+0x3c>)
 8000806:	2100      	movs	r1, #0
 8000808:	0018      	movs	r0, r3
 800080a:	f003 f827 	bl	800385c <HAL_TIM_PWM_Stop_IT>
	else if (channel == 1)
		HAL_TIM_PWM_Stop_IT(&htim17, TIM_CHANNEL_1);
}
 800080e:	e008      	b.n	8000822 <playerll_pwm_stop+0x32>
	else if (channel == 1)
 8000810:	1dfb      	adds	r3, r7, #7
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	2b01      	cmp	r3, #1
 8000816:	d104      	bne.n	8000822 <playerll_pwm_stop+0x32>
		HAL_TIM_PWM_Stop_IT(&htim17, TIM_CHANNEL_1);
 8000818:	4b05      	ldr	r3, [pc, #20]	; (8000830 <playerll_pwm_stop+0x40>)
 800081a:	2100      	movs	r1, #0
 800081c:	0018      	movs	r0, r3
 800081e:	f003 f81d 	bl	800385c <HAL_TIM_PWM_Stop_IT>
}
 8000822:	46c0      	nop			; (mov r8, r8)
 8000824:	46bd      	mov	sp, r7
 8000826:	b002      	add	sp, #8
 8000828:	bd80      	pop	{r7, pc}
 800082a:	46c0      	nop			; (mov r8, r8)
 800082c:	20000600 	.word	0x20000600
 8000830:	2000048c 	.word	0x2000048c

08000834 <playerll_pwm_set>:
void playerll_pwm_set(uint8_t channel, uint32_t d) {
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	0002      	movs	r2, r0
 800083c:	6039      	str	r1, [r7, #0]
 800083e:	1dfb      	adds	r3, r7, #7
 8000840:	701a      	strb	r2, [r3, #0]
	if (channel == 0)
 8000842:	1dfb      	adds	r3, r7, #7
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d104      	bne.n	8000854 <playerll_pwm_set+0x20>
		htim16.Instance->CCR1 = d;
 800084a:	4b08      	ldr	r3, [pc, #32]	; (800086c <playerll_pwm_set+0x38>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	683a      	ldr	r2, [r7, #0]
 8000850:	635a      	str	r2, [r3, #52]	; 0x34
	else if (channel == 1)
		htim17.Instance->CCR1 = d;
}
 8000852:	e007      	b.n	8000864 <playerll_pwm_set+0x30>
	else if (channel == 1)
 8000854:	1dfb      	adds	r3, r7, #7
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	2b01      	cmp	r3, #1
 800085a:	d103      	bne.n	8000864 <playerll_pwm_set+0x30>
		htim17.Instance->CCR1 = d;
 800085c:	4b04      	ldr	r3, [pc, #16]	; (8000870 <playerll_pwm_set+0x3c>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	683a      	ldr	r2, [r7, #0]
 8000862:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000864:	46c0      	nop			; (mov r8, r8)
 8000866:	46bd      	mov	sp, r7
 8000868:	b002      	add	sp, #8
 800086a:	bd80      	pop	{r7, pc}
 800086c:	20000600 	.word	0x20000600
 8000870:	2000048c 	.word	0x2000048c

08000874 <playerll_read>:
	else if (channel == 1)
		return htim17.Instance->CCR1;
	return 0;
}

void playerll_read(uint32_t address, uint32_t len, uint8_t *buffer) {
 8000874:	b580      	push	{r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af00      	add	r7, sp, #0
 800087a:	60f8      	str	r0, [r7, #12]
 800087c:	60b9      	str	r1, [r7, #8]
 800087e:	607a      	str	r2, [r7, #4]
	W25qxx_ReadBytes(buffer, address, len);
 8000880:	68ba      	ldr	r2, [r7, #8]
 8000882:	68f9      	ldr	r1, [r7, #12]
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	0018      	movs	r0, r3
 8000888:	f000 f86c 	bl	8000964 <W25qxx_ReadBytes>
}
 800088c:	46c0      	nop			; (mov r8, r8)
 800088e:	46bd      	mov	sp, r7
 8000890:	b004      	add	sp, #16
 8000892:	bd80      	pop	{r7, pc}

08000894 <HAL_TIM_PWM_PulseFinishedCallback>:

extern void player_on_pwm_finish(uint8_t channel);
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
	if (htim == &htim16)
 800089c:	687a      	ldr	r2, [r7, #4]
 800089e:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <HAL_TIM_PWM_PulseFinishedCallback+0x30>)
 80008a0:	429a      	cmp	r2, r3
 80008a2:	d103      	bne.n	80008ac <HAL_TIM_PWM_PulseFinishedCallback+0x18>
		player_on_pwm_finish(0);
 80008a4:	2000      	movs	r0, #0
 80008a6:	f7ff fd4b 	bl	8000340 <player_on_pwm_finish>
	else if(htim == &htim17)
		player_on_pwm_finish(1);


}
 80008aa:	e006      	b.n	80008ba <HAL_TIM_PWM_PulseFinishedCallback+0x26>
	else if(htim == &htim17)
 80008ac:	687a      	ldr	r2, [r7, #4]
 80008ae:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <HAL_TIM_PWM_PulseFinishedCallback+0x34>)
 80008b0:	429a      	cmp	r2, r3
 80008b2:	d102      	bne.n	80008ba <HAL_TIM_PWM_PulseFinishedCallback+0x26>
		player_on_pwm_finish(1);
 80008b4:	2001      	movs	r0, #1
 80008b6:	f7ff fd43 	bl	8000340 <player_on_pwm_finish>
}
 80008ba:	46c0      	nop			; (mov r8, r8)
 80008bc:	46bd      	mov	sp, r7
 80008be:	b002      	add	sp, #8
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	46c0      	nop			; (mov r8, r8)
 80008c4:	20000600 	.word	0x20000600
 80008c8:	2000048c 	.word	0x2000048c

080008cc <EXTI2_3_IRQHandler>:


extern void player_on_sw_it();
void EXTI2_3_IRQHandler() {
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
	EXTI->PR |= 1 << 2;
 80008d0:	4b05      	ldr	r3, [pc, #20]	; (80008e8 <EXTI2_3_IRQHandler+0x1c>)
 80008d2:	695a      	ldr	r2, [r3, #20]
 80008d4:	4b04      	ldr	r3, [pc, #16]	; (80008e8 <EXTI2_3_IRQHandler+0x1c>)
 80008d6:	2104      	movs	r1, #4
 80008d8:	430a      	orrs	r2, r1
 80008da:	615a      	str	r2, [r3, #20]
	player_on_sw_it();
 80008dc:	f7ff feb4 	bl	8000648 <player_on_sw_it>

}
 80008e0:	46c0      	nop			; (mov r8, r8)
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	46c0      	nop			; (mov r8, r8)
 80008e8:	40010400 	.word	0x40010400

080008ec <playerll_generate_software_it>:
void playerll_generate_software_it() {
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
	EXTI->SWIER |= 1 << 2;
 80008f0:	4b04      	ldr	r3, [pc, #16]	; (8000904 <playerll_generate_software_it+0x18>)
 80008f2:	691a      	ldr	r2, [r3, #16]
 80008f4:	4b03      	ldr	r3, [pc, #12]	; (8000904 <playerll_generate_software_it+0x18>)
 80008f6:	2104      	movs	r1, #4
 80008f8:	430a      	orrs	r2, r1
 80008fa:	611a      	str	r2, [r3, #16]
}
 80008fc:	46c0      	nop			; (mov r8, r8)
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	46c0      	nop			; (mov r8, r8)
 8000904:	40010400 	.word	0x40010400

08000908 <setup>:
#include "mainCodes.h"


void setup(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
	player_init();
 800090c:	f7ff fca4 	bl	8000258 <player_init>
	player_play(0, 200, 18000000);
 8000910:	4b04      	ldr	r3, [pc, #16]	; (8000924 <setup+0x1c>)
 8000912:	001a      	movs	r2, r3
 8000914:	21c8      	movs	r1, #200	; 0xc8
 8000916:	2000      	movs	r0, #0
 8000918:	f7ff fca6 	bl	8000268 <player_play>

}
 800091c:	46c0      	nop			; (mov r8, r8)
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	46c0      	nop			; (mov r8, r8)
 8000924:	0112a880 	.word	0x0112a880

08000928 <loop>:
void loop(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0

}
 800092c:	46c0      	nop			; (mov r8, r8)
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
	...

08000934 <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 8000934:	b590      	push	{r4, r7, lr}
 8000936:	b087      	sub	sp, #28
 8000938:	af02      	add	r7, sp, #8
 800093a:	0002      	movs	r2, r0
 800093c:	1dfb      	adds	r3, r7, #7
 800093e:	701a      	strb	r2, [r3, #0]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 8000940:	240f      	movs	r4, #15
 8000942:	193a      	adds	r2, r7, r4
 8000944:	1df9      	adds	r1, r7, #7
 8000946:	4806      	ldr	r0, [pc, #24]	; (8000960 <W25qxx_Spi+0x2c>)
 8000948:	2364      	movs	r3, #100	; 0x64
 800094a:	9300      	str	r3, [sp, #0]
 800094c:	2301      	movs	r3, #1
 800094e:	f001 ff81 	bl	8002854 <HAL_SPI_TransmitReceive>
	return ret;
 8000952:	193b      	adds	r3, r7, r4
 8000954:	781b      	ldrb	r3, [r3, #0]
}
 8000956:	0018      	movs	r0, r3
 8000958:	46bd      	mov	sp, r7
 800095a:	b005      	add	sp, #20
 800095c:	bd90      	pop	{r4, r7, pc}
 800095e:	46c0      	nop			; (mov r8, r8)
 8000960:	20000558 	.word	0x20000558

08000964 <W25qxx_ReadBytes>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadBytes(uint8_t *pBuffer, uint32_t ReadAddr, uint32_t NumByteToRead)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b086      	sub	sp, #24
 8000968:	af00      	add	r7, sp, #0
 800096a:	60f8      	str	r0, [r7, #12]
 800096c:	60b9      	str	r1, [r7, #8]
 800096e:	607a      	str	r2, [r7, #4]
	while (w25qxx.Lock == 1)
 8000970:	e002      	b.n	8000978 <W25qxx_ReadBytes+0x14>
		W25qxx_Delay(1);
 8000972:	2001      	movs	r0, #1
 8000974:	f000 fd54 	bl	8001420 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8000978:	4b2a      	ldr	r3, [pc, #168]	; (8000a24 <W25qxx_ReadBytes+0xc0>)
 800097a:	2227      	movs	r2, #39	; 0x27
 800097c:	5c9b      	ldrb	r3, [r3, r2]
 800097e:	2b01      	cmp	r3, #1
 8000980:	d0f7      	beq.n	8000972 <W25qxx_ReadBytes+0xe>
	w25qxx.Lock = 1;
 8000982:	4b28      	ldr	r3, [pc, #160]	; (8000a24 <W25qxx_ReadBytes+0xc0>)
 8000984:	2227      	movs	r2, #39	; 0x27
 8000986:	2101      	movs	r1, #1
 8000988:	5499      	strb	r1, [r3, r2]
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
	printf("w25qxx ReadBytes at Address:%d, %d Bytes  begin...\r\n", ReadAddr, NumByteToRead);
#endif
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800098a:	2390      	movs	r3, #144	; 0x90
 800098c:	05db      	lsls	r3, r3, #23
 800098e:	2200      	movs	r2, #0
 8000990:	2110      	movs	r1, #16
 8000992:	0018      	movs	r0, r3
 8000994:	f001 f94c 	bl	8001c30 <HAL_GPIO_WritePin>

	if (w25qxx.ID >= W25Q256)
 8000998:	4b22      	ldr	r3, [pc, #136]	; (8000a24 <W25qxx_ReadBytes+0xc0>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	2b08      	cmp	r3, #8
 800099e:	d909      	bls.n	80009b4 <W25qxx_ReadBytes+0x50>
	{
		W25qxx_Spi(0x0C);
 80009a0:	200c      	movs	r0, #12
 80009a2:	f7ff ffc7 	bl	8000934 <W25qxx_Spi>
		W25qxx_Spi((ReadAddr & 0xFF000000) >> 24);
 80009a6:	68bb      	ldr	r3, [r7, #8]
 80009a8:	0e1b      	lsrs	r3, r3, #24
 80009aa:	b2db      	uxtb	r3, r3
 80009ac:	0018      	movs	r0, r3
 80009ae:	f7ff ffc1 	bl	8000934 <W25qxx_Spi>
 80009b2:	e002      	b.n	80009ba <W25qxx_ReadBytes+0x56>
	}
	else
	{
		W25qxx_Spi(0x0B);
 80009b4:	200b      	movs	r0, #11
 80009b6:	f7ff ffbd 	bl	8000934 <W25qxx_Spi>
	}
	W25qxx_Spi((ReadAddr & 0xFF0000) >> 16);
 80009ba:	68bb      	ldr	r3, [r7, #8]
 80009bc:	0c1b      	lsrs	r3, r3, #16
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	0018      	movs	r0, r3
 80009c2:	f7ff ffb7 	bl	8000934 <W25qxx_Spi>
	W25qxx_Spi((ReadAddr & 0xFF00) >> 8);
 80009c6:	68bb      	ldr	r3, [r7, #8]
 80009c8:	0a1b      	lsrs	r3, r3, #8
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	0018      	movs	r0, r3
 80009ce:	f7ff ffb1 	bl	8000934 <W25qxx_Spi>
	W25qxx_Spi(ReadAddr & 0xFF);
 80009d2:	68bb      	ldr	r3, [r7, #8]
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	0018      	movs	r0, r3
 80009d8:	f7ff ffac 	bl	8000934 <W25qxx_Spi>
	W25qxx_Spi(0);
 80009dc:	2000      	movs	r0, #0
 80009de:	f7ff ffa9 	bl	8000934 <W25qxx_Spi>
//	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead, 2000);
	uint8_t dummy=0;
 80009e2:	2117      	movs	r1, #23
 80009e4:	187b      	adds	r3, r7, r1
 80009e6:	2200      	movs	r2, #0
 80009e8:	701a      	strb	r2, [r3, #0]
	HAL_SPI_TransmitReceive_DMA(&_W25QXX_SPI, &dummy, pBuffer, NumByteToRead);
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	b29b      	uxth	r3, r3
 80009ee:	68fa      	ldr	r2, [r7, #12]
 80009f0:	1879      	adds	r1, r7, r1
 80009f2:	480d      	ldr	r0, [pc, #52]	; (8000a28 <W25qxx_ReadBytes+0xc4>)
 80009f4:	f002 f902 	bl	8002bfc <HAL_SPI_TransmitReceive_DMA>
//	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
	while(hdma_spi1_rx.Instance->CNDTR!=0);
 80009f8:	46c0      	nop			; (mov r8, r8)
 80009fa:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <W25qxx_ReadBytes+0xc8>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	685b      	ldr	r3, [r3, #4]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d1fa      	bne.n	80009fa <W25qxx_ReadBytes+0x96>

	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8000a04:	2390      	movs	r3, #144	; 0x90
 8000a06:	05db      	lsls	r3, r3, #23
 8000a08:	2201      	movs	r2, #1
 8000a0a:	2110      	movs	r1, #16
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	f001 f90f 	bl	8001c30 <HAL_GPIO_WritePin>
	printf("\r\n");
	printf("w25qxx ReadBytes done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
//	W25qxx_Delay(1);
	w25qxx.Lock = 0;
 8000a12:	4b04      	ldr	r3, [pc, #16]	; (8000a24 <W25qxx_ReadBytes+0xc0>)
 8000a14:	2227      	movs	r2, #39	; 0x27
 8000a16:	2100      	movs	r1, #0
 8000a18:	5499      	strb	r1, [r3, r2]
}
 8000a1a:	46c0      	nop			; (mov r8, r8)
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	b006      	add	sp, #24
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	46c0      	nop			; (mov r8, r8)
 8000a24:	20000464 	.word	0x20000464
 8000a28:	20000558 	.word	0x20000558
 8000a2c:	200005bc 	.word	0x200005bc

08000a30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a34:	f000 fc90 	bl	8001358 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a38:	f000 f811 	bl	8000a5e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a3c:	f000 fa04 	bl	8000e48 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a40:	f000 f9e4 	bl	8000e0c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000a44:	f000 f9b2 	bl	8000dac <MX_USART1_UART_Init>
  MX_TIM16_Init();
 8000a48:	f000 f8a8 	bl	8000b9c <MX_TIM16_Init>
  MX_TIM17_Init();
 8000a4c:	f000 f92a 	bl	8000ca4 <MX_TIM17_Init>
  MX_SPI1_Init();
 8000a50:	f000 f866 	bl	8000b20 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  setup();
 8000a54:	f7ff ff58 	bl	8000908 <setup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	loop();
 8000a58:	f7ff ff66 	bl	8000928 <loop>
 8000a5c:	e7fc      	b.n	8000a58 <main+0x28>

08000a5e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a5e:	b590      	push	{r4, r7, lr}
 8000a60:	b095      	sub	sp, #84	; 0x54
 8000a62:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a64:	2420      	movs	r4, #32
 8000a66:	193b      	adds	r3, r7, r4
 8000a68:	0018      	movs	r0, r3
 8000a6a:	2330      	movs	r3, #48	; 0x30
 8000a6c:	001a      	movs	r2, r3
 8000a6e:	2100      	movs	r1, #0
 8000a70:	f003 ffd2 	bl	8004a18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a74:	2310      	movs	r3, #16
 8000a76:	18fb      	adds	r3, r7, r3
 8000a78:	0018      	movs	r0, r3
 8000a7a:	2310      	movs	r3, #16
 8000a7c:	001a      	movs	r2, r3
 8000a7e:	2100      	movs	r1, #0
 8000a80:	f003 ffca 	bl	8004a18 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a84:	003b      	movs	r3, r7
 8000a86:	0018      	movs	r0, r3
 8000a88:	2310      	movs	r3, #16
 8000a8a:	001a      	movs	r2, r3
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	f003 ffc3 	bl	8004a18 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a92:	0021      	movs	r1, r4
 8000a94:	187b      	adds	r3, r7, r1
 8000a96:	2202      	movs	r2, #2
 8000a98:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a9a:	187b      	adds	r3, r7, r1
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000aa0:	187b      	adds	r3, r7, r1
 8000aa2:	2210      	movs	r2, #16
 8000aa4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aa6:	187b      	adds	r3, r7, r1
 8000aa8:	2202      	movs	r2, #2
 8000aaa:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000aac:	187b      	adds	r3, r7, r1
 8000aae:	2200      	movs	r2, #0
 8000ab0:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000ab2:	187b      	adds	r3, r7, r1
 8000ab4:	2280      	movs	r2, #128	; 0x80
 8000ab6:	0312      	lsls	r2, r2, #12
 8000ab8:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000aba:	187b      	adds	r3, r7, r1
 8000abc:	2200      	movs	r2, #0
 8000abe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ac0:	187b      	adds	r3, r7, r1
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	f001 f8d2 	bl	8001c6c <HAL_RCC_OscConfig>
 8000ac8:	1e03      	subs	r3, r0, #0
 8000aca:	d001      	beq.n	8000ad0 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000acc:	f000 fa04 	bl	8000ed8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ad0:	2110      	movs	r1, #16
 8000ad2:	187b      	adds	r3, r7, r1
 8000ad4:	2207      	movs	r2, #7
 8000ad6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ad8:	187b      	adds	r3, r7, r1
 8000ada:	2202      	movs	r2, #2
 8000adc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ade:	187b      	adds	r3, r7, r1
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ae4:	187b      	adds	r3, r7, r1
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000aea:	187b      	adds	r3, r7, r1
 8000aec:	2100      	movs	r1, #0
 8000aee:	0018      	movs	r0, r3
 8000af0:	f001 fbd8 	bl	80022a4 <HAL_RCC_ClockConfig>
 8000af4:	1e03      	subs	r3, r0, #0
 8000af6:	d001      	beq.n	8000afc <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000af8:	f000 f9ee 	bl	8000ed8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000afc:	003b      	movs	r3, r7
 8000afe:	2201      	movs	r2, #1
 8000b00:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000b02:	003b      	movs	r3, r7
 8000b04:	2200      	movs	r2, #0
 8000b06:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b08:	003b      	movs	r3, r7
 8000b0a:	0018      	movs	r0, r3
 8000b0c:	f001 fd1c 	bl	8002548 <HAL_RCCEx_PeriphCLKConfig>
 8000b10:	1e03      	subs	r3, r0, #0
 8000b12:	d001      	beq.n	8000b18 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000b14:	f000 f9e0 	bl	8000ed8 <Error_Handler>
  }
}
 8000b18:	46c0      	nop			; (mov r8, r8)
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	b015      	add	sp, #84	; 0x54
 8000b1e:	bd90      	pop	{r4, r7, pc}

08000b20 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b24:	4b1b      	ldr	r3, [pc, #108]	; (8000b94 <MX_SPI1_Init+0x74>)
 8000b26:	4a1c      	ldr	r2, [pc, #112]	; (8000b98 <MX_SPI1_Init+0x78>)
 8000b28:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b2a:	4b1a      	ldr	r3, [pc, #104]	; (8000b94 <MX_SPI1_Init+0x74>)
 8000b2c:	2282      	movs	r2, #130	; 0x82
 8000b2e:	0052      	lsls	r2, r2, #1
 8000b30:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b32:	4b18      	ldr	r3, [pc, #96]	; (8000b94 <MX_SPI1_Init+0x74>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b38:	4b16      	ldr	r3, [pc, #88]	; (8000b94 <MX_SPI1_Init+0x74>)
 8000b3a:	22e0      	movs	r2, #224	; 0xe0
 8000b3c:	00d2      	lsls	r2, r2, #3
 8000b3e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b40:	4b14      	ldr	r3, [pc, #80]	; (8000b94 <MX_SPI1_Init+0x74>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b46:	4b13      	ldr	r3, [pc, #76]	; (8000b94 <MX_SPI1_Init+0x74>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b4c:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <MX_SPI1_Init+0x74>)
 8000b4e:	2280      	movs	r2, #128	; 0x80
 8000b50:	0092      	lsls	r2, r2, #2
 8000b52:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b54:	4b0f      	ldr	r3, [pc, #60]	; (8000b94 <MX_SPI1_Init+0x74>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b5a:	4b0e      	ldr	r3, [pc, #56]	; (8000b94 <MX_SPI1_Init+0x74>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b60:	4b0c      	ldr	r3, [pc, #48]	; (8000b94 <MX_SPI1_Init+0x74>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b66:	4b0b      	ldr	r3, [pc, #44]	; (8000b94 <MX_SPI1_Init+0x74>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000b6c:	4b09      	ldr	r3, [pc, #36]	; (8000b94 <MX_SPI1_Init+0x74>)
 8000b6e:	2207      	movs	r2, #7
 8000b70:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b72:	4b08      	ldr	r3, [pc, #32]	; (8000b94 <MX_SPI1_Init+0x74>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b78:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <MX_SPI1_Init+0x74>)
 8000b7a:	2208      	movs	r2, #8
 8000b7c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b7e:	4b05      	ldr	r3, [pc, #20]	; (8000b94 <MX_SPI1_Init+0x74>)
 8000b80:	0018      	movs	r0, r3
 8000b82:	f001 fdaf 	bl	80026e4 <HAL_SPI_Init>
 8000b86:	1e03      	subs	r3, r0, #0
 8000b88:	d001      	beq.n	8000b8e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000b8a:	f000 f9a5 	bl	8000ed8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b8e:	46c0      	nop			; (mov r8, r8)
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	20000558 	.word	0x20000558
 8000b98:	40013000 	.word	0x40013000

08000b9c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b090      	sub	sp, #64	; 0x40
 8000ba0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ba2:	2324      	movs	r3, #36	; 0x24
 8000ba4:	18fb      	adds	r3, r7, r3
 8000ba6:	0018      	movs	r0, r3
 8000ba8:	231c      	movs	r3, #28
 8000baa:	001a      	movs	r2, r3
 8000bac:	2100      	movs	r1, #0
 8000bae:	f003 ff33 	bl	8004a18 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000bb2:	1d3b      	adds	r3, r7, #4
 8000bb4:	0018      	movs	r0, r3
 8000bb6:	2320      	movs	r3, #32
 8000bb8:	001a      	movs	r2, r3
 8000bba:	2100      	movs	r1, #0
 8000bbc:	f003 ff2c 	bl	8004a18 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000bc0:	4b36      	ldr	r3, [pc, #216]	; (8000c9c <MX_TIM16_Init+0x100>)
 8000bc2:	4a37      	ldr	r2, [pc, #220]	; (8000ca0 <MX_TIM16_Init+0x104>)
 8000bc4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 2-1;
 8000bc6:	4b35      	ldr	r3, [pc, #212]	; (8000c9c <MX_TIM16_Init+0x100>)
 8000bc8:	2201      	movs	r2, #1
 8000bca:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bcc:	4b33      	ldr	r3, [pc, #204]	; (8000c9c <MX_TIM16_Init+0x100>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 256-1;
 8000bd2:	4b32      	ldr	r3, [pc, #200]	; (8000c9c <MX_TIM16_Init+0x100>)
 8000bd4:	22ff      	movs	r2, #255	; 0xff
 8000bd6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bd8:	4b30      	ldr	r3, [pc, #192]	; (8000c9c <MX_TIM16_Init+0x100>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000bde:	4b2f      	ldr	r3, [pc, #188]	; (8000c9c <MX_TIM16_Init+0x100>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000be4:	4b2d      	ldr	r3, [pc, #180]	; (8000c9c <MX_TIM16_Init+0x100>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000bea:	4b2c      	ldr	r3, [pc, #176]	; (8000c9c <MX_TIM16_Init+0x100>)
 8000bec:	0018      	movs	r0, r3
 8000bee:	f002 fca7 	bl	8003540 <HAL_TIM_Base_Init>
 8000bf2:	1e03      	subs	r3, r0, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 8000bf6:	f000 f96f 	bl	8000ed8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8000bfa:	4b28      	ldr	r3, [pc, #160]	; (8000c9c <MX_TIM16_Init+0x100>)
 8000bfc:	0018      	movs	r0, r3
 8000bfe:	f002 fcef 	bl	80035e0 <HAL_TIM_PWM_Init>
 8000c02:	1e03      	subs	r3, r0, #0
 8000c04:	d001      	beq.n	8000c0a <MX_TIM16_Init+0x6e>
  {
    Error_Handler();
 8000c06:	f000 f967 	bl	8000ed8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c0a:	2124      	movs	r1, #36	; 0x24
 8000c0c:	187b      	adds	r3, r7, r1
 8000c0e:	2260      	movs	r2, #96	; 0x60
 8000c10:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000c12:	187b      	adds	r3, r7, r1
 8000c14:	2200      	movs	r2, #0
 8000c16:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c18:	187b      	adds	r3, r7, r1
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c1e:	187b      	adds	r3, r7, r1
 8000c20:	2200      	movs	r2, #0
 8000c22:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c24:	187b      	adds	r3, r7, r1
 8000c26:	2200      	movs	r2, #0
 8000c28:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c2a:	187b      	adds	r3, r7, r1
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c30:	187b      	adds	r3, r7, r1
 8000c32:	2200      	movs	r2, #0
 8000c34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c36:	1879      	adds	r1, r7, r1
 8000c38:	4b18      	ldr	r3, [pc, #96]	; (8000c9c <MX_TIM16_Init+0x100>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	0018      	movs	r0, r3
 8000c3e:	f002 ffd9 	bl	8003bf4 <HAL_TIM_PWM_ConfigChannel>
 8000c42:	1e03      	subs	r3, r0, #0
 8000c44:	d001      	beq.n	8000c4a <MX_TIM16_Init+0xae>
  {
    Error_Handler();
 8000c46:	f000 f947 	bl	8000ed8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c4a:	1d3b      	adds	r3, r7, #4
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c50:	1d3b      	adds	r3, r7, #4
 8000c52:	2200      	movs	r2, #0
 8000c54:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c56:	1d3b      	adds	r3, r7, #4
 8000c58:	2200      	movs	r2, #0
 8000c5a:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c5c:	1d3b      	adds	r3, r7, #4
 8000c5e:	2200      	movs	r2, #0
 8000c60:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c62:	1d3b      	adds	r3, r7, #4
 8000c64:	2200      	movs	r2, #0
 8000c66:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c68:	1d3b      	adds	r3, r7, #4
 8000c6a:	2280      	movs	r2, #128	; 0x80
 8000c6c:	0192      	lsls	r2, r2, #6
 8000c6e:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c70:	1d3b      	adds	r3, r7, #4
 8000c72:	2200      	movs	r2, #0
 8000c74:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000c76:	1d3a      	adds	r2, r7, #4
 8000c78:	4b08      	ldr	r3, [pc, #32]	; (8000c9c <MX_TIM16_Init+0x100>)
 8000c7a:	0011      	movs	r1, r2
 8000c7c:	0018      	movs	r0, r3
 8000c7e:	f003 fb05 	bl	800428c <HAL_TIMEx_ConfigBreakDeadTime>
 8000c82:	1e03      	subs	r3, r0, #0
 8000c84:	d001      	beq.n	8000c8a <MX_TIM16_Init+0xee>
  {
    Error_Handler();
 8000c86:	f000 f927 	bl	8000ed8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8000c8a:	4b04      	ldr	r3, [pc, #16]	; (8000c9c <MX_TIM16_Init+0x100>)
 8000c8c:	0018      	movs	r0, r3
 8000c8e:	f000 fa35 	bl	80010fc <HAL_TIM_MspPostInit>

}
 8000c92:	46c0      	nop			; (mov r8, r8)
 8000c94:	46bd      	mov	sp, r7
 8000c96:	b010      	add	sp, #64	; 0x40
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	46c0      	nop			; (mov r8, r8)
 8000c9c:	20000600 	.word	0x20000600
 8000ca0:	40014400 	.word	0x40014400

08000ca4 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b090      	sub	sp, #64	; 0x40
 8000ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000caa:	2324      	movs	r3, #36	; 0x24
 8000cac:	18fb      	adds	r3, r7, r3
 8000cae:	0018      	movs	r0, r3
 8000cb0:	231c      	movs	r3, #28
 8000cb2:	001a      	movs	r2, r3
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	f003 feaf 	bl	8004a18 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000cba:	1d3b      	adds	r3, r7, #4
 8000cbc:	0018      	movs	r0, r3
 8000cbe:	2320      	movs	r3, #32
 8000cc0:	001a      	movs	r2, r3
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	f003 fea8 	bl	8004a18 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000cc8:	4b36      	ldr	r3, [pc, #216]	; (8000da4 <MX_TIM17_Init+0x100>)
 8000cca:	4a37      	ldr	r2, [pc, #220]	; (8000da8 <MX_TIM17_Init+0x104>)
 8000ccc:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 2-1;
 8000cce:	4b35      	ldr	r3, [pc, #212]	; (8000da4 <MX_TIM17_Init+0x100>)
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cd4:	4b33      	ldr	r3, [pc, #204]	; (8000da4 <MX_TIM17_Init+0x100>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 256-1;
 8000cda:	4b32      	ldr	r3, [pc, #200]	; (8000da4 <MX_TIM17_Init+0x100>)
 8000cdc:	22ff      	movs	r2, #255	; 0xff
 8000cde:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ce0:	4b30      	ldr	r3, [pc, #192]	; (8000da4 <MX_TIM17_Init+0x100>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000ce6:	4b2f      	ldr	r3, [pc, #188]	; (8000da4 <MX_TIM17_Init+0x100>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cec:	4b2d      	ldr	r3, [pc, #180]	; (8000da4 <MX_TIM17_Init+0x100>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000cf2:	4b2c      	ldr	r3, [pc, #176]	; (8000da4 <MX_TIM17_Init+0x100>)
 8000cf4:	0018      	movs	r0, r3
 8000cf6:	f002 fc23 	bl	8003540 <HAL_TIM_Base_Init>
 8000cfa:	1e03      	subs	r3, r0, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 8000cfe:	f000 f8eb 	bl	8000ed8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8000d02:	4b28      	ldr	r3, [pc, #160]	; (8000da4 <MX_TIM17_Init+0x100>)
 8000d04:	0018      	movs	r0, r3
 8000d06:	f002 fc6b 	bl	80035e0 <HAL_TIM_PWM_Init>
 8000d0a:	1e03      	subs	r3, r0, #0
 8000d0c:	d001      	beq.n	8000d12 <MX_TIM17_Init+0x6e>
  {
    Error_Handler();
 8000d0e:	f000 f8e3 	bl	8000ed8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d12:	2124      	movs	r1, #36	; 0x24
 8000d14:	187b      	adds	r3, r7, r1
 8000d16:	2260      	movs	r2, #96	; 0x60
 8000d18:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000d1a:	187b      	adds	r3, r7, r1
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d20:	187b      	adds	r3, r7, r1
 8000d22:	2200      	movs	r2, #0
 8000d24:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d26:	187b      	adds	r3, r7, r1
 8000d28:	2200      	movs	r2, #0
 8000d2a:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d2c:	187b      	adds	r3, r7, r1
 8000d2e:	2200      	movs	r2, #0
 8000d30:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d32:	187b      	adds	r3, r7, r1
 8000d34:	2200      	movs	r2, #0
 8000d36:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d38:	187b      	adds	r3, r7, r1
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d3e:	1879      	adds	r1, r7, r1
 8000d40:	4b18      	ldr	r3, [pc, #96]	; (8000da4 <MX_TIM17_Init+0x100>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	0018      	movs	r0, r3
 8000d46:	f002 ff55 	bl	8003bf4 <HAL_TIM_PWM_ConfigChannel>
 8000d4a:	1e03      	subs	r3, r0, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_TIM17_Init+0xae>
  {
    Error_Handler();
 8000d4e:	f000 f8c3 	bl	8000ed8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d52:	1d3b      	adds	r3, r7, #4
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d58:	1d3b      	adds	r3, r7, #4
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d5e:	1d3b      	adds	r3, r7, #4
 8000d60:	2200      	movs	r2, #0
 8000d62:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d64:	1d3b      	adds	r3, r7, #4
 8000d66:	2200      	movs	r2, #0
 8000d68:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d6a:	1d3b      	adds	r3, r7, #4
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d70:	1d3b      	adds	r3, r7, #4
 8000d72:	2280      	movs	r2, #128	; 0x80
 8000d74:	0192      	lsls	r2, r2, #6
 8000d76:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d78:	1d3b      	adds	r3, r7, #4
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000d7e:	1d3a      	adds	r2, r7, #4
 8000d80:	4b08      	ldr	r3, [pc, #32]	; (8000da4 <MX_TIM17_Init+0x100>)
 8000d82:	0011      	movs	r1, r2
 8000d84:	0018      	movs	r0, r3
 8000d86:	f003 fa81 	bl	800428c <HAL_TIMEx_ConfigBreakDeadTime>
 8000d8a:	1e03      	subs	r3, r0, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_TIM17_Init+0xee>
  {
    Error_Handler();
 8000d8e:	f000 f8a3 	bl	8000ed8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8000d92:	4b04      	ldr	r3, [pc, #16]	; (8000da4 <MX_TIM17_Init+0x100>)
 8000d94:	0018      	movs	r0, r3
 8000d96:	f000 f9b1 	bl	80010fc <HAL_TIM_MspPostInit>

}
 8000d9a:	46c0      	nop			; (mov r8, r8)
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	b010      	add	sp, #64	; 0x40
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	46c0      	nop			; (mov r8, r8)
 8000da4:	2000048c 	.word	0x2000048c
 8000da8:	40014800 	.word	0x40014800

08000dac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000db0:	4b14      	ldr	r3, [pc, #80]	; (8000e04 <MX_USART1_UART_Init+0x58>)
 8000db2:	4a15      	ldr	r2, [pc, #84]	; (8000e08 <MX_USART1_UART_Init+0x5c>)
 8000db4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8000db6:	4b13      	ldr	r3, [pc, #76]	; (8000e04 <MX_USART1_UART_Init+0x58>)
 8000db8:	2296      	movs	r2, #150	; 0x96
 8000dba:	0212      	lsls	r2, r2, #8
 8000dbc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000dbe:	4b11      	ldr	r3, [pc, #68]	; (8000e04 <MX_USART1_UART_Init+0x58>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000dc4:	4b0f      	ldr	r3, [pc, #60]	; (8000e04 <MX_USART1_UART_Init+0x58>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000dca:	4b0e      	ldr	r3, [pc, #56]	; (8000e04 <MX_USART1_UART_Init+0x58>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000dd0:	4b0c      	ldr	r3, [pc, #48]	; (8000e04 <MX_USART1_UART_Init+0x58>)
 8000dd2:	220c      	movs	r2, #12
 8000dd4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dd6:	4b0b      	ldr	r3, [pc, #44]	; (8000e04 <MX_USART1_UART_Init+0x58>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ddc:	4b09      	ldr	r3, [pc, #36]	; (8000e04 <MX_USART1_UART_Init+0x58>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000de2:	4b08      	ldr	r3, [pc, #32]	; (8000e04 <MX_USART1_UART_Init+0x58>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000de8:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <MX_USART1_UART_Init+0x58>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000dee:	4b05      	ldr	r3, [pc, #20]	; (8000e04 <MX_USART1_UART_Init+0x58>)
 8000df0:	0018      	movs	r0, r3
 8000df2:	f003 fab9 	bl	8004368 <HAL_UART_Init>
 8000df6:	1e03      	subs	r3, r0, #0
 8000df8:	d001      	beq.n	8000dfe <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000dfa:	f000 f86d 	bl	8000ed8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000dfe:	46c0      	nop			; (mov r8, r8)
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	200004d4 	.word	0x200004d4
 8000e08:	40013800 	.word	0x40013800

08000e0c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e12:	4b0c      	ldr	r3, [pc, #48]	; (8000e44 <MX_DMA_Init+0x38>)
 8000e14:	695a      	ldr	r2, [r3, #20]
 8000e16:	4b0b      	ldr	r3, [pc, #44]	; (8000e44 <MX_DMA_Init+0x38>)
 8000e18:	2101      	movs	r1, #1
 8000e1a:	430a      	orrs	r2, r1
 8000e1c:	615a      	str	r2, [r3, #20]
 8000e1e:	4b09      	ldr	r3, [pc, #36]	; (8000e44 <MX_DMA_Init+0x38>)
 8000e20:	695b      	ldr	r3, [r3, #20]
 8000e22:	2201      	movs	r2, #1
 8000e24:	4013      	ands	r3, r2
 8000e26:	607b      	str	r3, [r7, #4]
 8000e28:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	200a      	movs	r0, #10
 8000e30:	f000 fbc4 	bl	80015bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000e34:	200a      	movs	r0, #10
 8000e36:	f000 fbd6 	bl	80015e6 <HAL_NVIC_EnableIRQ>

}
 8000e3a:	46c0      	nop			; (mov r8, r8)
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	b002      	add	sp, #8
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	46c0      	nop			; (mov r8, r8)
 8000e44:	40021000 	.word	0x40021000

08000e48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e48:	b590      	push	{r4, r7, lr}
 8000e4a:	b089      	sub	sp, #36	; 0x24
 8000e4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4e:	240c      	movs	r4, #12
 8000e50:	193b      	adds	r3, r7, r4
 8000e52:	0018      	movs	r0, r3
 8000e54:	2314      	movs	r3, #20
 8000e56:	001a      	movs	r2, r3
 8000e58:	2100      	movs	r1, #0
 8000e5a:	f003 fddd 	bl	8004a18 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5e:	4b1d      	ldr	r3, [pc, #116]	; (8000ed4 <MX_GPIO_Init+0x8c>)
 8000e60:	695a      	ldr	r2, [r3, #20]
 8000e62:	4b1c      	ldr	r3, [pc, #112]	; (8000ed4 <MX_GPIO_Init+0x8c>)
 8000e64:	2180      	movs	r1, #128	; 0x80
 8000e66:	0289      	lsls	r1, r1, #10
 8000e68:	430a      	orrs	r2, r1
 8000e6a:	615a      	str	r2, [r3, #20]
 8000e6c:	4b19      	ldr	r3, [pc, #100]	; (8000ed4 <MX_GPIO_Init+0x8c>)
 8000e6e:	695a      	ldr	r2, [r3, #20]
 8000e70:	2380      	movs	r3, #128	; 0x80
 8000e72:	029b      	lsls	r3, r3, #10
 8000e74:	4013      	ands	r3, r2
 8000e76:	60bb      	str	r3, [r7, #8]
 8000e78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e7a:	4b16      	ldr	r3, [pc, #88]	; (8000ed4 <MX_GPIO_Init+0x8c>)
 8000e7c:	695a      	ldr	r2, [r3, #20]
 8000e7e:	4b15      	ldr	r3, [pc, #84]	; (8000ed4 <MX_GPIO_Init+0x8c>)
 8000e80:	2180      	movs	r1, #128	; 0x80
 8000e82:	02c9      	lsls	r1, r1, #11
 8000e84:	430a      	orrs	r2, r1
 8000e86:	615a      	str	r2, [r3, #20]
 8000e88:	4b12      	ldr	r3, [pc, #72]	; (8000ed4 <MX_GPIO_Init+0x8c>)
 8000e8a:	695a      	ldr	r2, [r3, #20]
 8000e8c:	2380      	movs	r3, #128	; 0x80
 8000e8e:	02db      	lsls	r3, r3, #11
 8000e90:	4013      	ands	r3, r2
 8000e92:	607b      	str	r3, [r7, #4]
 8000e94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 8000e96:	2390      	movs	r3, #144	; 0x90
 8000e98:	05db      	lsls	r3, r3, #23
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	2110      	movs	r1, #16
 8000e9e:	0018      	movs	r0, r3
 8000ea0:	f000 fec6 	bl	8001c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : FLASH_CS_Pin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin;
 8000ea4:	0021      	movs	r1, r4
 8000ea6:	187b      	adds	r3, r7, r1
 8000ea8:	2210      	movs	r2, #16
 8000eaa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eac:	187b      	adds	r3, r7, r1
 8000eae:	2201      	movs	r2, #1
 8000eb0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	187b      	adds	r3, r7, r1
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb8:	187b      	adds	r3, r7, r1
 8000eba:	2200      	movs	r2, #0
 8000ebc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(FLASH_CS_GPIO_Port, &GPIO_InitStruct);
 8000ebe:	187a      	adds	r2, r7, r1
 8000ec0:	2390      	movs	r3, #144	; 0x90
 8000ec2:	05db      	lsls	r3, r3, #23
 8000ec4:	0011      	movs	r1, r2
 8000ec6:	0018      	movs	r0, r3
 8000ec8:	f000 fd42 	bl	8001950 <HAL_GPIO_Init>

}
 8000ecc:	46c0      	nop			; (mov r8, r8)
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	b009      	add	sp, #36	; 0x24
 8000ed2:	bd90      	pop	{r4, r7, pc}
 8000ed4:	40021000 	.word	0x40021000

08000ed8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000edc:	46c0      	nop			; (mov r8, r8)
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
	...

08000ee4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eea:	4b0f      	ldr	r3, [pc, #60]	; (8000f28 <HAL_MspInit+0x44>)
 8000eec:	699a      	ldr	r2, [r3, #24]
 8000eee:	4b0e      	ldr	r3, [pc, #56]	; (8000f28 <HAL_MspInit+0x44>)
 8000ef0:	2101      	movs	r1, #1
 8000ef2:	430a      	orrs	r2, r1
 8000ef4:	619a      	str	r2, [r3, #24]
 8000ef6:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <HAL_MspInit+0x44>)
 8000ef8:	699b      	ldr	r3, [r3, #24]
 8000efa:	2201      	movs	r2, #1
 8000efc:	4013      	ands	r3, r2
 8000efe:	607b      	str	r3, [r7, #4]
 8000f00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f02:	4b09      	ldr	r3, [pc, #36]	; (8000f28 <HAL_MspInit+0x44>)
 8000f04:	69da      	ldr	r2, [r3, #28]
 8000f06:	4b08      	ldr	r3, [pc, #32]	; (8000f28 <HAL_MspInit+0x44>)
 8000f08:	2180      	movs	r1, #128	; 0x80
 8000f0a:	0549      	lsls	r1, r1, #21
 8000f0c:	430a      	orrs	r2, r1
 8000f0e:	61da      	str	r2, [r3, #28]
 8000f10:	4b05      	ldr	r3, [pc, #20]	; (8000f28 <HAL_MspInit+0x44>)
 8000f12:	69da      	ldr	r2, [r3, #28]
 8000f14:	2380      	movs	r3, #128	; 0x80
 8000f16:	055b      	lsls	r3, r3, #21
 8000f18:	4013      	ands	r3, r2
 8000f1a:	603b      	str	r3, [r7, #0]
 8000f1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f1e:	46c0      	nop			; (mov r8, r8)
 8000f20:	46bd      	mov	sp, r7
 8000f22:	b002      	add	sp, #8
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	46c0      	nop			; (mov r8, r8)
 8000f28:	40021000 	.word	0x40021000

08000f2c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b08a      	sub	sp, #40	; 0x28
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f34:	2314      	movs	r3, #20
 8000f36:	18fb      	adds	r3, r7, r3
 8000f38:	0018      	movs	r0, r3
 8000f3a:	2314      	movs	r3, #20
 8000f3c:	001a      	movs	r2, r3
 8000f3e:	2100      	movs	r1, #0
 8000f40:	f003 fd6a 	bl	8004a18 <memset>
  if(hspi->Instance==SPI1)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a43      	ldr	r2, [pc, #268]	; (8001058 <HAL_SPI_MspInit+0x12c>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d000      	beq.n	8000f50 <HAL_SPI_MspInit+0x24>
 8000f4e:	e07e      	b.n	800104e <HAL_SPI_MspInit+0x122>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f50:	4b42      	ldr	r3, [pc, #264]	; (800105c <HAL_SPI_MspInit+0x130>)
 8000f52:	699a      	ldr	r2, [r3, #24]
 8000f54:	4b41      	ldr	r3, [pc, #260]	; (800105c <HAL_SPI_MspInit+0x130>)
 8000f56:	2180      	movs	r1, #128	; 0x80
 8000f58:	0149      	lsls	r1, r1, #5
 8000f5a:	430a      	orrs	r2, r1
 8000f5c:	619a      	str	r2, [r3, #24]
 8000f5e:	4b3f      	ldr	r3, [pc, #252]	; (800105c <HAL_SPI_MspInit+0x130>)
 8000f60:	699a      	ldr	r2, [r3, #24]
 8000f62:	2380      	movs	r3, #128	; 0x80
 8000f64:	015b      	lsls	r3, r3, #5
 8000f66:	4013      	ands	r3, r2
 8000f68:	613b      	str	r3, [r7, #16]
 8000f6a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6c:	4b3b      	ldr	r3, [pc, #236]	; (800105c <HAL_SPI_MspInit+0x130>)
 8000f6e:	695a      	ldr	r2, [r3, #20]
 8000f70:	4b3a      	ldr	r3, [pc, #232]	; (800105c <HAL_SPI_MspInit+0x130>)
 8000f72:	2180      	movs	r1, #128	; 0x80
 8000f74:	0289      	lsls	r1, r1, #10
 8000f76:	430a      	orrs	r2, r1
 8000f78:	615a      	str	r2, [r3, #20]
 8000f7a:	4b38      	ldr	r3, [pc, #224]	; (800105c <HAL_SPI_MspInit+0x130>)
 8000f7c:	695a      	ldr	r2, [r3, #20]
 8000f7e:	2380      	movs	r3, #128	; 0x80
 8000f80:	029b      	lsls	r3, r3, #10
 8000f82:	4013      	ands	r3, r2
 8000f84:	60fb      	str	r3, [r7, #12]
 8000f86:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000f88:	2114      	movs	r1, #20
 8000f8a:	187b      	adds	r3, r7, r1
 8000f8c:	22e0      	movs	r2, #224	; 0xe0
 8000f8e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f90:	187b      	adds	r3, r7, r1
 8000f92:	2202      	movs	r2, #2
 8000f94:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f96:	187b      	adds	r3, r7, r1
 8000f98:	2200      	movs	r2, #0
 8000f9a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f9c:	187b      	adds	r3, r7, r1
 8000f9e:	2203      	movs	r2, #3
 8000fa0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000fa2:	187b      	adds	r3, r7, r1
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa8:	187a      	adds	r2, r7, r1
 8000faa:	2390      	movs	r3, #144	; 0x90
 8000fac:	05db      	lsls	r3, r3, #23
 8000fae:	0011      	movs	r1, r2
 8000fb0:	0018      	movs	r0, r3
 8000fb2:	f000 fccd 	bl	8001950 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8000fb6:	4b2a      	ldr	r3, [pc, #168]	; (8001060 <HAL_SPI_MspInit+0x134>)
 8000fb8:	4a2a      	ldr	r2, [pc, #168]	; (8001064 <HAL_SPI_MspInit+0x138>)
 8000fba:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fbc:	4b28      	ldr	r3, [pc, #160]	; (8001060 <HAL_SPI_MspInit+0x134>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fc2:	4b27      	ldr	r3, [pc, #156]	; (8001060 <HAL_SPI_MspInit+0x134>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000fc8:	4b25      	ldr	r3, [pc, #148]	; (8001060 <HAL_SPI_MspInit+0x134>)
 8000fca:	2280      	movs	r2, #128	; 0x80
 8000fcc:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fce:	4b24      	ldr	r3, [pc, #144]	; (8001060 <HAL_SPI_MspInit+0x134>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fd4:	4b22      	ldr	r3, [pc, #136]	; (8001060 <HAL_SPI_MspInit+0x134>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000fda:	4b21      	ldr	r3, [pc, #132]	; (8001060 <HAL_SPI_MspInit+0x134>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000fe0:	4b1f      	ldr	r3, [pc, #124]	; (8001060 <HAL_SPI_MspInit+0x134>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000fe6:	4b1e      	ldr	r3, [pc, #120]	; (8001060 <HAL_SPI_MspInit+0x134>)
 8000fe8:	0018      	movs	r0, r3
 8000fea:	f000 fb19 	bl	8001620 <HAL_DMA_Init>
 8000fee:	1e03      	subs	r3, r0, #0
 8000ff0:	d001      	beq.n	8000ff6 <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 8000ff2:	f7ff ff71 	bl	8000ed8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4a19      	ldr	r2, [pc, #100]	; (8001060 <HAL_SPI_MspInit+0x134>)
 8000ffa:	659a      	str	r2, [r3, #88]	; 0x58
 8000ffc:	4b18      	ldr	r3, [pc, #96]	; (8001060 <HAL_SPI_MspInit+0x134>)
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	625a      	str	r2, [r3, #36]	; 0x24

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8001002:	4b19      	ldr	r3, [pc, #100]	; (8001068 <HAL_SPI_MspInit+0x13c>)
 8001004:	4a19      	ldr	r2, [pc, #100]	; (800106c <HAL_SPI_MspInit+0x140>)
 8001006:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001008:	4b17      	ldr	r3, [pc, #92]	; (8001068 <HAL_SPI_MspInit+0x13c>)
 800100a:	2210      	movs	r2, #16
 800100c:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800100e:	4b16      	ldr	r3, [pc, #88]	; (8001068 <HAL_SPI_MspInit+0x13c>)
 8001010:	2200      	movs	r2, #0
 8001012:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_DISABLE;
 8001014:	4b14      	ldr	r3, [pc, #80]	; (8001068 <HAL_SPI_MspInit+0x13c>)
 8001016:	2200      	movs	r2, #0
 8001018:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800101a:	4b13      	ldr	r3, [pc, #76]	; (8001068 <HAL_SPI_MspInit+0x13c>)
 800101c:	2200      	movs	r2, #0
 800101e:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001020:	4b11      	ldr	r3, [pc, #68]	; (8001068 <HAL_SPI_MspInit+0x13c>)
 8001022:	2200      	movs	r2, #0
 8001024:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001026:	4b10      	ldr	r3, [pc, #64]	; (8001068 <HAL_SPI_MspInit+0x13c>)
 8001028:	2200      	movs	r2, #0
 800102a:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800102c:	4b0e      	ldr	r3, [pc, #56]	; (8001068 <HAL_SPI_MspInit+0x13c>)
 800102e:	2200      	movs	r2, #0
 8001030:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001032:	4b0d      	ldr	r3, [pc, #52]	; (8001068 <HAL_SPI_MspInit+0x13c>)
 8001034:	0018      	movs	r0, r3
 8001036:	f000 faf3 	bl	8001620 <HAL_DMA_Init>
 800103a:	1e03      	subs	r3, r0, #0
 800103c:	d001      	beq.n	8001042 <HAL_SPI_MspInit+0x116>
    {
      Error_Handler();
 800103e:	f7ff ff4b 	bl	8000ed8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a08      	ldr	r2, [pc, #32]	; (8001068 <HAL_SPI_MspInit+0x13c>)
 8001046:	655a      	str	r2, [r3, #84]	; 0x54
 8001048:	4b07      	ldr	r3, [pc, #28]	; (8001068 <HAL_SPI_MspInit+0x13c>)
 800104a:	687a      	ldr	r2, [r7, #4]
 800104c:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800104e:	46c0      	nop			; (mov r8, r8)
 8001050:	46bd      	mov	sp, r7
 8001052:	b00a      	add	sp, #40	; 0x28
 8001054:	bd80      	pop	{r7, pc}
 8001056:	46c0      	nop			; (mov r8, r8)
 8001058:	40013000 	.word	0x40013000
 800105c:	40021000 	.word	0x40021000
 8001060:	200005bc 	.word	0x200005bc
 8001064:	4002001c 	.word	0x4002001c
 8001068:	20000648 	.word	0x20000648
 800106c:	40020030 	.word	0x40020030

08001070 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a1c      	ldr	r2, [pc, #112]	; (80010f0 <HAL_TIM_Base_MspInit+0x80>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d116      	bne.n	80010b0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001082:	4b1c      	ldr	r3, [pc, #112]	; (80010f4 <HAL_TIM_Base_MspInit+0x84>)
 8001084:	699a      	ldr	r2, [r3, #24]
 8001086:	4b1b      	ldr	r3, [pc, #108]	; (80010f4 <HAL_TIM_Base_MspInit+0x84>)
 8001088:	2180      	movs	r1, #128	; 0x80
 800108a:	0289      	lsls	r1, r1, #10
 800108c:	430a      	orrs	r2, r1
 800108e:	619a      	str	r2, [r3, #24]
 8001090:	4b18      	ldr	r3, [pc, #96]	; (80010f4 <HAL_TIM_Base_MspInit+0x84>)
 8001092:	699a      	ldr	r2, [r3, #24]
 8001094:	2380      	movs	r3, #128	; 0x80
 8001096:	029b      	lsls	r3, r3, #10
 8001098:	4013      	ands	r3, r2
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 800109e:	2200      	movs	r2, #0
 80010a0:	2100      	movs	r1, #0
 80010a2:	2015      	movs	r0, #21
 80010a4:	f000 fa8a 	bl	80015bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80010a8:	2015      	movs	r0, #21
 80010aa:	f000 fa9c 	bl	80015e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80010ae:	e01a      	b.n	80010e6 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM17)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a10      	ldr	r2, [pc, #64]	; (80010f8 <HAL_TIM_Base_MspInit+0x88>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d115      	bne.n	80010e6 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80010ba:	4b0e      	ldr	r3, [pc, #56]	; (80010f4 <HAL_TIM_Base_MspInit+0x84>)
 80010bc:	699a      	ldr	r2, [r3, #24]
 80010be:	4b0d      	ldr	r3, [pc, #52]	; (80010f4 <HAL_TIM_Base_MspInit+0x84>)
 80010c0:	2180      	movs	r1, #128	; 0x80
 80010c2:	02c9      	lsls	r1, r1, #11
 80010c4:	430a      	orrs	r2, r1
 80010c6:	619a      	str	r2, [r3, #24]
 80010c8:	4b0a      	ldr	r3, [pc, #40]	; (80010f4 <HAL_TIM_Base_MspInit+0x84>)
 80010ca:	699a      	ldr	r2, [r3, #24]
 80010cc:	2380      	movs	r3, #128	; 0x80
 80010ce:	02db      	lsls	r3, r3, #11
 80010d0:	4013      	ands	r3, r2
 80010d2:	60bb      	str	r3, [r7, #8]
 80010d4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 80010d6:	2200      	movs	r2, #0
 80010d8:	2100      	movs	r1, #0
 80010da:	2016      	movs	r0, #22
 80010dc:	f000 fa6e 	bl	80015bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80010e0:	2016      	movs	r0, #22
 80010e2:	f000 fa80 	bl	80015e6 <HAL_NVIC_EnableIRQ>
}
 80010e6:	46c0      	nop			; (mov r8, r8)
 80010e8:	46bd      	mov	sp, r7
 80010ea:	b004      	add	sp, #16
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	46c0      	nop			; (mov r8, r8)
 80010f0:	40014400 	.word	0x40014400
 80010f4:	40021000 	.word	0x40021000
 80010f8:	40014800 	.word	0x40014800

080010fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b08a      	sub	sp, #40	; 0x28
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001104:	2314      	movs	r3, #20
 8001106:	18fb      	adds	r3, r7, r3
 8001108:	0018      	movs	r0, r3
 800110a:	2314      	movs	r3, #20
 800110c:	001a      	movs	r2, r3
 800110e:	2100      	movs	r1, #0
 8001110:	f003 fc82 	bl	8004a18 <memset>
  if(htim->Instance==TIM16)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a2b      	ldr	r2, [pc, #172]	; (80011c8 <HAL_TIM_MspPostInit+0xcc>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d125      	bne.n	800116a <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800111e:	4b2b      	ldr	r3, [pc, #172]	; (80011cc <HAL_TIM_MspPostInit+0xd0>)
 8001120:	695a      	ldr	r2, [r3, #20]
 8001122:	4b2a      	ldr	r3, [pc, #168]	; (80011cc <HAL_TIM_MspPostInit+0xd0>)
 8001124:	2180      	movs	r1, #128	; 0x80
 8001126:	02c9      	lsls	r1, r1, #11
 8001128:	430a      	orrs	r2, r1
 800112a:	615a      	str	r2, [r3, #20]
 800112c:	4b27      	ldr	r3, [pc, #156]	; (80011cc <HAL_TIM_MspPostInit+0xd0>)
 800112e:	695a      	ldr	r2, [r3, #20]
 8001130:	2380      	movs	r3, #128	; 0x80
 8001132:	02db      	lsls	r3, r3, #11
 8001134:	4013      	ands	r3, r2
 8001136:	613b      	str	r3, [r7, #16]
 8001138:	693b      	ldr	r3, [r7, #16]
    /**TIM16 GPIO Configuration
    PB8     ------> TIM16_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800113a:	2114      	movs	r1, #20
 800113c:	187b      	adds	r3, r7, r1
 800113e:	2280      	movs	r2, #128	; 0x80
 8001140:	0052      	lsls	r2, r2, #1
 8001142:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001144:	187b      	adds	r3, r7, r1
 8001146:	2202      	movs	r2, #2
 8001148:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	187b      	adds	r3, r7, r1
 800114c:	2200      	movs	r2, #0
 800114e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001150:	187b      	adds	r3, r7, r1
 8001152:	2200      	movs	r2, #0
 8001154:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
 8001156:	187b      	adds	r3, r7, r1
 8001158:	2202      	movs	r2, #2
 800115a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800115c:	187b      	adds	r3, r7, r1
 800115e:	4a1c      	ldr	r2, [pc, #112]	; (80011d0 <HAL_TIM_MspPostInit+0xd4>)
 8001160:	0019      	movs	r1, r3
 8001162:	0010      	movs	r0, r2
 8001164:	f000 fbf4 	bl	8001950 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8001168:	e029      	b.n	80011be <HAL_TIM_MspPostInit+0xc2>
  else if(htim->Instance==TIM17)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a19      	ldr	r2, [pc, #100]	; (80011d4 <HAL_TIM_MspPostInit+0xd8>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d124      	bne.n	80011be <HAL_TIM_MspPostInit+0xc2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001174:	4b15      	ldr	r3, [pc, #84]	; (80011cc <HAL_TIM_MspPostInit+0xd0>)
 8001176:	695a      	ldr	r2, [r3, #20]
 8001178:	4b14      	ldr	r3, [pc, #80]	; (80011cc <HAL_TIM_MspPostInit+0xd0>)
 800117a:	2180      	movs	r1, #128	; 0x80
 800117c:	02c9      	lsls	r1, r1, #11
 800117e:	430a      	orrs	r2, r1
 8001180:	615a      	str	r2, [r3, #20]
 8001182:	4b12      	ldr	r3, [pc, #72]	; (80011cc <HAL_TIM_MspPostInit+0xd0>)
 8001184:	695a      	ldr	r2, [r3, #20]
 8001186:	2380      	movs	r3, #128	; 0x80
 8001188:	02db      	lsls	r3, r3, #11
 800118a:	4013      	ands	r3, r2
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001190:	2114      	movs	r1, #20
 8001192:	187b      	adds	r3, r7, r1
 8001194:	2280      	movs	r2, #128	; 0x80
 8001196:	0092      	lsls	r2, r2, #2
 8001198:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119a:	187b      	adds	r3, r7, r1
 800119c:	2202      	movs	r2, #2
 800119e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	187b      	adds	r3, r7, r1
 80011a2:	2200      	movs	r2, #0
 80011a4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a6:	187b      	adds	r3, r7, r1
 80011a8:	2200      	movs	r2, #0
 80011aa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM17;
 80011ac:	187b      	adds	r3, r7, r1
 80011ae:	2202      	movs	r2, #2
 80011b0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b2:	187b      	adds	r3, r7, r1
 80011b4:	4a06      	ldr	r2, [pc, #24]	; (80011d0 <HAL_TIM_MspPostInit+0xd4>)
 80011b6:	0019      	movs	r1, r3
 80011b8:	0010      	movs	r0, r2
 80011ba:	f000 fbc9 	bl	8001950 <HAL_GPIO_Init>
}
 80011be:	46c0      	nop			; (mov r8, r8)
 80011c0:	46bd      	mov	sp, r7
 80011c2:	b00a      	add	sp, #40	; 0x28
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	46c0      	nop			; (mov r8, r8)
 80011c8:	40014400 	.word	0x40014400
 80011cc:	40021000 	.word	0x40021000
 80011d0:	48000400 	.word	0x48000400
 80011d4:	40014800 	.word	0x40014800

080011d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b08a      	sub	sp, #40	; 0x28
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e0:	2314      	movs	r3, #20
 80011e2:	18fb      	adds	r3, r7, r3
 80011e4:	0018      	movs	r0, r3
 80011e6:	2314      	movs	r3, #20
 80011e8:	001a      	movs	r2, r3
 80011ea:	2100      	movs	r1, #0
 80011ec:	f003 fc14 	bl	8004a18 <memset>
  if(huart->Instance==USART1)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a1c      	ldr	r2, [pc, #112]	; (8001268 <HAL_UART_MspInit+0x90>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d132      	bne.n	8001260 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011fa:	4b1c      	ldr	r3, [pc, #112]	; (800126c <HAL_UART_MspInit+0x94>)
 80011fc:	699a      	ldr	r2, [r3, #24]
 80011fe:	4b1b      	ldr	r3, [pc, #108]	; (800126c <HAL_UART_MspInit+0x94>)
 8001200:	2180      	movs	r1, #128	; 0x80
 8001202:	01c9      	lsls	r1, r1, #7
 8001204:	430a      	orrs	r2, r1
 8001206:	619a      	str	r2, [r3, #24]
 8001208:	4b18      	ldr	r3, [pc, #96]	; (800126c <HAL_UART_MspInit+0x94>)
 800120a:	699a      	ldr	r2, [r3, #24]
 800120c:	2380      	movs	r3, #128	; 0x80
 800120e:	01db      	lsls	r3, r3, #7
 8001210:	4013      	ands	r3, r2
 8001212:	613b      	str	r3, [r7, #16]
 8001214:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001216:	4b15      	ldr	r3, [pc, #84]	; (800126c <HAL_UART_MspInit+0x94>)
 8001218:	695a      	ldr	r2, [r3, #20]
 800121a:	4b14      	ldr	r3, [pc, #80]	; (800126c <HAL_UART_MspInit+0x94>)
 800121c:	2180      	movs	r1, #128	; 0x80
 800121e:	0289      	lsls	r1, r1, #10
 8001220:	430a      	orrs	r2, r1
 8001222:	615a      	str	r2, [r3, #20]
 8001224:	4b11      	ldr	r3, [pc, #68]	; (800126c <HAL_UART_MspInit+0x94>)
 8001226:	695a      	ldr	r2, [r3, #20]
 8001228:	2380      	movs	r3, #128	; 0x80
 800122a:	029b      	lsls	r3, r3, #10
 800122c:	4013      	ands	r3, r2
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA2     ------> USART1_TX
    PA3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001232:	2114      	movs	r1, #20
 8001234:	187b      	adds	r3, r7, r1
 8001236:	220c      	movs	r2, #12
 8001238:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123a:	187b      	adds	r3, r7, r1
 800123c:	2202      	movs	r2, #2
 800123e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	187b      	adds	r3, r7, r1
 8001242:	2200      	movs	r2, #0
 8001244:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001246:	187b      	adds	r3, r7, r1
 8001248:	2203      	movs	r2, #3
 800124a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800124c:	187b      	adds	r3, r7, r1
 800124e:	2201      	movs	r2, #1
 8001250:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001252:	187a      	adds	r2, r7, r1
 8001254:	2390      	movs	r3, #144	; 0x90
 8001256:	05db      	lsls	r3, r3, #23
 8001258:	0011      	movs	r1, r2
 800125a:	0018      	movs	r0, r3
 800125c:	f000 fb78 	bl	8001950 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001260:	46c0      	nop			; (mov r8, r8)
 8001262:	46bd      	mov	sp, r7
 8001264:	b00a      	add	sp, #40	; 0x28
 8001266:	bd80      	pop	{r7, pc}
 8001268:	40013800 	.word	0x40013800
 800126c:	40021000 	.word	0x40021000

08001270 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001274:	46c0      	nop			; (mov r8, r8)
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800127a:	b580      	push	{r7, lr}
 800127c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800127e:	e7fe      	b.n	800127e <HardFault_Handler+0x4>

08001280 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001284:	46c0      	nop			; (mov r8, r8)
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800128e:	46c0      	nop			; (mov r8, r8)
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}

08001294 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001298:	f000 f8a6 	bl	80013e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800129c:	46c0      	nop			; (mov r8, r8)
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
	...

080012a4 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80012a8:	4b05      	ldr	r3, [pc, #20]	; (80012c0 <DMA1_Channel2_3_IRQHandler+0x1c>)
 80012aa:	0018      	movs	r0, r3
 80012ac:	f000 fa66 	bl	800177c <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80012b0:	4b04      	ldr	r3, [pc, #16]	; (80012c4 <DMA1_Channel2_3_IRQHandler+0x20>)
 80012b2:	0018      	movs	r0, r3
 80012b4:	f000 fa62 	bl	800177c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80012b8:	46c0      	nop			; (mov r8, r8)
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	46c0      	nop			; (mov r8, r8)
 80012c0:	200005bc 	.word	0x200005bc
 80012c4:	20000648 	.word	0x20000648

080012c8 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80012cc:	4b03      	ldr	r3, [pc, #12]	; (80012dc <TIM16_IRQHandler+0x14>)
 80012ce:	0018      	movs	r0, r3
 80012d0:	f002 fb7a 	bl	80039c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80012d4:	46c0      	nop			; (mov r8, r8)
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	46c0      	nop			; (mov r8, r8)
 80012dc:	20000600 	.word	0x20000600

080012e0 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80012e4:	4b03      	ldr	r3, [pc, #12]	; (80012f4 <TIM17_IRQHandler+0x14>)
 80012e6:	0018      	movs	r0, r3
 80012e8:	f002 fb6e 	bl	80039c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 80012ec:	46c0      	nop			; (mov r8, r8)
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	46c0      	nop			; (mov r8, r8)
 80012f4:	2000048c 	.word	0x2000048c

080012f8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80012fc:	46c0      	nop			; (mov r8, r8)
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
	...

08001304 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001304:	480d      	ldr	r0, [pc, #52]	; (800133c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001306:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001308:	480d      	ldr	r0, [pc, #52]	; (8001340 <LoopForever+0x6>)
  ldr r1, =_edata
 800130a:	490e      	ldr	r1, [pc, #56]	; (8001344 <LoopForever+0xa>)
  ldr r2, =_sidata
 800130c:	4a0e      	ldr	r2, [pc, #56]	; (8001348 <LoopForever+0xe>)
  movs r3, #0
 800130e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001310:	e002      	b.n	8001318 <LoopCopyDataInit>

08001312 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001312:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001314:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001316:	3304      	adds	r3, #4

08001318 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001318:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800131a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800131c:	d3f9      	bcc.n	8001312 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800131e:	4a0b      	ldr	r2, [pc, #44]	; (800134c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001320:	4c0b      	ldr	r4, [pc, #44]	; (8001350 <LoopForever+0x16>)
  movs r3, #0
 8001322:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001324:	e001      	b.n	800132a <LoopFillZerobss>

08001326 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001326:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001328:	3204      	adds	r2, #4

0800132a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800132a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800132c:	d3fb      	bcc.n	8001326 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800132e:	f7ff ffe3 	bl	80012f8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001332:	f003 fb4d 	bl	80049d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001336:	f7ff fb7b 	bl	8000a30 <main>

0800133a <LoopForever>:

LoopForever:
    b LoopForever
 800133a:	e7fe      	b.n	800133a <LoopForever>
  ldr   r0, =_estack
 800133c:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8001340:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001344:	20000228 	.word	0x20000228
  ldr r2, =_sidata
 8001348:	08004a94 	.word	0x08004a94
  ldr r2, =_sbss
 800134c:	20000228 	.word	0x20000228
  ldr r4, =_ebss
 8001350:	20000690 	.word	0x20000690

08001354 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001354:	e7fe      	b.n	8001354 <ADC1_IRQHandler>
	...

08001358 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800135c:	4b07      	ldr	r3, [pc, #28]	; (800137c <HAL_Init+0x24>)
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	4b06      	ldr	r3, [pc, #24]	; (800137c <HAL_Init+0x24>)
 8001362:	2110      	movs	r1, #16
 8001364:	430a      	orrs	r2, r1
 8001366:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001368:	2000      	movs	r0, #0
 800136a:	f000 f809 	bl	8001380 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800136e:	f7ff fdb9 	bl	8000ee4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001372:	2300      	movs	r3, #0
}
 8001374:	0018      	movs	r0, r3
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	46c0      	nop			; (mov r8, r8)
 800137c:	40022000 	.word	0x40022000

08001380 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001380:	b590      	push	{r4, r7, lr}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001388:	4b14      	ldr	r3, [pc, #80]	; (80013dc <HAL_InitTick+0x5c>)
 800138a:	681c      	ldr	r4, [r3, #0]
 800138c:	4b14      	ldr	r3, [pc, #80]	; (80013e0 <HAL_InitTick+0x60>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	0019      	movs	r1, r3
 8001392:	23fa      	movs	r3, #250	; 0xfa
 8001394:	0098      	lsls	r0, r3, #2
 8001396:	f7fe feb7 	bl	8000108 <__udivsi3>
 800139a:	0003      	movs	r3, r0
 800139c:	0019      	movs	r1, r3
 800139e:	0020      	movs	r0, r4
 80013a0:	f7fe feb2 	bl	8000108 <__udivsi3>
 80013a4:	0003      	movs	r3, r0
 80013a6:	0018      	movs	r0, r3
 80013a8:	f000 f92d 	bl	8001606 <HAL_SYSTICK_Config>
 80013ac:	1e03      	subs	r3, r0, #0
 80013ae:	d001      	beq.n	80013b4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
 80013b2:	e00f      	b.n	80013d4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2b03      	cmp	r3, #3
 80013b8:	d80b      	bhi.n	80013d2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013ba:	6879      	ldr	r1, [r7, #4]
 80013bc:	2301      	movs	r3, #1
 80013be:	425b      	negs	r3, r3
 80013c0:	2200      	movs	r2, #0
 80013c2:	0018      	movs	r0, r3
 80013c4:	f000 f8fa 	bl	80015bc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013c8:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <HAL_InitTick+0x64>)
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80013ce:	2300      	movs	r3, #0
 80013d0:	e000      	b.n	80013d4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
}
 80013d4:	0018      	movs	r0, r3
 80013d6:	46bd      	mov	sp, r7
 80013d8:	b003      	add	sp, #12
 80013da:	bd90      	pop	{r4, r7, pc}
 80013dc:	2000021c 	.word	0x2000021c
 80013e0:	20000224 	.word	0x20000224
 80013e4:	20000220 	.word	0x20000220

080013e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013ec:	4b05      	ldr	r3, [pc, #20]	; (8001404 <HAL_IncTick+0x1c>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	001a      	movs	r2, r3
 80013f2:	4b05      	ldr	r3, [pc, #20]	; (8001408 <HAL_IncTick+0x20>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	18d2      	adds	r2, r2, r3
 80013f8:	4b03      	ldr	r3, [pc, #12]	; (8001408 <HAL_IncTick+0x20>)
 80013fa:	601a      	str	r2, [r3, #0]
}
 80013fc:	46c0      	nop			; (mov r8, r8)
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	46c0      	nop			; (mov r8, r8)
 8001404:	20000224 	.word	0x20000224
 8001408:	2000068c 	.word	0x2000068c

0800140c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  return uwTick;
 8001410:	4b02      	ldr	r3, [pc, #8]	; (800141c <HAL_GetTick+0x10>)
 8001412:	681b      	ldr	r3, [r3, #0]
}
 8001414:	0018      	movs	r0, r3
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	46c0      	nop			; (mov r8, r8)
 800141c:	2000068c 	.word	0x2000068c

08001420 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001428:	f7ff fff0 	bl	800140c <HAL_GetTick>
 800142c:	0003      	movs	r3, r0
 800142e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	3301      	adds	r3, #1
 8001438:	d005      	beq.n	8001446 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800143a:	4b09      	ldr	r3, [pc, #36]	; (8001460 <HAL_Delay+0x40>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	001a      	movs	r2, r3
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	189b      	adds	r3, r3, r2
 8001444:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001446:	46c0      	nop			; (mov r8, r8)
 8001448:	f7ff ffe0 	bl	800140c <HAL_GetTick>
 800144c:	0002      	movs	r2, r0
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	68fa      	ldr	r2, [r7, #12]
 8001454:	429a      	cmp	r2, r3
 8001456:	d8f7      	bhi.n	8001448 <HAL_Delay+0x28>
  {
  }
}
 8001458:	46c0      	nop			; (mov r8, r8)
 800145a:	46bd      	mov	sp, r7
 800145c:	b004      	add	sp, #16
 800145e:	bd80      	pop	{r7, pc}
 8001460:	20000224 	.word	0x20000224

08001464 <__NVIC_EnableIRQ>:
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	0002      	movs	r2, r0
 800146c:	1dfb      	adds	r3, r7, #7
 800146e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001470:	1dfb      	adds	r3, r7, #7
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	2b7f      	cmp	r3, #127	; 0x7f
 8001476:	d809      	bhi.n	800148c <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001478:	1dfb      	adds	r3, r7, #7
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	001a      	movs	r2, r3
 800147e:	231f      	movs	r3, #31
 8001480:	401a      	ands	r2, r3
 8001482:	4b04      	ldr	r3, [pc, #16]	; (8001494 <__NVIC_EnableIRQ+0x30>)
 8001484:	2101      	movs	r1, #1
 8001486:	4091      	lsls	r1, r2
 8001488:	000a      	movs	r2, r1
 800148a:	601a      	str	r2, [r3, #0]
}
 800148c:	46c0      	nop			; (mov r8, r8)
 800148e:	46bd      	mov	sp, r7
 8001490:	b002      	add	sp, #8
 8001492:	bd80      	pop	{r7, pc}
 8001494:	e000e100 	.word	0xe000e100

08001498 <__NVIC_SetPriority>:
{
 8001498:	b590      	push	{r4, r7, lr}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	0002      	movs	r2, r0
 80014a0:	6039      	str	r1, [r7, #0]
 80014a2:	1dfb      	adds	r3, r7, #7
 80014a4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80014a6:	1dfb      	adds	r3, r7, #7
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	2b7f      	cmp	r3, #127	; 0x7f
 80014ac:	d828      	bhi.n	8001500 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014ae:	4a2f      	ldr	r2, [pc, #188]	; (800156c <__NVIC_SetPriority+0xd4>)
 80014b0:	1dfb      	adds	r3, r7, #7
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	b25b      	sxtb	r3, r3
 80014b6:	089b      	lsrs	r3, r3, #2
 80014b8:	33c0      	adds	r3, #192	; 0xc0
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	589b      	ldr	r3, [r3, r2]
 80014be:	1dfa      	adds	r2, r7, #7
 80014c0:	7812      	ldrb	r2, [r2, #0]
 80014c2:	0011      	movs	r1, r2
 80014c4:	2203      	movs	r2, #3
 80014c6:	400a      	ands	r2, r1
 80014c8:	00d2      	lsls	r2, r2, #3
 80014ca:	21ff      	movs	r1, #255	; 0xff
 80014cc:	4091      	lsls	r1, r2
 80014ce:	000a      	movs	r2, r1
 80014d0:	43d2      	mvns	r2, r2
 80014d2:	401a      	ands	r2, r3
 80014d4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	019b      	lsls	r3, r3, #6
 80014da:	22ff      	movs	r2, #255	; 0xff
 80014dc:	401a      	ands	r2, r3
 80014de:	1dfb      	adds	r3, r7, #7
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	0018      	movs	r0, r3
 80014e4:	2303      	movs	r3, #3
 80014e6:	4003      	ands	r3, r0
 80014e8:	00db      	lsls	r3, r3, #3
 80014ea:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014ec:	481f      	ldr	r0, [pc, #124]	; (800156c <__NVIC_SetPriority+0xd4>)
 80014ee:	1dfb      	adds	r3, r7, #7
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	b25b      	sxtb	r3, r3
 80014f4:	089b      	lsrs	r3, r3, #2
 80014f6:	430a      	orrs	r2, r1
 80014f8:	33c0      	adds	r3, #192	; 0xc0
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	501a      	str	r2, [r3, r0]
}
 80014fe:	e031      	b.n	8001564 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001500:	4a1b      	ldr	r2, [pc, #108]	; (8001570 <__NVIC_SetPriority+0xd8>)
 8001502:	1dfb      	adds	r3, r7, #7
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	0019      	movs	r1, r3
 8001508:	230f      	movs	r3, #15
 800150a:	400b      	ands	r3, r1
 800150c:	3b08      	subs	r3, #8
 800150e:	089b      	lsrs	r3, r3, #2
 8001510:	3306      	adds	r3, #6
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	18d3      	adds	r3, r2, r3
 8001516:	3304      	adds	r3, #4
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	1dfa      	adds	r2, r7, #7
 800151c:	7812      	ldrb	r2, [r2, #0]
 800151e:	0011      	movs	r1, r2
 8001520:	2203      	movs	r2, #3
 8001522:	400a      	ands	r2, r1
 8001524:	00d2      	lsls	r2, r2, #3
 8001526:	21ff      	movs	r1, #255	; 0xff
 8001528:	4091      	lsls	r1, r2
 800152a:	000a      	movs	r2, r1
 800152c:	43d2      	mvns	r2, r2
 800152e:	401a      	ands	r2, r3
 8001530:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	019b      	lsls	r3, r3, #6
 8001536:	22ff      	movs	r2, #255	; 0xff
 8001538:	401a      	ands	r2, r3
 800153a:	1dfb      	adds	r3, r7, #7
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	0018      	movs	r0, r3
 8001540:	2303      	movs	r3, #3
 8001542:	4003      	ands	r3, r0
 8001544:	00db      	lsls	r3, r3, #3
 8001546:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001548:	4809      	ldr	r0, [pc, #36]	; (8001570 <__NVIC_SetPriority+0xd8>)
 800154a:	1dfb      	adds	r3, r7, #7
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	001c      	movs	r4, r3
 8001550:	230f      	movs	r3, #15
 8001552:	4023      	ands	r3, r4
 8001554:	3b08      	subs	r3, #8
 8001556:	089b      	lsrs	r3, r3, #2
 8001558:	430a      	orrs	r2, r1
 800155a:	3306      	adds	r3, #6
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	18c3      	adds	r3, r0, r3
 8001560:	3304      	adds	r3, #4
 8001562:	601a      	str	r2, [r3, #0]
}
 8001564:	46c0      	nop			; (mov r8, r8)
 8001566:	46bd      	mov	sp, r7
 8001568:	b003      	add	sp, #12
 800156a:	bd90      	pop	{r4, r7, pc}
 800156c:	e000e100 	.word	0xe000e100
 8001570:	e000ed00 	.word	0xe000ed00

08001574 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	3b01      	subs	r3, #1
 8001580:	4a0c      	ldr	r2, [pc, #48]	; (80015b4 <SysTick_Config+0x40>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d901      	bls.n	800158a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001586:	2301      	movs	r3, #1
 8001588:	e010      	b.n	80015ac <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800158a:	4b0b      	ldr	r3, [pc, #44]	; (80015b8 <SysTick_Config+0x44>)
 800158c:	687a      	ldr	r2, [r7, #4]
 800158e:	3a01      	subs	r2, #1
 8001590:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001592:	2301      	movs	r3, #1
 8001594:	425b      	negs	r3, r3
 8001596:	2103      	movs	r1, #3
 8001598:	0018      	movs	r0, r3
 800159a:	f7ff ff7d 	bl	8001498 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800159e:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <SysTick_Config+0x44>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015a4:	4b04      	ldr	r3, [pc, #16]	; (80015b8 <SysTick_Config+0x44>)
 80015a6:	2207      	movs	r2, #7
 80015a8:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015aa:	2300      	movs	r3, #0
}
 80015ac:	0018      	movs	r0, r3
 80015ae:	46bd      	mov	sp, r7
 80015b0:	b002      	add	sp, #8
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	00ffffff 	.word	0x00ffffff
 80015b8:	e000e010 	.word	0xe000e010

080015bc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	60b9      	str	r1, [r7, #8]
 80015c4:	607a      	str	r2, [r7, #4]
 80015c6:	210f      	movs	r1, #15
 80015c8:	187b      	adds	r3, r7, r1
 80015ca:	1c02      	adds	r2, r0, #0
 80015cc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80015ce:	68ba      	ldr	r2, [r7, #8]
 80015d0:	187b      	adds	r3, r7, r1
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	b25b      	sxtb	r3, r3
 80015d6:	0011      	movs	r1, r2
 80015d8:	0018      	movs	r0, r3
 80015da:	f7ff ff5d 	bl	8001498 <__NVIC_SetPriority>
}
 80015de:	46c0      	nop			; (mov r8, r8)
 80015e0:	46bd      	mov	sp, r7
 80015e2:	b004      	add	sp, #16
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b082      	sub	sp, #8
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	0002      	movs	r2, r0
 80015ee:	1dfb      	adds	r3, r7, #7
 80015f0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015f2:	1dfb      	adds	r3, r7, #7
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	b25b      	sxtb	r3, r3
 80015f8:	0018      	movs	r0, r3
 80015fa:	f7ff ff33 	bl	8001464 <__NVIC_EnableIRQ>
}
 80015fe:	46c0      	nop			; (mov r8, r8)
 8001600:	46bd      	mov	sp, r7
 8001602:	b002      	add	sp, #8
 8001604:	bd80      	pop	{r7, pc}

08001606 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	b082      	sub	sp, #8
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	0018      	movs	r0, r3
 8001612:	f7ff ffaf 	bl	8001574 <SysTick_Config>
 8001616:	0003      	movs	r3, r0
}
 8001618:	0018      	movs	r0, r3
 800161a:	46bd      	mov	sp, r7
 800161c:	b002      	add	sp, #8
 800161e:	bd80      	pop	{r7, pc}

08001620 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001628:	2300      	movs	r3, #0
 800162a:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d101      	bne.n	8001636 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e036      	b.n	80016a4 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2221      	movs	r2, #33	; 0x21
 800163a:	2102      	movs	r1, #2
 800163c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	4a18      	ldr	r2, [pc, #96]	; (80016ac <HAL_DMA_Init+0x8c>)
 800164a:	4013      	ands	r3, r2
 800164c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001656:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001662:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	695b      	ldr	r3, [r3, #20]
 8001668:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800166e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	69db      	ldr	r3, [r3, #28]
 8001674:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001676:	68fa      	ldr	r2, [r7, #12]
 8001678:	4313      	orrs	r3, r2
 800167a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	68fa      	ldr	r2, [r7, #12]
 8001682:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	0018      	movs	r0, r3
 8001688:	f000 f946 	bl	8001918 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2200      	movs	r2, #0
 8001690:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2221      	movs	r2, #33	; 0x21
 8001696:	2101      	movs	r1, #1
 8001698:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2220      	movs	r2, #32
 800169e:	2100      	movs	r1, #0
 80016a0:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80016a2:	2300      	movs	r3, #0
}  
 80016a4:	0018      	movs	r0, r3
 80016a6:	46bd      	mov	sp, r7
 80016a8:	b004      	add	sp, #16
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	ffffc00f 	.word	0xffffc00f

080016b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b086      	sub	sp, #24
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	607a      	str	r2, [r7, #4]
 80016bc:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80016be:	2317      	movs	r3, #23
 80016c0:	18fb      	adds	r3, r7, r3
 80016c2:	2200      	movs	r2, #0
 80016c4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	2220      	movs	r2, #32
 80016ca:	5c9b      	ldrb	r3, [r3, r2]
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d101      	bne.n	80016d4 <HAL_DMA_Start_IT+0x24>
 80016d0:	2302      	movs	r3, #2
 80016d2:	e04f      	b.n	8001774 <HAL_DMA_Start_IT+0xc4>
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	2220      	movs	r2, #32
 80016d8:	2101      	movs	r1, #1
 80016da:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	2221      	movs	r2, #33	; 0x21
 80016e0:	5c9b      	ldrb	r3, [r3, r2]
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d13a      	bne.n	800175e <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	2221      	movs	r2, #33	; 0x21
 80016ec:	2102      	movs	r1, #2
 80016ee:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	2200      	movs	r2, #0
 80016f4:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2101      	movs	r1, #1
 8001702:	438a      	bics	r2, r1
 8001704:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	68b9      	ldr	r1, [r7, #8]
 800170c:	68f8      	ldr	r0, [r7, #12]
 800170e:	f000 f8d7 	bl	80018c0 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001716:	2b00      	cmp	r3, #0
 8001718:	d008      	beq.n	800172c <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	210e      	movs	r1, #14
 8001726:	430a      	orrs	r2, r1
 8001728:	601a      	str	r2, [r3, #0]
 800172a:	e00f      	b.n	800174c <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	210a      	movs	r1, #10
 8001738:	430a      	orrs	r2, r1
 800173a:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2104      	movs	r1, #4
 8001748:	438a      	bics	r2, r1
 800174a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	2101      	movs	r1, #1
 8001758:	430a      	orrs	r2, r1
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	e007      	b.n	800176e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	2220      	movs	r2, #32
 8001762:	2100      	movs	r1, #0
 8001764:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8001766:	2317      	movs	r3, #23
 8001768:	18fb      	adds	r3, r7, r3
 800176a:	2202      	movs	r2, #2
 800176c:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 800176e:	2317      	movs	r3, #23
 8001770:	18fb      	adds	r3, r7, r3
 8001772:	781b      	ldrb	r3, [r3, #0]
} 
 8001774:	0018      	movs	r0, r3
 8001776:	46bd      	mov	sp, r7
 8001778:	b006      	add	sp, #24
 800177a:	bd80      	pop	{r7, pc}

0800177c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001798:	2204      	movs	r2, #4
 800179a:	409a      	lsls	r2, r3
 800179c:	0013      	movs	r3, r2
 800179e:	68fa      	ldr	r2, [r7, #12]
 80017a0:	4013      	ands	r3, r2
 80017a2:	d024      	beq.n	80017ee <HAL_DMA_IRQHandler+0x72>
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	2204      	movs	r2, #4
 80017a8:	4013      	ands	r3, r2
 80017aa:	d020      	beq.n	80017ee <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	2220      	movs	r2, #32
 80017b4:	4013      	ands	r3, r2
 80017b6:	d107      	bne.n	80017c8 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	2104      	movs	r1, #4
 80017c4:	438a      	bics	r2, r1
 80017c6:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017d0:	2104      	movs	r1, #4
 80017d2:	4091      	lsls	r1, r2
 80017d4:	000a      	movs	r2, r1
 80017d6:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d100      	bne.n	80017e2 <HAL_DMA_IRQHandler+0x66>
 80017e0:	e06a      	b.n	80018b8 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	0010      	movs	r0, r2
 80017ea:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80017ec:	e064      	b.n	80018b8 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f2:	2202      	movs	r2, #2
 80017f4:	409a      	lsls	r2, r3
 80017f6:	0013      	movs	r3, r2
 80017f8:	68fa      	ldr	r2, [r7, #12]
 80017fa:	4013      	ands	r3, r2
 80017fc:	d02b      	beq.n	8001856 <HAL_DMA_IRQHandler+0xda>
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	2202      	movs	r2, #2
 8001802:	4013      	ands	r3, r2
 8001804:	d027      	beq.n	8001856 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2220      	movs	r2, #32
 800180e:	4013      	ands	r3, r2
 8001810:	d10b      	bne.n	800182a <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	210a      	movs	r1, #10
 800181e:	438a      	bics	r2, r1
 8001820:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2221      	movs	r2, #33	; 0x21
 8001826:	2101      	movs	r1, #1
 8001828:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001832:	2102      	movs	r1, #2
 8001834:	4091      	lsls	r1, r2
 8001836:	000a      	movs	r2, r1
 8001838:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2220      	movs	r2, #32
 800183e:	2100      	movs	r1, #0
 8001840:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001846:	2b00      	cmp	r3, #0
 8001848:	d036      	beq.n	80018b8 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	0010      	movs	r0, r2
 8001852:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001854:	e030      	b.n	80018b8 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185a:	2208      	movs	r2, #8
 800185c:	409a      	lsls	r2, r3
 800185e:	0013      	movs	r3, r2
 8001860:	68fa      	ldr	r2, [r7, #12]
 8001862:	4013      	ands	r3, r2
 8001864:	d028      	beq.n	80018b8 <HAL_DMA_IRQHandler+0x13c>
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	2208      	movs	r2, #8
 800186a:	4013      	ands	r3, r2
 800186c:	d024      	beq.n	80018b8 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	210e      	movs	r1, #14
 800187a:	438a      	bics	r2, r1
 800187c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001886:	2101      	movs	r1, #1
 8001888:	4091      	lsls	r1, r2
 800188a:	000a      	movs	r2, r1
 800188c:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2201      	movs	r2, #1
 8001892:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2221      	movs	r2, #33	; 0x21
 8001898:	2101      	movs	r1, #1
 800189a:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2220      	movs	r2, #32
 80018a0:	2100      	movs	r1, #0
 80018a2:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d005      	beq.n	80018b8 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	0010      	movs	r0, r2
 80018b4:	4798      	blx	r3
    }
   }
}  
 80018b6:	e7ff      	b.n	80018b8 <HAL_DMA_IRQHandler+0x13c>
 80018b8:	46c0      	nop			; (mov r8, r8)
 80018ba:	46bd      	mov	sp, r7
 80018bc:	b004      	add	sp, #16
 80018be:	bd80      	pop	{r7, pc}

080018c0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	60b9      	str	r1, [r7, #8]
 80018ca:	607a      	str	r2, [r7, #4]
 80018cc:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018d6:	2101      	movs	r1, #1
 80018d8:	4091      	lsls	r1, r2
 80018da:	000a      	movs	r2, r1
 80018dc:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	683a      	ldr	r2, [r7, #0]
 80018e4:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	2b10      	cmp	r3, #16
 80018ec:	d108      	bne.n	8001900 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	68ba      	ldr	r2, [r7, #8]
 80018fc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80018fe:	e007      	b.n	8001910 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	68ba      	ldr	r2, [r7, #8]
 8001906:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	60da      	str	r2, [r3, #12]
}
 8001910:	46c0      	nop			; (mov r8, r8)
 8001912:	46bd      	mov	sp, r7
 8001914:	b004      	add	sp, #16
 8001916:	bd80      	pop	{r7, pc}

08001918 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a08      	ldr	r2, [pc, #32]	; (8001948 <DMA_CalcBaseAndBitshift+0x30>)
 8001926:	4694      	mov	ip, r2
 8001928:	4463      	add	r3, ip
 800192a:	2114      	movs	r1, #20
 800192c:	0018      	movs	r0, r3
 800192e:	f7fe fbeb 	bl	8000108 <__udivsi3>
 8001932:	0003      	movs	r3, r0
 8001934:	009a      	lsls	r2, r3, #2
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4a03      	ldr	r2, [pc, #12]	; (800194c <DMA_CalcBaseAndBitshift+0x34>)
 800193e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001940:	46c0      	nop			; (mov r8, r8)
 8001942:	46bd      	mov	sp, r7
 8001944:	b002      	add	sp, #8
 8001946:	bd80      	pop	{r7, pc}
 8001948:	bffdfff8 	.word	0xbffdfff8
 800194c:	40020000 	.word	0x40020000

08001950 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b086      	sub	sp, #24
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800195a:	2300      	movs	r3, #0
 800195c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800195e:	e14f      	b.n	8001c00 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2101      	movs	r1, #1
 8001966:	697a      	ldr	r2, [r7, #20]
 8001968:	4091      	lsls	r1, r2
 800196a:	000a      	movs	r2, r1
 800196c:	4013      	ands	r3, r2
 800196e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d100      	bne.n	8001978 <HAL_GPIO_Init+0x28>
 8001976:	e140      	b.n	8001bfa <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	2203      	movs	r2, #3
 800197e:	4013      	ands	r3, r2
 8001980:	2b01      	cmp	r3, #1
 8001982:	d005      	beq.n	8001990 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	2203      	movs	r2, #3
 800198a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800198c:	2b02      	cmp	r3, #2
 800198e:	d130      	bne.n	80019f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	2203      	movs	r2, #3
 800199c:	409a      	lsls	r2, r3
 800199e:	0013      	movs	r3, r2
 80019a0:	43da      	mvns	r2, r3
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	4013      	ands	r3, r2
 80019a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	68da      	ldr	r2, [r3, #12]
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	409a      	lsls	r2, r3
 80019b2:	0013      	movs	r3, r2
 80019b4:	693a      	ldr	r2, [r7, #16]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	693a      	ldr	r2, [r7, #16]
 80019be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019c6:	2201      	movs	r2, #1
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	409a      	lsls	r2, r3
 80019cc:	0013      	movs	r3, r2
 80019ce:	43da      	mvns	r2, r3
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	4013      	ands	r3, r2
 80019d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	091b      	lsrs	r3, r3, #4
 80019dc:	2201      	movs	r2, #1
 80019de:	401a      	ands	r2, r3
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	409a      	lsls	r2, r3
 80019e4:	0013      	movs	r3, r2
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	2203      	movs	r2, #3
 80019f8:	4013      	ands	r3, r2
 80019fa:	2b03      	cmp	r3, #3
 80019fc:	d017      	beq.n	8001a2e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	68db      	ldr	r3, [r3, #12]
 8001a02:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	2203      	movs	r2, #3
 8001a0a:	409a      	lsls	r2, r3
 8001a0c:	0013      	movs	r3, r2
 8001a0e:	43da      	mvns	r2, r3
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	4013      	ands	r3, r2
 8001a14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	689a      	ldr	r2, [r3, #8]
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	409a      	lsls	r2, r3
 8001a20:	0013      	movs	r3, r2
 8001a22:	693a      	ldr	r2, [r7, #16]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	2203      	movs	r2, #3
 8001a34:	4013      	ands	r3, r2
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d123      	bne.n	8001a82 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	08da      	lsrs	r2, r3, #3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	3208      	adds	r2, #8
 8001a42:	0092      	lsls	r2, r2, #2
 8001a44:	58d3      	ldr	r3, [r2, r3]
 8001a46:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	2207      	movs	r2, #7
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	220f      	movs	r2, #15
 8001a52:	409a      	lsls	r2, r3
 8001a54:	0013      	movs	r3, r2
 8001a56:	43da      	mvns	r2, r3
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	691a      	ldr	r2, [r3, #16]
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	2107      	movs	r1, #7
 8001a66:	400b      	ands	r3, r1
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	409a      	lsls	r2, r3
 8001a6c:	0013      	movs	r3, r2
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	08da      	lsrs	r2, r3, #3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	3208      	adds	r2, #8
 8001a7c:	0092      	lsls	r2, r2, #2
 8001a7e:	6939      	ldr	r1, [r7, #16]
 8001a80:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	2203      	movs	r2, #3
 8001a8e:	409a      	lsls	r2, r3
 8001a90:	0013      	movs	r3, r2
 8001a92:	43da      	mvns	r2, r3
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	4013      	ands	r3, r2
 8001a98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	2203      	movs	r2, #3
 8001aa0:	401a      	ands	r2, r3
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	409a      	lsls	r2, r3
 8001aa8:	0013      	movs	r3, r2
 8001aaa:	693a      	ldr	r2, [r7, #16]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685a      	ldr	r2, [r3, #4]
 8001aba:	23c0      	movs	r3, #192	; 0xc0
 8001abc:	029b      	lsls	r3, r3, #10
 8001abe:	4013      	ands	r3, r2
 8001ac0:	d100      	bne.n	8001ac4 <HAL_GPIO_Init+0x174>
 8001ac2:	e09a      	b.n	8001bfa <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ac4:	4b54      	ldr	r3, [pc, #336]	; (8001c18 <HAL_GPIO_Init+0x2c8>)
 8001ac6:	699a      	ldr	r2, [r3, #24]
 8001ac8:	4b53      	ldr	r3, [pc, #332]	; (8001c18 <HAL_GPIO_Init+0x2c8>)
 8001aca:	2101      	movs	r1, #1
 8001acc:	430a      	orrs	r2, r1
 8001ace:	619a      	str	r2, [r3, #24]
 8001ad0:	4b51      	ldr	r3, [pc, #324]	; (8001c18 <HAL_GPIO_Init+0x2c8>)
 8001ad2:	699b      	ldr	r3, [r3, #24]
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	60bb      	str	r3, [r7, #8]
 8001ada:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001adc:	4a4f      	ldr	r2, [pc, #316]	; (8001c1c <HAL_GPIO_Init+0x2cc>)
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	089b      	lsrs	r3, r3, #2
 8001ae2:	3302      	adds	r3, #2
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	589b      	ldr	r3, [r3, r2]
 8001ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	2203      	movs	r2, #3
 8001aee:	4013      	ands	r3, r2
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	220f      	movs	r2, #15
 8001af4:	409a      	lsls	r2, r3
 8001af6:	0013      	movs	r3, r2
 8001af8:	43da      	mvns	r2, r3
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	4013      	ands	r3, r2
 8001afe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	2390      	movs	r3, #144	; 0x90
 8001b04:	05db      	lsls	r3, r3, #23
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d013      	beq.n	8001b32 <HAL_GPIO_Init+0x1e2>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a44      	ldr	r2, [pc, #272]	; (8001c20 <HAL_GPIO_Init+0x2d0>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d00d      	beq.n	8001b2e <HAL_GPIO_Init+0x1de>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a43      	ldr	r2, [pc, #268]	; (8001c24 <HAL_GPIO_Init+0x2d4>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d007      	beq.n	8001b2a <HAL_GPIO_Init+0x1da>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a42      	ldr	r2, [pc, #264]	; (8001c28 <HAL_GPIO_Init+0x2d8>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d101      	bne.n	8001b26 <HAL_GPIO_Init+0x1d6>
 8001b22:	2303      	movs	r3, #3
 8001b24:	e006      	b.n	8001b34 <HAL_GPIO_Init+0x1e4>
 8001b26:	2305      	movs	r3, #5
 8001b28:	e004      	b.n	8001b34 <HAL_GPIO_Init+0x1e4>
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	e002      	b.n	8001b34 <HAL_GPIO_Init+0x1e4>
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e000      	b.n	8001b34 <HAL_GPIO_Init+0x1e4>
 8001b32:	2300      	movs	r3, #0
 8001b34:	697a      	ldr	r2, [r7, #20]
 8001b36:	2103      	movs	r1, #3
 8001b38:	400a      	ands	r2, r1
 8001b3a:	0092      	lsls	r2, r2, #2
 8001b3c:	4093      	lsls	r3, r2
 8001b3e:	693a      	ldr	r2, [r7, #16]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b44:	4935      	ldr	r1, [pc, #212]	; (8001c1c <HAL_GPIO_Init+0x2cc>)
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	089b      	lsrs	r3, r3, #2
 8001b4a:	3302      	adds	r3, #2
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	693a      	ldr	r2, [r7, #16]
 8001b50:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b52:	4b36      	ldr	r3, [pc, #216]	; (8001c2c <HAL_GPIO_Init+0x2dc>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	43da      	mvns	r2, r3
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	4013      	ands	r3, r2
 8001b60:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685a      	ldr	r2, [r3, #4]
 8001b66:	2380      	movs	r3, #128	; 0x80
 8001b68:	025b      	lsls	r3, r3, #9
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	d003      	beq.n	8001b76 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001b6e:	693a      	ldr	r2, [r7, #16]
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001b76:	4b2d      	ldr	r3, [pc, #180]	; (8001c2c <HAL_GPIO_Init+0x2dc>)
 8001b78:	693a      	ldr	r2, [r7, #16]
 8001b7a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001b7c:	4b2b      	ldr	r3, [pc, #172]	; (8001c2c <HAL_GPIO_Init+0x2dc>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	43da      	mvns	r2, r3
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685a      	ldr	r2, [r3, #4]
 8001b90:	2380      	movs	r3, #128	; 0x80
 8001b92:	029b      	lsls	r3, r3, #10
 8001b94:	4013      	ands	r3, r2
 8001b96:	d003      	beq.n	8001ba0 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001b98:	693a      	ldr	r2, [r7, #16]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001ba0:	4b22      	ldr	r3, [pc, #136]	; (8001c2c <HAL_GPIO_Init+0x2dc>)
 8001ba2:	693a      	ldr	r2, [r7, #16]
 8001ba4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ba6:	4b21      	ldr	r3, [pc, #132]	; (8001c2c <HAL_GPIO_Init+0x2dc>)
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	43da      	mvns	r2, r3
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	685a      	ldr	r2, [r3, #4]
 8001bba:	2380      	movs	r3, #128	; 0x80
 8001bbc:	035b      	lsls	r3, r3, #13
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	d003      	beq.n	8001bca <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001bc2:	693a      	ldr	r2, [r7, #16]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001bca:	4b18      	ldr	r3, [pc, #96]	; (8001c2c <HAL_GPIO_Init+0x2dc>)
 8001bcc:	693a      	ldr	r2, [r7, #16]
 8001bce:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001bd0:	4b16      	ldr	r3, [pc, #88]	; (8001c2c <HAL_GPIO_Init+0x2dc>)
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	43da      	mvns	r2, r3
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685a      	ldr	r2, [r3, #4]
 8001be4:	2380      	movs	r3, #128	; 0x80
 8001be6:	039b      	lsls	r3, r3, #14
 8001be8:	4013      	ands	r3, r2
 8001bea:	d003      	beq.n	8001bf4 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001bec:	693a      	ldr	r2, [r7, #16]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001bf4:	4b0d      	ldr	r3, [pc, #52]	; (8001c2c <HAL_GPIO_Init+0x2dc>)
 8001bf6:	693a      	ldr	r2, [r7, #16]
 8001bf8:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	40da      	lsrs	r2, r3
 8001c08:	1e13      	subs	r3, r2, #0
 8001c0a:	d000      	beq.n	8001c0e <HAL_GPIO_Init+0x2be>
 8001c0c:	e6a8      	b.n	8001960 <HAL_GPIO_Init+0x10>
  } 
}
 8001c0e:	46c0      	nop			; (mov r8, r8)
 8001c10:	46bd      	mov	sp, r7
 8001c12:	b006      	add	sp, #24
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	46c0      	nop			; (mov r8, r8)
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	40010000 	.word	0x40010000
 8001c20:	48000400 	.word	0x48000400
 8001c24:	48000800 	.word	0x48000800
 8001c28:	48000c00 	.word	0x48000c00
 8001c2c:	40010400 	.word	0x40010400

08001c30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	0008      	movs	r0, r1
 8001c3a:	0011      	movs	r1, r2
 8001c3c:	1cbb      	adds	r3, r7, #2
 8001c3e:	1c02      	adds	r2, r0, #0
 8001c40:	801a      	strh	r2, [r3, #0]
 8001c42:	1c7b      	adds	r3, r7, #1
 8001c44:	1c0a      	adds	r2, r1, #0
 8001c46:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c48:	1c7b      	adds	r3, r7, #1
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d004      	beq.n	8001c5a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c50:	1cbb      	adds	r3, r7, #2
 8001c52:	881a      	ldrh	r2, [r3, #0]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c58:	e003      	b.n	8001c62 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c5a:	1cbb      	adds	r3, r7, #2
 8001c5c:	881a      	ldrh	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c62:	46c0      	nop			; (mov r8, r8)
 8001c64:	46bd      	mov	sp, r7
 8001c66:	b002      	add	sp, #8
 8001c68:	bd80      	pop	{r7, pc}
	...

08001c6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b088      	sub	sp, #32
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d101      	bne.n	8001c7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e303      	b.n	8002286 <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	2201      	movs	r2, #1
 8001c84:	4013      	ands	r3, r2
 8001c86:	d100      	bne.n	8001c8a <HAL_RCC_OscConfig+0x1e>
 8001c88:	e08d      	b.n	8001da6 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001c8a:	4bc4      	ldr	r3, [pc, #784]	; (8001f9c <HAL_RCC_OscConfig+0x330>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	220c      	movs	r2, #12
 8001c90:	4013      	ands	r3, r2
 8001c92:	2b04      	cmp	r3, #4
 8001c94:	d00e      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c96:	4bc1      	ldr	r3, [pc, #772]	; (8001f9c <HAL_RCC_OscConfig+0x330>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	220c      	movs	r2, #12
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	2b08      	cmp	r3, #8
 8001ca0:	d116      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x64>
 8001ca2:	4bbe      	ldr	r3, [pc, #760]	; (8001f9c <HAL_RCC_OscConfig+0x330>)
 8001ca4:	685a      	ldr	r2, [r3, #4]
 8001ca6:	2380      	movs	r3, #128	; 0x80
 8001ca8:	025b      	lsls	r3, r3, #9
 8001caa:	401a      	ands	r2, r3
 8001cac:	2380      	movs	r3, #128	; 0x80
 8001cae:	025b      	lsls	r3, r3, #9
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d10d      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cb4:	4bb9      	ldr	r3, [pc, #740]	; (8001f9c <HAL_RCC_OscConfig+0x330>)
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	2380      	movs	r3, #128	; 0x80
 8001cba:	029b      	lsls	r3, r3, #10
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	d100      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x56>
 8001cc0:	e070      	b.n	8001da4 <HAL_RCC_OscConfig+0x138>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d000      	beq.n	8001ccc <HAL_RCC_OscConfig+0x60>
 8001cca:	e06b      	b.n	8001da4 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e2da      	b.n	8002286 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d107      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x7c>
 8001cd8:	4bb0      	ldr	r3, [pc, #704]	; (8001f9c <HAL_RCC_OscConfig+0x330>)
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	4baf      	ldr	r3, [pc, #700]	; (8001f9c <HAL_RCC_OscConfig+0x330>)
 8001cde:	2180      	movs	r1, #128	; 0x80
 8001ce0:	0249      	lsls	r1, r1, #9
 8001ce2:	430a      	orrs	r2, r1
 8001ce4:	601a      	str	r2, [r3, #0]
 8001ce6:	e02f      	b.n	8001d48 <HAL_RCC_OscConfig+0xdc>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d10c      	bne.n	8001d0a <HAL_RCC_OscConfig+0x9e>
 8001cf0:	4baa      	ldr	r3, [pc, #680]	; (8001f9c <HAL_RCC_OscConfig+0x330>)
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	4ba9      	ldr	r3, [pc, #676]	; (8001f9c <HAL_RCC_OscConfig+0x330>)
 8001cf6:	49aa      	ldr	r1, [pc, #680]	; (8001fa0 <HAL_RCC_OscConfig+0x334>)
 8001cf8:	400a      	ands	r2, r1
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	4ba7      	ldr	r3, [pc, #668]	; (8001f9c <HAL_RCC_OscConfig+0x330>)
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	4ba6      	ldr	r3, [pc, #664]	; (8001f9c <HAL_RCC_OscConfig+0x330>)
 8001d02:	49a8      	ldr	r1, [pc, #672]	; (8001fa4 <HAL_RCC_OscConfig+0x338>)
 8001d04:	400a      	ands	r2, r1
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	e01e      	b.n	8001d48 <HAL_RCC_OscConfig+0xdc>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	2b05      	cmp	r3, #5
 8001d10:	d10e      	bne.n	8001d30 <HAL_RCC_OscConfig+0xc4>
 8001d12:	4ba2      	ldr	r3, [pc, #648]	; (8001f9c <HAL_RCC_OscConfig+0x330>)
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	4ba1      	ldr	r3, [pc, #644]	; (8001f9c <HAL_RCC_OscConfig+0x330>)
 8001d18:	2180      	movs	r1, #128	; 0x80
 8001d1a:	02c9      	lsls	r1, r1, #11
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	601a      	str	r2, [r3, #0]
 8001d20:	4b9e      	ldr	r3, [pc, #632]	; (8001f9c <HAL_RCC_OscConfig+0x330>)
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	4b9d      	ldr	r3, [pc, #628]	; (8001f9c <HAL_RCC_OscConfig+0x330>)
 8001d26:	2180      	movs	r1, #128	; 0x80
 8001d28:	0249      	lsls	r1, r1, #9
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	601a      	str	r2, [r3, #0]
 8001d2e:	e00b      	b.n	8001d48 <HAL_RCC_OscConfig+0xdc>
 8001d30:	4b9a      	ldr	r3, [pc, #616]	; (8001f9c <HAL_RCC_OscConfig+0x330>)
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	4b99      	ldr	r3, [pc, #612]	; (8001f9c <HAL_RCC_OscConfig+0x330>)
 8001d36:	499a      	ldr	r1, [pc, #616]	; (8001fa0 <HAL_RCC_OscConfig+0x334>)
 8001d38:	400a      	ands	r2, r1
 8001d3a:	601a      	str	r2, [r3, #0]
 8001d3c:	4b97      	ldr	r3, [pc, #604]	; (8001f9c <HAL_RCC_OscConfig+0x330>)
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	4b96      	ldr	r3, [pc, #600]	; (8001f9c <HAL_RCC_OscConfig+0x330>)
 8001d42:	4998      	ldr	r1, [pc, #608]	; (8001fa4 <HAL_RCC_OscConfig+0x338>)
 8001d44:	400a      	ands	r2, r1
 8001d46:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d014      	beq.n	8001d7a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d50:	f7ff fb5c 	bl	800140c <HAL_GetTick>
 8001d54:	0003      	movs	r3, r0
 8001d56:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d58:	e008      	b.n	8001d6c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d5a:	f7ff fb57 	bl	800140c <HAL_GetTick>
 8001d5e:	0002      	movs	r2, r0
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	2b64      	cmp	r3, #100	; 0x64
 8001d66:	d901      	bls.n	8001d6c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e28c      	b.n	8002286 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d6c:	4b8b      	ldr	r3, [pc, #556]	; (8001f9c <HAL_RCC_OscConfig+0x330>)
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	2380      	movs	r3, #128	; 0x80
 8001d72:	029b      	lsls	r3, r3, #10
 8001d74:	4013      	ands	r3, r2
 8001d76:	d0f0      	beq.n	8001d5a <HAL_RCC_OscConfig+0xee>
 8001d78:	e015      	b.n	8001da6 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d7a:	f7ff fb47 	bl	800140c <HAL_GetTick>
 8001d7e:	0003      	movs	r3, r0
 8001d80:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d82:	e008      	b.n	8001d96 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d84:	f7ff fb42 	bl	800140c <HAL_GetTick>
 8001d88:	0002      	movs	r2, r0
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b64      	cmp	r3, #100	; 0x64
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e277      	b.n	8002286 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d96:	4b81      	ldr	r3, [pc, #516]	; (8001f9c <HAL_RCC_OscConfig+0x330>)
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	2380      	movs	r3, #128	; 0x80
 8001d9c:	029b      	lsls	r3, r3, #10
 8001d9e:	4013      	ands	r3, r2
 8001da0:	d1f0      	bne.n	8001d84 <HAL_RCC_OscConfig+0x118>
 8001da2:	e000      	b.n	8001da6 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001da4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	2202      	movs	r2, #2
 8001dac:	4013      	ands	r3, r2
 8001dae:	d100      	bne.n	8001db2 <HAL_RCC_OscConfig+0x146>
 8001db0:	e069      	b.n	8001e86 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001db2:	4b7a      	ldr	r3, [pc, #488]	; (8001f9c <HAL_RCC_OscConfig+0x330>)
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	220c      	movs	r2, #12
 8001db8:	4013      	ands	r3, r2
 8001dba:	d00b      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001dbc:	4b77      	ldr	r3, [pc, #476]	; (8001f9c <HAL_RCC_OscConfig+0x330>)
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	220c      	movs	r2, #12
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	2b08      	cmp	r3, #8
 8001dc6:	d11c      	bne.n	8001e02 <HAL_RCC_OscConfig+0x196>
 8001dc8:	4b74      	ldr	r3, [pc, #464]	; (8001f9c <HAL_RCC_OscConfig+0x330>)
 8001dca:	685a      	ldr	r2, [r3, #4]
 8001dcc:	2380      	movs	r3, #128	; 0x80
 8001dce:	025b      	lsls	r3, r3, #9
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	d116      	bne.n	8001e02 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dd4:	4b71      	ldr	r3, [pc, #452]	; (8001f9c <HAL_RCC_OscConfig+0x330>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2202      	movs	r2, #2
 8001dda:	4013      	ands	r3, r2
 8001ddc:	d005      	beq.n	8001dea <HAL_RCC_OscConfig+0x17e>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d001      	beq.n	8001dea <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e24d      	b.n	8002286 <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dea:	4b6c      	ldr	r3, [pc, #432]	; (8001f9c <HAL_RCC_OscConfig+0x330>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	22f8      	movs	r2, #248	; 0xf8
 8001df0:	4393      	bics	r3, r2
 8001df2:	0019      	movs	r1, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	691b      	ldr	r3, [r3, #16]
 8001df8:	00da      	lsls	r2, r3, #3
 8001dfa:	4b68      	ldr	r3, [pc, #416]	; (8001f9c <HAL_RCC_OscConfig+0x330>)
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e00:	e041      	b.n	8001e86 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d024      	beq.n	8001e54 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e0a:	4b64      	ldr	r3, [pc, #400]	; (8001f9c <HAL_RCC_OscConfig+0x330>)
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	4b63      	ldr	r3, [pc, #396]	; (8001f9c <HAL_RCC_OscConfig+0x330>)
 8001e10:	2101      	movs	r1, #1
 8001e12:	430a      	orrs	r2, r1
 8001e14:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e16:	f7ff faf9 	bl	800140c <HAL_GetTick>
 8001e1a:	0003      	movs	r3, r0
 8001e1c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e1e:	e008      	b.n	8001e32 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e20:	f7ff faf4 	bl	800140c <HAL_GetTick>
 8001e24:	0002      	movs	r2, r0
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e229      	b.n	8002286 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e32:	4b5a      	ldr	r3, [pc, #360]	; (8001f9c <HAL_RCC_OscConfig+0x330>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2202      	movs	r2, #2
 8001e38:	4013      	ands	r3, r2
 8001e3a:	d0f1      	beq.n	8001e20 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e3c:	4b57      	ldr	r3, [pc, #348]	; (8001f9c <HAL_RCC_OscConfig+0x330>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	22f8      	movs	r2, #248	; 0xf8
 8001e42:	4393      	bics	r3, r2
 8001e44:	0019      	movs	r1, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	691b      	ldr	r3, [r3, #16]
 8001e4a:	00da      	lsls	r2, r3, #3
 8001e4c:	4b53      	ldr	r3, [pc, #332]	; (8001f9c <HAL_RCC_OscConfig+0x330>)
 8001e4e:	430a      	orrs	r2, r1
 8001e50:	601a      	str	r2, [r3, #0]
 8001e52:	e018      	b.n	8001e86 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e54:	4b51      	ldr	r3, [pc, #324]	; (8001f9c <HAL_RCC_OscConfig+0x330>)
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	4b50      	ldr	r3, [pc, #320]	; (8001f9c <HAL_RCC_OscConfig+0x330>)
 8001e5a:	2101      	movs	r1, #1
 8001e5c:	438a      	bics	r2, r1
 8001e5e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e60:	f7ff fad4 	bl	800140c <HAL_GetTick>
 8001e64:	0003      	movs	r3, r0
 8001e66:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e68:	e008      	b.n	8001e7c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e6a:	f7ff facf 	bl	800140c <HAL_GetTick>
 8001e6e:	0002      	movs	r2, r0
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d901      	bls.n	8001e7c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e204      	b.n	8002286 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e7c:	4b47      	ldr	r3, [pc, #284]	; (8001f9c <HAL_RCC_OscConfig+0x330>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2202      	movs	r2, #2
 8001e82:	4013      	ands	r3, r2
 8001e84:	d1f1      	bne.n	8001e6a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	2208      	movs	r2, #8
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	d036      	beq.n	8001efe <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	69db      	ldr	r3, [r3, #28]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d019      	beq.n	8001ecc <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e98:	4b40      	ldr	r3, [pc, #256]	; (8001f9c <HAL_RCC_OscConfig+0x330>)
 8001e9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e9c:	4b3f      	ldr	r3, [pc, #252]	; (8001f9c <HAL_RCC_OscConfig+0x330>)
 8001e9e:	2101      	movs	r1, #1
 8001ea0:	430a      	orrs	r2, r1
 8001ea2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ea4:	f7ff fab2 	bl	800140c <HAL_GetTick>
 8001ea8:	0003      	movs	r3, r0
 8001eaa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eac:	e008      	b.n	8001ec0 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001eae:	f7ff faad 	bl	800140c <HAL_GetTick>
 8001eb2:	0002      	movs	r2, r0
 8001eb4:	69bb      	ldr	r3, [r7, #24]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d901      	bls.n	8001ec0 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e1e2      	b.n	8002286 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ec0:	4b36      	ldr	r3, [pc, #216]	; (8001f9c <HAL_RCC_OscConfig+0x330>)
 8001ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec4:	2202      	movs	r2, #2
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	d0f1      	beq.n	8001eae <HAL_RCC_OscConfig+0x242>
 8001eca:	e018      	b.n	8001efe <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ecc:	4b33      	ldr	r3, [pc, #204]	; (8001f9c <HAL_RCC_OscConfig+0x330>)
 8001ece:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ed0:	4b32      	ldr	r3, [pc, #200]	; (8001f9c <HAL_RCC_OscConfig+0x330>)
 8001ed2:	2101      	movs	r1, #1
 8001ed4:	438a      	bics	r2, r1
 8001ed6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ed8:	f7ff fa98 	bl	800140c <HAL_GetTick>
 8001edc:	0003      	movs	r3, r0
 8001ede:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ee0:	e008      	b.n	8001ef4 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ee2:	f7ff fa93 	bl	800140c <HAL_GetTick>
 8001ee6:	0002      	movs	r2, r0
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d901      	bls.n	8001ef4 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e1c8      	b.n	8002286 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ef4:	4b29      	ldr	r3, [pc, #164]	; (8001f9c <HAL_RCC_OscConfig+0x330>)
 8001ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef8:	2202      	movs	r2, #2
 8001efa:	4013      	ands	r3, r2
 8001efc:	d1f1      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2204      	movs	r2, #4
 8001f04:	4013      	ands	r3, r2
 8001f06:	d100      	bne.n	8001f0a <HAL_RCC_OscConfig+0x29e>
 8001f08:	e0b6      	b.n	8002078 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f0a:	231f      	movs	r3, #31
 8001f0c:	18fb      	adds	r3, r7, r3
 8001f0e:	2200      	movs	r2, #0
 8001f10:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f12:	4b22      	ldr	r3, [pc, #136]	; (8001f9c <HAL_RCC_OscConfig+0x330>)
 8001f14:	69da      	ldr	r2, [r3, #28]
 8001f16:	2380      	movs	r3, #128	; 0x80
 8001f18:	055b      	lsls	r3, r3, #21
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	d111      	bne.n	8001f42 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f1e:	4b1f      	ldr	r3, [pc, #124]	; (8001f9c <HAL_RCC_OscConfig+0x330>)
 8001f20:	69da      	ldr	r2, [r3, #28]
 8001f22:	4b1e      	ldr	r3, [pc, #120]	; (8001f9c <HAL_RCC_OscConfig+0x330>)
 8001f24:	2180      	movs	r1, #128	; 0x80
 8001f26:	0549      	lsls	r1, r1, #21
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	61da      	str	r2, [r3, #28]
 8001f2c:	4b1b      	ldr	r3, [pc, #108]	; (8001f9c <HAL_RCC_OscConfig+0x330>)
 8001f2e:	69da      	ldr	r2, [r3, #28]
 8001f30:	2380      	movs	r3, #128	; 0x80
 8001f32:	055b      	lsls	r3, r3, #21
 8001f34:	4013      	ands	r3, r2
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001f3a:	231f      	movs	r3, #31
 8001f3c:	18fb      	adds	r3, r7, r3
 8001f3e:	2201      	movs	r2, #1
 8001f40:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f42:	4b19      	ldr	r3, [pc, #100]	; (8001fa8 <HAL_RCC_OscConfig+0x33c>)
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	2380      	movs	r3, #128	; 0x80
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	d11a      	bne.n	8001f84 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f4e:	4b16      	ldr	r3, [pc, #88]	; (8001fa8 <HAL_RCC_OscConfig+0x33c>)
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	4b15      	ldr	r3, [pc, #84]	; (8001fa8 <HAL_RCC_OscConfig+0x33c>)
 8001f54:	2180      	movs	r1, #128	; 0x80
 8001f56:	0049      	lsls	r1, r1, #1
 8001f58:	430a      	orrs	r2, r1
 8001f5a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f5c:	f7ff fa56 	bl	800140c <HAL_GetTick>
 8001f60:	0003      	movs	r3, r0
 8001f62:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f64:	e008      	b.n	8001f78 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f66:	f7ff fa51 	bl	800140c <HAL_GetTick>
 8001f6a:	0002      	movs	r2, r0
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	2b64      	cmp	r3, #100	; 0x64
 8001f72:	d901      	bls.n	8001f78 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e186      	b.n	8002286 <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f78:	4b0b      	ldr	r3, [pc, #44]	; (8001fa8 <HAL_RCC_OscConfig+0x33c>)
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	2380      	movs	r3, #128	; 0x80
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	4013      	ands	r3, r2
 8001f82:	d0f0      	beq.n	8001f66 <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d10f      	bne.n	8001fac <HAL_RCC_OscConfig+0x340>
 8001f8c:	4b03      	ldr	r3, [pc, #12]	; (8001f9c <HAL_RCC_OscConfig+0x330>)
 8001f8e:	6a1a      	ldr	r2, [r3, #32]
 8001f90:	4b02      	ldr	r3, [pc, #8]	; (8001f9c <HAL_RCC_OscConfig+0x330>)
 8001f92:	2101      	movs	r1, #1
 8001f94:	430a      	orrs	r2, r1
 8001f96:	621a      	str	r2, [r3, #32]
 8001f98:	e036      	b.n	8002008 <HAL_RCC_OscConfig+0x39c>
 8001f9a:	46c0      	nop			; (mov r8, r8)
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	fffeffff 	.word	0xfffeffff
 8001fa4:	fffbffff 	.word	0xfffbffff
 8001fa8:	40007000 	.word	0x40007000
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d10c      	bne.n	8001fce <HAL_RCC_OscConfig+0x362>
 8001fb4:	4bb6      	ldr	r3, [pc, #728]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 8001fb6:	6a1a      	ldr	r2, [r3, #32]
 8001fb8:	4bb5      	ldr	r3, [pc, #724]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 8001fba:	2101      	movs	r1, #1
 8001fbc:	438a      	bics	r2, r1
 8001fbe:	621a      	str	r2, [r3, #32]
 8001fc0:	4bb3      	ldr	r3, [pc, #716]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 8001fc2:	6a1a      	ldr	r2, [r3, #32]
 8001fc4:	4bb2      	ldr	r3, [pc, #712]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 8001fc6:	2104      	movs	r1, #4
 8001fc8:	438a      	bics	r2, r1
 8001fca:	621a      	str	r2, [r3, #32]
 8001fcc:	e01c      	b.n	8002008 <HAL_RCC_OscConfig+0x39c>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	2b05      	cmp	r3, #5
 8001fd4:	d10c      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x384>
 8001fd6:	4bae      	ldr	r3, [pc, #696]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 8001fd8:	6a1a      	ldr	r2, [r3, #32]
 8001fda:	4bad      	ldr	r3, [pc, #692]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 8001fdc:	2104      	movs	r1, #4
 8001fde:	430a      	orrs	r2, r1
 8001fe0:	621a      	str	r2, [r3, #32]
 8001fe2:	4bab      	ldr	r3, [pc, #684]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 8001fe4:	6a1a      	ldr	r2, [r3, #32]
 8001fe6:	4baa      	ldr	r3, [pc, #680]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 8001fe8:	2101      	movs	r1, #1
 8001fea:	430a      	orrs	r2, r1
 8001fec:	621a      	str	r2, [r3, #32]
 8001fee:	e00b      	b.n	8002008 <HAL_RCC_OscConfig+0x39c>
 8001ff0:	4ba7      	ldr	r3, [pc, #668]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 8001ff2:	6a1a      	ldr	r2, [r3, #32]
 8001ff4:	4ba6      	ldr	r3, [pc, #664]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 8001ff6:	2101      	movs	r1, #1
 8001ff8:	438a      	bics	r2, r1
 8001ffa:	621a      	str	r2, [r3, #32]
 8001ffc:	4ba4      	ldr	r3, [pc, #656]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 8001ffe:	6a1a      	ldr	r2, [r3, #32]
 8002000:	4ba3      	ldr	r3, [pc, #652]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 8002002:	2104      	movs	r1, #4
 8002004:	438a      	bics	r2, r1
 8002006:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d014      	beq.n	800203a <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002010:	f7ff f9fc 	bl	800140c <HAL_GetTick>
 8002014:	0003      	movs	r3, r0
 8002016:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002018:	e009      	b.n	800202e <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800201a:	f7ff f9f7 	bl	800140c <HAL_GetTick>
 800201e:	0002      	movs	r2, r0
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	4a9b      	ldr	r2, [pc, #620]	; (8002294 <HAL_RCC_OscConfig+0x628>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d901      	bls.n	800202e <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e12b      	b.n	8002286 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800202e:	4b98      	ldr	r3, [pc, #608]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 8002030:	6a1b      	ldr	r3, [r3, #32]
 8002032:	2202      	movs	r2, #2
 8002034:	4013      	ands	r3, r2
 8002036:	d0f0      	beq.n	800201a <HAL_RCC_OscConfig+0x3ae>
 8002038:	e013      	b.n	8002062 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800203a:	f7ff f9e7 	bl	800140c <HAL_GetTick>
 800203e:	0003      	movs	r3, r0
 8002040:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002042:	e009      	b.n	8002058 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002044:	f7ff f9e2 	bl	800140c <HAL_GetTick>
 8002048:	0002      	movs	r2, r0
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	4a91      	ldr	r2, [pc, #580]	; (8002294 <HAL_RCC_OscConfig+0x628>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d901      	bls.n	8002058 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e116      	b.n	8002286 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002058:	4b8d      	ldr	r3, [pc, #564]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 800205a:	6a1b      	ldr	r3, [r3, #32]
 800205c:	2202      	movs	r2, #2
 800205e:	4013      	ands	r3, r2
 8002060:	d1f0      	bne.n	8002044 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002062:	231f      	movs	r3, #31
 8002064:	18fb      	adds	r3, r7, r3
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	2b01      	cmp	r3, #1
 800206a:	d105      	bne.n	8002078 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800206c:	4b88      	ldr	r3, [pc, #544]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 800206e:	69da      	ldr	r2, [r3, #28]
 8002070:	4b87      	ldr	r3, [pc, #540]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 8002072:	4989      	ldr	r1, [pc, #548]	; (8002298 <HAL_RCC_OscConfig+0x62c>)
 8002074:	400a      	ands	r2, r1
 8002076:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2210      	movs	r2, #16
 800207e:	4013      	ands	r3, r2
 8002080:	d063      	beq.n	800214a <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	695b      	ldr	r3, [r3, #20]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d12a      	bne.n	80020e0 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800208a:	4b81      	ldr	r3, [pc, #516]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 800208c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800208e:	4b80      	ldr	r3, [pc, #512]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 8002090:	2104      	movs	r1, #4
 8002092:	430a      	orrs	r2, r1
 8002094:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002096:	4b7e      	ldr	r3, [pc, #504]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 8002098:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800209a:	4b7d      	ldr	r3, [pc, #500]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 800209c:	2101      	movs	r1, #1
 800209e:	430a      	orrs	r2, r1
 80020a0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020a2:	f7ff f9b3 	bl	800140c <HAL_GetTick>
 80020a6:	0003      	movs	r3, r0
 80020a8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80020aa:	e008      	b.n	80020be <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80020ac:	f7ff f9ae 	bl	800140c <HAL_GetTick>
 80020b0:	0002      	movs	r2, r0
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d901      	bls.n	80020be <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e0e3      	b.n	8002286 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80020be:	4b74      	ldr	r3, [pc, #464]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 80020c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020c2:	2202      	movs	r2, #2
 80020c4:	4013      	ands	r3, r2
 80020c6:	d0f1      	beq.n	80020ac <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80020c8:	4b71      	ldr	r3, [pc, #452]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 80020ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020cc:	22f8      	movs	r2, #248	; 0xf8
 80020ce:	4393      	bics	r3, r2
 80020d0:	0019      	movs	r1, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	699b      	ldr	r3, [r3, #24]
 80020d6:	00da      	lsls	r2, r3, #3
 80020d8:	4b6d      	ldr	r3, [pc, #436]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 80020da:	430a      	orrs	r2, r1
 80020dc:	635a      	str	r2, [r3, #52]	; 0x34
 80020de:	e034      	b.n	800214a <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	695b      	ldr	r3, [r3, #20]
 80020e4:	3305      	adds	r3, #5
 80020e6:	d111      	bne.n	800210c <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80020e8:	4b69      	ldr	r3, [pc, #420]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 80020ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020ec:	4b68      	ldr	r3, [pc, #416]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 80020ee:	2104      	movs	r1, #4
 80020f0:	438a      	bics	r2, r1
 80020f2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80020f4:	4b66      	ldr	r3, [pc, #408]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 80020f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020f8:	22f8      	movs	r2, #248	; 0xf8
 80020fa:	4393      	bics	r3, r2
 80020fc:	0019      	movs	r1, r3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	699b      	ldr	r3, [r3, #24]
 8002102:	00da      	lsls	r2, r3, #3
 8002104:	4b62      	ldr	r3, [pc, #392]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 8002106:	430a      	orrs	r2, r1
 8002108:	635a      	str	r2, [r3, #52]	; 0x34
 800210a:	e01e      	b.n	800214a <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800210c:	4b60      	ldr	r3, [pc, #384]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 800210e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002110:	4b5f      	ldr	r3, [pc, #380]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 8002112:	2104      	movs	r1, #4
 8002114:	430a      	orrs	r2, r1
 8002116:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002118:	4b5d      	ldr	r3, [pc, #372]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 800211a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800211c:	4b5c      	ldr	r3, [pc, #368]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 800211e:	2101      	movs	r1, #1
 8002120:	438a      	bics	r2, r1
 8002122:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002124:	f7ff f972 	bl	800140c <HAL_GetTick>
 8002128:	0003      	movs	r3, r0
 800212a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800212c:	e008      	b.n	8002140 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800212e:	f7ff f96d 	bl	800140c <HAL_GetTick>
 8002132:	0002      	movs	r2, r0
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	2b02      	cmp	r3, #2
 800213a:	d901      	bls.n	8002140 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e0a2      	b.n	8002286 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002140:	4b53      	ldr	r3, [pc, #332]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 8002142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002144:	2202      	movs	r2, #2
 8002146:	4013      	ands	r3, r2
 8002148:	d1f1      	bne.n	800212e <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6a1b      	ldr	r3, [r3, #32]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d100      	bne.n	8002154 <HAL_RCC_OscConfig+0x4e8>
 8002152:	e097      	b.n	8002284 <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002154:	4b4e      	ldr	r3, [pc, #312]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	220c      	movs	r2, #12
 800215a:	4013      	ands	r3, r2
 800215c:	2b08      	cmp	r3, #8
 800215e:	d100      	bne.n	8002162 <HAL_RCC_OscConfig+0x4f6>
 8002160:	e06b      	b.n	800223a <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6a1b      	ldr	r3, [r3, #32]
 8002166:	2b02      	cmp	r3, #2
 8002168:	d14c      	bne.n	8002204 <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800216a:	4b49      	ldr	r3, [pc, #292]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	4b48      	ldr	r3, [pc, #288]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 8002170:	494a      	ldr	r1, [pc, #296]	; (800229c <HAL_RCC_OscConfig+0x630>)
 8002172:	400a      	ands	r2, r1
 8002174:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002176:	f7ff f949 	bl	800140c <HAL_GetTick>
 800217a:	0003      	movs	r3, r0
 800217c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800217e:	e008      	b.n	8002192 <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002180:	f7ff f944 	bl	800140c <HAL_GetTick>
 8002184:	0002      	movs	r2, r0
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	2b02      	cmp	r3, #2
 800218c:	d901      	bls.n	8002192 <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e079      	b.n	8002286 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002192:	4b3f      	ldr	r3, [pc, #252]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	2380      	movs	r3, #128	; 0x80
 8002198:	049b      	lsls	r3, r3, #18
 800219a:	4013      	ands	r3, r2
 800219c:	d1f0      	bne.n	8002180 <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800219e:	4b3c      	ldr	r3, [pc, #240]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 80021a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a2:	220f      	movs	r2, #15
 80021a4:	4393      	bics	r3, r2
 80021a6:	0019      	movs	r1, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021ac:	4b38      	ldr	r3, [pc, #224]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 80021ae:	430a      	orrs	r2, r1
 80021b0:	62da      	str	r2, [r3, #44]	; 0x2c
 80021b2:	4b37      	ldr	r3, [pc, #220]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	4a3a      	ldr	r2, [pc, #232]	; (80022a0 <HAL_RCC_OscConfig+0x634>)
 80021b8:	4013      	ands	r3, r2
 80021ba:	0019      	movs	r1, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c4:	431a      	orrs	r2, r3
 80021c6:	4b32      	ldr	r3, [pc, #200]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 80021c8:	430a      	orrs	r2, r1
 80021ca:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021cc:	4b30      	ldr	r3, [pc, #192]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	4b2f      	ldr	r3, [pc, #188]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 80021d2:	2180      	movs	r1, #128	; 0x80
 80021d4:	0449      	lsls	r1, r1, #17
 80021d6:	430a      	orrs	r2, r1
 80021d8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021da:	f7ff f917 	bl	800140c <HAL_GetTick>
 80021de:	0003      	movs	r3, r0
 80021e0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021e2:	e008      	b.n	80021f6 <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021e4:	f7ff f912 	bl	800140c <HAL_GetTick>
 80021e8:	0002      	movs	r2, r0
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e047      	b.n	8002286 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021f6:	4b26      	ldr	r3, [pc, #152]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	2380      	movs	r3, #128	; 0x80
 80021fc:	049b      	lsls	r3, r3, #18
 80021fe:	4013      	ands	r3, r2
 8002200:	d0f0      	beq.n	80021e4 <HAL_RCC_OscConfig+0x578>
 8002202:	e03f      	b.n	8002284 <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002204:	4b22      	ldr	r3, [pc, #136]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	4b21      	ldr	r3, [pc, #132]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 800220a:	4924      	ldr	r1, [pc, #144]	; (800229c <HAL_RCC_OscConfig+0x630>)
 800220c:	400a      	ands	r2, r1
 800220e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002210:	f7ff f8fc 	bl	800140c <HAL_GetTick>
 8002214:	0003      	movs	r3, r0
 8002216:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002218:	e008      	b.n	800222c <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800221a:	f7ff f8f7 	bl	800140c <HAL_GetTick>
 800221e:	0002      	movs	r2, r0
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	2b02      	cmp	r3, #2
 8002226:	d901      	bls.n	800222c <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e02c      	b.n	8002286 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800222c:	4b18      	ldr	r3, [pc, #96]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	2380      	movs	r3, #128	; 0x80
 8002232:	049b      	lsls	r3, r3, #18
 8002234:	4013      	ands	r3, r2
 8002236:	d1f0      	bne.n	800221a <HAL_RCC_OscConfig+0x5ae>
 8002238:	e024      	b.n	8002284 <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a1b      	ldr	r3, [r3, #32]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d101      	bne.n	8002246 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e01f      	b.n	8002286 <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002246:	4b12      	ldr	r3, [pc, #72]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800224c:	4b10      	ldr	r3, [pc, #64]	; (8002290 <HAL_RCC_OscConfig+0x624>)
 800224e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002250:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002252:	697a      	ldr	r2, [r7, #20]
 8002254:	2380      	movs	r3, #128	; 0x80
 8002256:	025b      	lsls	r3, r3, #9
 8002258:	401a      	ands	r2, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225e:	429a      	cmp	r2, r3
 8002260:	d10e      	bne.n	8002280 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	220f      	movs	r2, #15
 8002266:	401a      	ands	r2, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800226c:	429a      	cmp	r2, r3
 800226e:	d107      	bne.n	8002280 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002270:	697a      	ldr	r2, [r7, #20]
 8002272:	23f0      	movs	r3, #240	; 0xf0
 8002274:	039b      	lsls	r3, r3, #14
 8002276:	401a      	ands	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800227c:	429a      	cmp	r2, r3
 800227e:	d001      	beq.n	8002284 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e000      	b.n	8002286 <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 8002284:	2300      	movs	r3, #0
}
 8002286:	0018      	movs	r0, r3
 8002288:	46bd      	mov	sp, r7
 800228a:	b008      	add	sp, #32
 800228c:	bd80      	pop	{r7, pc}
 800228e:	46c0      	nop			; (mov r8, r8)
 8002290:	40021000 	.word	0x40021000
 8002294:	00001388 	.word	0x00001388
 8002298:	efffffff 	.word	0xefffffff
 800229c:	feffffff 	.word	0xfeffffff
 80022a0:	ffc2ffff 	.word	0xffc2ffff

080022a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d101      	bne.n	80022b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e0b3      	b.n	8002420 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022b8:	4b5b      	ldr	r3, [pc, #364]	; (8002428 <HAL_RCC_ClockConfig+0x184>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2201      	movs	r2, #1
 80022be:	4013      	ands	r3, r2
 80022c0:	683a      	ldr	r2, [r7, #0]
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d911      	bls.n	80022ea <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022c6:	4b58      	ldr	r3, [pc, #352]	; (8002428 <HAL_RCC_ClockConfig+0x184>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2201      	movs	r2, #1
 80022cc:	4393      	bics	r3, r2
 80022ce:	0019      	movs	r1, r3
 80022d0:	4b55      	ldr	r3, [pc, #340]	; (8002428 <HAL_RCC_ClockConfig+0x184>)
 80022d2:	683a      	ldr	r2, [r7, #0]
 80022d4:	430a      	orrs	r2, r1
 80022d6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022d8:	4b53      	ldr	r3, [pc, #332]	; (8002428 <HAL_RCC_ClockConfig+0x184>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2201      	movs	r2, #1
 80022de:	4013      	ands	r3, r2
 80022e0:	683a      	ldr	r2, [r7, #0]
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d001      	beq.n	80022ea <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e09a      	b.n	8002420 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2202      	movs	r2, #2
 80022f0:	4013      	ands	r3, r2
 80022f2:	d015      	beq.n	8002320 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2204      	movs	r2, #4
 80022fa:	4013      	ands	r3, r2
 80022fc:	d006      	beq.n	800230c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80022fe:	4b4b      	ldr	r3, [pc, #300]	; (800242c <HAL_RCC_ClockConfig+0x188>)
 8002300:	685a      	ldr	r2, [r3, #4]
 8002302:	4b4a      	ldr	r3, [pc, #296]	; (800242c <HAL_RCC_ClockConfig+0x188>)
 8002304:	21e0      	movs	r1, #224	; 0xe0
 8002306:	00c9      	lsls	r1, r1, #3
 8002308:	430a      	orrs	r2, r1
 800230a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800230c:	4b47      	ldr	r3, [pc, #284]	; (800242c <HAL_RCC_ClockConfig+0x188>)
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	22f0      	movs	r2, #240	; 0xf0
 8002312:	4393      	bics	r3, r2
 8002314:	0019      	movs	r1, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	689a      	ldr	r2, [r3, #8]
 800231a:	4b44      	ldr	r3, [pc, #272]	; (800242c <HAL_RCC_ClockConfig+0x188>)
 800231c:	430a      	orrs	r2, r1
 800231e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2201      	movs	r2, #1
 8002326:	4013      	ands	r3, r2
 8002328:	d040      	beq.n	80023ac <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	2b01      	cmp	r3, #1
 8002330:	d107      	bne.n	8002342 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002332:	4b3e      	ldr	r3, [pc, #248]	; (800242c <HAL_RCC_ClockConfig+0x188>)
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	2380      	movs	r3, #128	; 0x80
 8002338:	029b      	lsls	r3, r3, #10
 800233a:	4013      	ands	r3, r2
 800233c:	d114      	bne.n	8002368 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e06e      	b.n	8002420 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	2b02      	cmp	r3, #2
 8002348:	d107      	bne.n	800235a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800234a:	4b38      	ldr	r3, [pc, #224]	; (800242c <HAL_RCC_ClockConfig+0x188>)
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	2380      	movs	r3, #128	; 0x80
 8002350:	049b      	lsls	r3, r3, #18
 8002352:	4013      	ands	r3, r2
 8002354:	d108      	bne.n	8002368 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e062      	b.n	8002420 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800235a:	4b34      	ldr	r3, [pc, #208]	; (800242c <HAL_RCC_ClockConfig+0x188>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2202      	movs	r2, #2
 8002360:	4013      	ands	r3, r2
 8002362:	d101      	bne.n	8002368 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e05b      	b.n	8002420 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002368:	4b30      	ldr	r3, [pc, #192]	; (800242c <HAL_RCC_ClockConfig+0x188>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	2203      	movs	r2, #3
 800236e:	4393      	bics	r3, r2
 8002370:	0019      	movs	r1, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685a      	ldr	r2, [r3, #4]
 8002376:	4b2d      	ldr	r3, [pc, #180]	; (800242c <HAL_RCC_ClockConfig+0x188>)
 8002378:	430a      	orrs	r2, r1
 800237a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800237c:	f7ff f846 	bl	800140c <HAL_GetTick>
 8002380:	0003      	movs	r3, r0
 8002382:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002384:	e009      	b.n	800239a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002386:	f7ff f841 	bl	800140c <HAL_GetTick>
 800238a:	0002      	movs	r2, r0
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	4a27      	ldr	r2, [pc, #156]	; (8002430 <HAL_RCC_ClockConfig+0x18c>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d901      	bls.n	800239a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e042      	b.n	8002420 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800239a:	4b24      	ldr	r3, [pc, #144]	; (800242c <HAL_RCC_ClockConfig+0x188>)
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	220c      	movs	r2, #12
 80023a0:	401a      	ands	r2, r3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d1ec      	bne.n	8002386 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023ac:	4b1e      	ldr	r3, [pc, #120]	; (8002428 <HAL_RCC_ClockConfig+0x184>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2201      	movs	r2, #1
 80023b2:	4013      	ands	r3, r2
 80023b4:	683a      	ldr	r2, [r7, #0]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d211      	bcs.n	80023de <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ba:	4b1b      	ldr	r3, [pc, #108]	; (8002428 <HAL_RCC_ClockConfig+0x184>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2201      	movs	r2, #1
 80023c0:	4393      	bics	r3, r2
 80023c2:	0019      	movs	r1, r3
 80023c4:	4b18      	ldr	r3, [pc, #96]	; (8002428 <HAL_RCC_ClockConfig+0x184>)
 80023c6:	683a      	ldr	r2, [r7, #0]
 80023c8:	430a      	orrs	r2, r1
 80023ca:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023cc:	4b16      	ldr	r3, [pc, #88]	; (8002428 <HAL_RCC_ClockConfig+0x184>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2201      	movs	r2, #1
 80023d2:	4013      	ands	r3, r2
 80023d4:	683a      	ldr	r2, [r7, #0]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d001      	beq.n	80023de <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e020      	b.n	8002420 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2204      	movs	r2, #4
 80023e4:	4013      	ands	r3, r2
 80023e6:	d009      	beq.n	80023fc <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80023e8:	4b10      	ldr	r3, [pc, #64]	; (800242c <HAL_RCC_ClockConfig+0x188>)
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	4a11      	ldr	r2, [pc, #68]	; (8002434 <HAL_RCC_ClockConfig+0x190>)
 80023ee:	4013      	ands	r3, r2
 80023f0:	0019      	movs	r1, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	68da      	ldr	r2, [r3, #12]
 80023f6:	4b0d      	ldr	r3, [pc, #52]	; (800242c <HAL_RCC_ClockConfig+0x188>)
 80023f8:	430a      	orrs	r2, r1
 80023fa:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80023fc:	f000 f820 	bl	8002440 <HAL_RCC_GetSysClockFreq>
 8002400:	0001      	movs	r1, r0
 8002402:	4b0a      	ldr	r3, [pc, #40]	; (800242c <HAL_RCC_ClockConfig+0x188>)
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	091b      	lsrs	r3, r3, #4
 8002408:	220f      	movs	r2, #15
 800240a:	4013      	ands	r3, r2
 800240c:	4a0a      	ldr	r2, [pc, #40]	; (8002438 <HAL_RCC_ClockConfig+0x194>)
 800240e:	5cd3      	ldrb	r3, [r2, r3]
 8002410:	000a      	movs	r2, r1
 8002412:	40da      	lsrs	r2, r3
 8002414:	4b09      	ldr	r3, [pc, #36]	; (800243c <HAL_RCC_ClockConfig+0x198>)
 8002416:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002418:	2000      	movs	r0, #0
 800241a:	f7fe ffb1 	bl	8001380 <HAL_InitTick>
  
  return HAL_OK;
 800241e:	2300      	movs	r3, #0
}
 8002420:	0018      	movs	r0, r3
 8002422:	46bd      	mov	sp, r7
 8002424:	b004      	add	sp, #16
 8002426:	bd80      	pop	{r7, pc}
 8002428:	40022000 	.word	0x40022000
 800242c:	40021000 	.word	0x40021000
 8002430:	00001388 	.word	0x00001388
 8002434:	fffff8ff 	.word	0xfffff8ff
 8002438:	08004a74 	.word	0x08004a74
 800243c:	2000021c 	.word	0x2000021c

08002440 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002440:	b590      	push	{r4, r7, lr}
 8002442:	b08f      	sub	sp, #60	; 0x3c
 8002444:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002446:	2314      	movs	r3, #20
 8002448:	18fb      	adds	r3, r7, r3
 800244a:	4a2b      	ldr	r2, [pc, #172]	; (80024f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800244c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800244e:	c313      	stmia	r3!, {r0, r1, r4}
 8002450:	6812      	ldr	r2, [r2, #0]
 8002452:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002454:	1d3b      	adds	r3, r7, #4
 8002456:	4a29      	ldr	r2, [pc, #164]	; (80024fc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002458:	ca13      	ldmia	r2!, {r0, r1, r4}
 800245a:	c313      	stmia	r3!, {r0, r1, r4}
 800245c:	6812      	ldr	r2, [r2, #0]
 800245e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002460:	2300      	movs	r3, #0
 8002462:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002464:	2300      	movs	r3, #0
 8002466:	62bb      	str	r3, [r7, #40]	; 0x28
 8002468:	2300      	movs	r3, #0
 800246a:	637b      	str	r3, [r7, #52]	; 0x34
 800246c:	2300      	movs	r3, #0
 800246e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002470:	2300      	movs	r3, #0
 8002472:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002474:	4b22      	ldr	r3, [pc, #136]	; (8002500 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800247a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800247c:	220c      	movs	r2, #12
 800247e:	4013      	ands	r3, r2
 8002480:	2b04      	cmp	r3, #4
 8002482:	d002      	beq.n	800248a <HAL_RCC_GetSysClockFreq+0x4a>
 8002484:	2b08      	cmp	r3, #8
 8002486:	d003      	beq.n	8002490 <HAL_RCC_GetSysClockFreq+0x50>
 8002488:	e02d      	b.n	80024e6 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800248a:	4b1e      	ldr	r3, [pc, #120]	; (8002504 <HAL_RCC_GetSysClockFreq+0xc4>)
 800248c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800248e:	e02d      	b.n	80024ec <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002492:	0c9b      	lsrs	r3, r3, #18
 8002494:	220f      	movs	r2, #15
 8002496:	4013      	ands	r3, r2
 8002498:	2214      	movs	r2, #20
 800249a:	18ba      	adds	r2, r7, r2
 800249c:	5cd3      	ldrb	r3, [r2, r3]
 800249e:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80024a0:	4b17      	ldr	r3, [pc, #92]	; (8002500 <HAL_RCC_GetSysClockFreq+0xc0>)
 80024a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a4:	220f      	movs	r2, #15
 80024a6:	4013      	ands	r3, r2
 80024a8:	1d3a      	adds	r2, r7, #4
 80024aa:	5cd3      	ldrb	r3, [r2, r3]
 80024ac:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80024ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024b0:	2380      	movs	r3, #128	; 0x80
 80024b2:	025b      	lsls	r3, r3, #9
 80024b4:	4013      	ands	r3, r2
 80024b6:	d009      	beq.n	80024cc <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80024b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80024ba:	4812      	ldr	r0, [pc, #72]	; (8002504 <HAL_RCC_GetSysClockFreq+0xc4>)
 80024bc:	f7fd fe24 	bl	8000108 <__udivsi3>
 80024c0:	0003      	movs	r3, r0
 80024c2:	001a      	movs	r2, r3
 80024c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c6:	4353      	muls	r3, r2
 80024c8:	637b      	str	r3, [r7, #52]	; 0x34
 80024ca:	e009      	b.n	80024e0 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80024cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024ce:	000a      	movs	r2, r1
 80024d0:	0152      	lsls	r2, r2, #5
 80024d2:	1a52      	subs	r2, r2, r1
 80024d4:	0193      	lsls	r3, r2, #6
 80024d6:	1a9b      	subs	r3, r3, r2
 80024d8:	00db      	lsls	r3, r3, #3
 80024da:	185b      	adds	r3, r3, r1
 80024dc:	021b      	lsls	r3, r3, #8
 80024de:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80024e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024e2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80024e4:	e002      	b.n	80024ec <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80024e6:	4b07      	ldr	r3, [pc, #28]	; (8002504 <HAL_RCC_GetSysClockFreq+0xc4>)
 80024e8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80024ea:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80024ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80024ee:	0018      	movs	r0, r3
 80024f0:	46bd      	mov	sp, r7
 80024f2:	b00f      	add	sp, #60	; 0x3c
 80024f4:	bd90      	pop	{r4, r7, pc}
 80024f6:	46c0      	nop			; (mov r8, r8)
 80024f8:	08004a40 	.word	0x08004a40
 80024fc:	08004a50 	.word	0x08004a50
 8002500:	40021000 	.word	0x40021000
 8002504:	007a1200 	.word	0x007a1200

08002508 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800250c:	4b02      	ldr	r3, [pc, #8]	; (8002518 <HAL_RCC_GetHCLKFreq+0x10>)
 800250e:	681b      	ldr	r3, [r3, #0]
}
 8002510:	0018      	movs	r0, r3
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	46c0      	nop			; (mov r8, r8)
 8002518:	2000021c 	.word	0x2000021c

0800251c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002520:	f7ff fff2 	bl	8002508 <HAL_RCC_GetHCLKFreq>
 8002524:	0001      	movs	r1, r0
 8002526:	4b06      	ldr	r3, [pc, #24]	; (8002540 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	0a1b      	lsrs	r3, r3, #8
 800252c:	2207      	movs	r2, #7
 800252e:	4013      	ands	r3, r2
 8002530:	4a04      	ldr	r2, [pc, #16]	; (8002544 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002532:	5cd3      	ldrb	r3, [r2, r3]
 8002534:	40d9      	lsrs	r1, r3
 8002536:	000b      	movs	r3, r1
}    
 8002538:	0018      	movs	r0, r3
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	46c0      	nop			; (mov r8, r8)
 8002540:	40021000 	.word	0x40021000
 8002544:	08004a84 	.word	0x08004a84

08002548 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b086      	sub	sp, #24
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002550:	2300      	movs	r3, #0
 8002552:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002554:	2300      	movs	r3, #0
 8002556:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	2380      	movs	r3, #128	; 0x80
 800255e:	025b      	lsls	r3, r3, #9
 8002560:	4013      	ands	r3, r2
 8002562:	d100      	bne.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002564:	e08f      	b.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002566:	2317      	movs	r3, #23
 8002568:	18fb      	adds	r3, r7, r3
 800256a:	2200      	movs	r2, #0
 800256c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800256e:	4b57      	ldr	r3, [pc, #348]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002570:	69da      	ldr	r2, [r3, #28]
 8002572:	2380      	movs	r3, #128	; 0x80
 8002574:	055b      	lsls	r3, r3, #21
 8002576:	4013      	ands	r3, r2
 8002578:	d111      	bne.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800257a:	4b54      	ldr	r3, [pc, #336]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800257c:	69da      	ldr	r2, [r3, #28]
 800257e:	4b53      	ldr	r3, [pc, #332]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002580:	2180      	movs	r1, #128	; 0x80
 8002582:	0549      	lsls	r1, r1, #21
 8002584:	430a      	orrs	r2, r1
 8002586:	61da      	str	r2, [r3, #28]
 8002588:	4b50      	ldr	r3, [pc, #320]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800258a:	69da      	ldr	r2, [r3, #28]
 800258c:	2380      	movs	r3, #128	; 0x80
 800258e:	055b      	lsls	r3, r3, #21
 8002590:	4013      	ands	r3, r2
 8002592:	60bb      	str	r3, [r7, #8]
 8002594:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002596:	2317      	movs	r3, #23
 8002598:	18fb      	adds	r3, r7, r3
 800259a:	2201      	movs	r2, #1
 800259c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800259e:	4b4c      	ldr	r3, [pc, #304]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	2380      	movs	r3, #128	; 0x80
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	4013      	ands	r3, r2
 80025a8:	d11a      	bne.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025aa:	4b49      	ldr	r3, [pc, #292]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	4b48      	ldr	r3, [pc, #288]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80025b0:	2180      	movs	r1, #128	; 0x80
 80025b2:	0049      	lsls	r1, r1, #1
 80025b4:	430a      	orrs	r2, r1
 80025b6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025b8:	f7fe ff28 	bl	800140c <HAL_GetTick>
 80025bc:	0003      	movs	r3, r0
 80025be:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c0:	e008      	b.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025c2:	f7fe ff23 	bl	800140c <HAL_GetTick>
 80025c6:	0002      	movs	r2, r0
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	2b64      	cmp	r3, #100	; 0x64
 80025ce:	d901      	bls.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	e077      	b.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025d4:	4b3e      	ldr	r3, [pc, #248]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	2380      	movs	r3, #128	; 0x80
 80025da:	005b      	lsls	r3, r3, #1
 80025dc:	4013      	ands	r3, r2
 80025de:	d0f0      	beq.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80025e0:	4b3a      	ldr	r3, [pc, #232]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80025e2:	6a1a      	ldr	r2, [r3, #32]
 80025e4:	23c0      	movs	r3, #192	; 0xc0
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	4013      	ands	r3, r2
 80025ea:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d034      	beq.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x114>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685a      	ldr	r2, [r3, #4]
 80025f6:	23c0      	movs	r3, #192	; 0xc0
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	4013      	ands	r3, r2
 80025fc:	68fa      	ldr	r2, [r7, #12]
 80025fe:	429a      	cmp	r2, r3
 8002600:	d02c      	beq.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002602:	4b32      	ldr	r3, [pc, #200]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002604:	6a1b      	ldr	r3, [r3, #32]
 8002606:	4a33      	ldr	r2, [pc, #204]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002608:	4013      	ands	r3, r2
 800260a:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800260c:	4b2f      	ldr	r3, [pc, #188]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800260e:	6a1a      	ldr	r2, [r3, #32]
 8002610:	4b2e      	ldr	r3, [pc, #184]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002612:	2180      	movs	r1, #128	; 0x80
 8002614:	0249      	lsls	r1, r1, #9
 8002616:	430a      	orrs	r2, r1
 8002618:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800261a:	4b2c      	ldr	r3, [pc, #176]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800261c:	6a1a      	ldr	r2, [r3, #32]
 800261e:	4b2b      	ldr	r3, [pc, #172]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002620:	492d      	ldr	r1, [pc, #180]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002622:	400a      	ands	r2, r1
 8002624:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002626:	4b29      	ldr	r3, [pc, #164]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002628:	68fa      	ldr	r2, [r7, #12]
 800262a:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2201      	movs	r2, #1
 8002630:	4013      	ands	r3, r2
 8002632:	d013      	beq.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002634:	f7fe feea 	bl	800140c <HAL_GetTick>
 8002638:	0003      	movs	r3, r0
 800263a:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800263c:	e009      	b.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800263e:	f7fe fee5 	bl	800140c <HAL_GetTick>
 8002642:	0002      	movs	r2, r0
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	4a24      	ldr	r2, [pc, #144]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x194>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d901      	bls.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e038      	b.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002652:	4b1e      	ldr	r3, [pc, #120]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002654:	6a1b      	ldr	r3, [r3, #32]
 8002656:	2202      	movs	r2, #2
 8002658:	4013      	ands	r3, r2
 800265a:	d0f0      	beq.n	800263e <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800265c:	4b1b      	ldr	r3, [pc, #108]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800265e:	6a1b      	ldr	r3, [r3, #32]
 8002660:	4a1c      	ldr	r2, [pc, #112]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002662:	4013      	ands	r3, r2
 8002664:	0019      	movs	r1, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685a      	ldr	r2, [r3, #4]
 800266a:	4b18      	ldr	r3, [pc, #96]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800266c:	430a      	orrs	r2, r1
 800266e:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002670:	2317      	movs	r3, #23
 8002672:	18fb      	adds	r3, r7, r3
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	2b01      	cmp	r3, #1
 8002678:	d105      	bne.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800267a:	4b14      	ldr	r3, [pc, #80]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800267c:	69da      	ldr	r2, [r3, #28]
 800267e:	4b13      	ldr	r3, [pc, #76]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002680:	4917      	ldr	r1, [pc, #92]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8002682:	400a      	ands	r2, r1
 8002684:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	2201      	movs	r2, #1
 800268c:	4013      	ands	r3, r2
 800268e:	d009      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002690:	4b0e      	ldr	r3, [pc, #56]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002694:	2203      	movs	r2, #3
 8002696:	4393      	bics	r3, r2
 8002698:	0019      	movs	r1, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	689a      	ldr	r2, [r3, #8]
 800269e:	4b0b      	ldr	r3, [pc, #44]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80026a0:	430a      	orrs	r2, r1
 80026a2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2220      	movs	r2, #32
 80026aa:	4013      	ands	r3, r2
 80026ac:	d009      	beq.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026ae:	4b07      	ldr	r3, [pc, #28]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80026b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b2:	2210      	movs	r2, #16
 80026b4:	4393      	bics	r3, r2
 80026b6:	0019      	movs	r1, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	68da      	ldr	r2, [r3, #12]
 80026bc:	4b03      	ldr	r3, [pc, #12]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80026be:	430a      	orrs	r2, r1
 80026c0:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80026c2:	2300      	movs	r3, #0
}
 80026c4:	0018      	movs	r0, r3
 80026c6:	46bd      	mov	sp, r7
 80026c8:	b006      	add	sp, #24
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	40021000 	.word	0x40021000
 80026d0:	40007000 	.word	0x40007000
 80026d4:	fffffcff 	.word	0xfffffcff
 80026d8:	fffeffff 	.word	0xfffeffff
 80026dc:	00001388 	.word	0x00001388
 80026e0:	efffffff 	.word	0xefffffff

080026e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d101      	bne.n	80026f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e0a8      	b.n	8002848 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d109      	bne.n	8002712 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685a      	ldr	r2, [r3, #4]
 8002702:	2382      	movs	r3, #130	; 0x82
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	429a      	cmp	r2, r3
 8002708:	d009      	beq.n	800271e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	61da      	str	r2, [r3, #28]
 8002710:	e005      	b.n	800271e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	225d      	movs	r2, #93	; 0x5d
 8002728:	5c9b      	ldrb	r3, [r3, r2]
 800272a:	b2db      	uxtb	r3, r3
 800272c:	2b00      	cmp	r3, #0
 800272e:	d107      	bne.n	8002740 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	225c      	movs	r2, #92	; 0x5c
 8002734:	2100      	movs	r1, #0
 8002736:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	0018      	movs	r0, r3
 800273c:	f7fe fbf6 	bl	8000f2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	225d      	movs	r2, #93	; 0x5d
 8002744:	2102      	movs	r1, #2
 8002746:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2140      	movs	r1, #64	; 0x40
 8002754:	438a      	bics	r2, r1
 8002756:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	68da      	ldr	r2, [r3, #12]
 800275c:	23e0      	movs	r3, #224	; 0xe0
 800275e:	00db      	lsls	r3, r3, #3
 8002760:	429a      	cmp	r2, r3
 8002762:	d902      	bls.n	800276a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002764:	2300      	movs	r3, #0
 8002766:	60fb      	str	r3, [r7, #12]
 8002768:	e002      	b.n	8002770 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800276a:	2380      	movs	r3, #128	; 0x80
 800276c:	015b      	lsls	r3, r3, #5
 800276e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	68da      	ldr	r2, [r3, #12]
 8002774:	23f0      	movs	r3, #240	; 0xf0
 8002776:	011b      	lsls	r3, r3, #4
 8002778:	429a      	cmp	r2, r3
 800277a:	d008      	beq.n	800278e <HAL_SPI_Init+0xaa>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	68da      	ldr	r2, [r3, #12]
 8002780:	23e0      	movs	r3, #224	; 0xe0
 8002782:	00db      	lsls	r3, r3, #3
 8002784:	429a      	cmp	r2, r3
 8002786:	d002      	beq.n	800278e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685a      	ldr	r2, [r3, #4]
 8002792:	2382      	movs	r3, #130	; 0x82
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	401a      	ands	r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6899      	ldr	r1, [r3, #8]
 800279c:	2384      	movs	r3, #132	; 0x84
 800279e:	021b      	lsls	r3, r3, #8
 80027a0:	400b      	ands	r3, r1
 80027a2:	431a      	orrs	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	691b      	ldr	r3, [r3, #16]
 80027a8:	2102      	movs	r1, #2
 80027aa:	400b      	ands	r3, r1
 80027ac:	431a      	orrs	r2, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	695b      	ldr	r3, [r3, #20]
 80027b2:	2101      	movs	r1, #1
 80027b4:	400b      	ands	r3, r1
 80027b6:	431a      	orrs	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6999      	ldr	r1, [r3, #24]
 80027bc:	2380      	movs	r3, #128	; 0x80
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	400b      	ands	r3, r1
 80027c2:	431a      	orrs	r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	69db      	ldr	r3, [r3, #28]
 80027c8:	2138      	movs	r1, #56	; 0x38
 80027ca:	400b      	ands	r3, r1
 80027cc:	431a      	orrs	r2, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a1b      	ldr	r3, [r3, #32]
 80027d2:	2180      	movs	r1, #128	; 0x80
 80027d4:	400b      	ands	r3, r1
 80027d6:	431a      	orrs	r2, r3
 80027d8:	0011      	movs	r1, r2
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027de:	2380      	movs	r3, #128	; 0x80
 80027e0:	019b      	lsls	r3, r3, #6
 80027e2:	401a      	ands	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	430a      	orrs	r2, r1
 80027ea:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	699b      	ldr	r3, [r3, #24]
 80027f0:	0c1b      	lsrs	r3, r3, #16
 80027f2:	2204      	movs	r2, #4
 80027f4:	401a      	ands	r2, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fa:	2110      	movs	r1, #16
 80027fc:	400b      	ands	r3, r1
 80027fe:	431a      	orrs	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002804:	2108      	movs	r1, #8
 8002806:	400b      	ands	r3, r1
 8002808:	431a      	orrs	r2, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	68d9      	ldr	r1, [r3, #12]
 800280e:	23f0      	movs	r3, #240	; 0xf0
 8002810:	011b      	lsls	r3, r3, #4
 8002812:	400b      	ands	r3, r1
 8002814:	431a      	orrs	r2, r3
 8002816:	0011      	movs	r1, r2
 8002818:	68fa      	ldr	r2, [r7, #12]
 800281a:	2380      	movs	r3, #128	; 0x80
 800281c:	015b      	lsls	r3, r3, #5
 800281e:	401a      	ands	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	430a      	orrs	r2, r1
 8002826:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	69da      	ldr	r2, [r3, #28]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4907      	ldr	r1, [pc, #28]	; (8002850 <HAL_SPI_Init+0x16c>)
 8002834:	400a      	ands	r2, r1
 8002836:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	225d      	movs	r2, #93	; 0x5d
 8002842:	2101      	movs	r1, #1
 8002844:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002846:	2300      	movs	r3, #0
}
 8002848:	0018      	movs	r0, r3
 800284a:	46bd      	mov	sp, r7
 800284c:	b004      	add	sp, #16
 800284e:	bd80      	pop	{r7, pc}
 8002850:	fffff7ff 	.word	0xfffff7ff

08002854 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b08a      	sub	sp, #40	; 0x28
 8002858:	af00      	add	r7, sp, #0
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	607a      	str	r2, [r7, #4]
 8002860:	001a      	movs	r2, r3
 8002862:	1cbb      	adds	r3, r7, #2
 8002864:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002866:	2301      	movs	r3, #1
 8002868:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800286a:	2323      	movs	r3, #35	; 0x23
 800286c:	18fb      	adds	r3, r7, r3
 800286e:	2200      	movs	r2, #0
 8002870:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	225c      	movs	r2, #92	; 0x5c
 8002876:	5c9b      	ldrb	r3, [r3, r2]
 8002878:	2b01      	cmp	r3, #1
 800287a:	d101      	bne.n	8002880 <HAL_SPI_TransmitReceive+0x2c>
 800287c:	2302      	movs	r3, #2
 800287e:	e1b6      	b.n	8002bee <HAL_SPI_TransmitReceive+0x39a>
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	225c      	movs	r2, #92	; 0x5c
 8002884:	2101      	movs	r1, #1
 8002886:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002888:	f7fe fdc0 	bl	800140c <HAL_GetTick>
 800288c:	0003      	movs	r3, r0
 800288e:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002890:	201b      	movs	r0, #27
 8002892:	183b      	adds	r3, r7, r0
 8002894:	68fa      	ldr	r2, [r7, #12]
 8002896:	215d      	movs	r1, #93	; 0x5d
 8002898:	5c52      	ldrb	r2, [r2, r1]
 800289a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80028a2:	2312      	movs	r3, #18
 80028a4:	18fb      	adds	r3, r7, r3
 80028a6:	1cba      	adds	r2, r7, #2
 80028a8:	8812      	ldrh	r2, [r2, #0]
 80028aa:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80028ac:	183b      	adds	r3, r7, r0
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d012      	beq.n	80028da <HAL_SPI_TransmitReceive+0x86>
 80028b4:	697a      	ldr	r2, [r7, #20]
 80028b6:	2382      	movs	r3, #130	; 0x82
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d108      	bne.n	80028d0 <HAL_SPI_TransmitReceive+0x7c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d104      	bne.n	80028d0 <HAL_SPI_TransmitReceive+0x7c>
 80028c6:	231b      	movs	r3, #27
 80028c8:	18fb      	adds	r3, r7, r3
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	2b04      	cmp	r3, #4
 80028ce:	d004      	beq.n	80028da <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 80028d0:	2323      	movs	r3, #35	; 0x23
 80028d2:	18fb      	adds	r3, r7, r3
 80028d4:	2202      	movs	r2, #2
 80028d6:	701a      	strb	r2, [r3, #0]
    goto error;
 80028d8:	e17e      	b.n	8002bd8 <HAL_SPI_TransmitReceive+0x384>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d006      	beq.n	80028ee <HAL_SPI_TransmitReceive+0x9a>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d003      	beq.n	80028ee <HAL_SPI_TransmitReceive+0x9a>
 80028e6:	1cbb      	adds	r3, r7, #2
 80028e8:	881b      	ldrh	r3, [r3, #0]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d104      	bne.n	80028f8 <HAL_SPI_TransmitReceive+0xa4>
  {
    errorcode = HAL_ERROR;
 80028ee:	2323      	movs	r3, #35	; 0x23
 80028f0:	18fb      	adds	r3, r7, r3
 80028f2:	2201      	movs	r2, #1
 80028f4:	701a      	strb	r2, [r3, #0]
    goto error;
 80028f6:	e16f      	b.n	8002bd8 <HAL_SPI_TransmitReceive+0x384>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	225d      	movs	r2, #93	; 0x5d
 80028fc:	5c9b      	ldrb	r3, [r3, r2]
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	2b04      	cmp	r3, #4
 8002902:	d003      	beq.n	800290c <HAL_SPI_TransmitReceive+0xb8>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	225d      	movs	r2, #93	; 0x5d
 8002908:	2105      	movs	r1, #5
 800290a:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2200      	movs	r2, #0
 8002910:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	1cba      	adds	r2, r7, #2
 800291c:	2146      	movs	r1, #70	; 0x46
 800291e:	8812      	ldrh	r2, [r2, #0]
 8002920:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	1cba      	adds	r2, r7, #2
 8002926:	2144      	movs	r1, #68	; 0x44
 8002928:	8812      	ldrh	r2, [r2, #0]
 800292a:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	68ba      	ldr	r2, [r7, #8]
 8002930:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	1cba      	adds	r2, r7, #2
 8002936:	8812      	ldrh	r2, [r2, #0]
 8002938:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	1cba      	adds	r2, r7, #2
 800293e:	8812      	ldrh	r2, [r2, #0]
 8002940:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2200      	movs	r2, #0
 8002946:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2200      	movs	r2, #0
 800294c:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	68da      	ldr	r2, [r3, #12]
 8002952:	23e0      	movs	r3, #224	; 0xe0
 8002954:	00db      	lsls	r3, r3, #3
 8002956:	429a      	cmp	r2, r3
 8002958:	d908      	bls.n	800296c <HAL_SPI_TransmitReceive+0x118>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	685a      	ldr	r2, [r3, #4]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	49a4      	ldr	r1, [pc, #656]	; (8002bf8 <HAL_SPI_TransmitReceive+0x3a4>)
 8002966:	400a      	ands	r2, r1
 8002968:	605a      	str	r2, [r3, #4]
 800296a:	e008      	b.n	800297e <HAL_SPI_TransmitReceive+0x12a>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	685a      	ldr	r2, [r3, #4]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	2180      	movs	r1, #128	; 0x80
 8002978:	0149      	lsls	r1, r1, #5
 800297a:	430a      	orrs	r2, r1
 800297c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2240      	movs	r2, #64	; 0x40
 8002986:	4013      	ands	r3, r2
 8002988:	2b40      	cmp	r3, #64	; 0x40
 800298a:	d007      	beq.n	800299c <HAL_SPI_TransmitReceive+0x148>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2140      	movs	r1, #64	; 0x40
 8002998:	430a      	orrs	r2, r1
 800299a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	68da      	ldr	r2, [r3, #12]
 80029a0:	23e0      	movs	r3, #224	; 0xe0
 80029a2:	00db      	lsls	r3, r3, #3
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d800      	bhi.n	80029aa <HAL_SPI_TransmitReceive+0x156>
 80029a8:	e07f      	b.n	8002aaa <HAL_SPI_TransmitReceive+0x256>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d005      	beq.n	80029be <HAL_SPI_TransmitReceive+0x16a>
 80029b2:	2312      	movs	r3, #18
 80029b4:	18fb      	adds	r3, r7, r3
 80029b6:	881b      	ldrh	r3, [r3, #0]
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d000      	beq.n	80029be <HAL_SPI_TransmitReceive+0x16a>
 80029bc:	e069      	b.n	8002a92 <HAL_SPI_TransmitReceive+0x23e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029c2:	881a      	ldrh	r2, [r3, #0]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ce:	1c9a      	adds	r2, r3, #2
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029d8:	b29b      	uxth	r3, r3
 80029da:	3b01      	subs	r3, #1
 80029dc:	b29a      	uxth	r2, r3
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029e2:	e056      	b.n	8002a92 <HAL_SPI_TransmitReceive+0x23e>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	2202      	movs	r2, #2
 80029ec:	4013      	ands	r3, r2
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d11b      	bne.n	8002a2a <HAL_SPI_TransmitReceive+0x1d6>
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d016      	beq.n	8002a2a <HAL_SPI_TransmitReceive+0x1d6>
 80029fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d113      	bne.n	8002a2a <HAL_SPI_TransmitReceive+0x1d6>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a06:	881a      	ldrh	r2, [r3, #0]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a12:	1c9a      	adds	r2, r3, #2
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	b29a      	uxth	r2, r3
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002a26:	2300      	movs	r3, #0
 8002a28:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	2201      	movs	r2, #1
 8002a32:	4013      	ands	r3, r2
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d11c      	bne.n	8002a72 <HAL_SPI_TransmitReceive+0x21e>
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2246      	movs	r2, #70	; 0x46
 8002a3c:	5a9b      	ldrh	r3, [r3, r2]
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d016      	beq.n	8002a72 <HAL_SPI_TransmitReceive+0x21e>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	68da      	ldr	r2, [r3, #12]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4e:	b292      	uxth	r2, r2
 8002a50:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a56:	1c9a      	adds	r2, r3, #2
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2246      	movs	r2, #70	; 0x46
 8002a60:	5a9b      	ldrh	r3, [r3, r2]
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	3b01      	subs	r3, #1
 8002a66:	b299      	uxth	r1, r3
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2246      	movs	r2, #70	; 0x46
 8002a6c:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002a72:	f7fe fccb 	bl	800140c <HAL_GetTick>
 8002a76:	0002      	movs	r2, r0
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d807      	bhi.n	8002a92 <HAL_SPI_TransmitReceive+0x23e>
 8002a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a84:	3301      	adds	r3, #1
 8002a86:	d004      	beq.n	8002a92 <HAL_SPI_TransmitReceive+0x23e>
      {
        errorcode = HAL_TIMEOUT;
 8002a88:	2323      	movs	r3, #35	; 0x23
 8002a8a:	18fb      	adds	r3, r7, r3
 8002a8c:	2203      	movs	r2, #3
 8002a8e:	701a      	strb	r2, [r3, #0]
        goto error;
 8002a90:	e0a2      	b.n	8002bd8 <HAL_SPI_TransmitReceive+0x384>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d1a3      	bne.n	80029e4 <HAL_SPI_TransmitReceive+0x190>
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2246      	movs	r2, #70	; 0x46
 8002aa0:	5a9b      	ldrh	r3, [r3, r2]
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d19d      	bne.n	80029e4 <HAL_SPI_TransmitReceive+0x190>
 8002aa8:	e085      	b.n	8002bb6 <HAL_SPI_TransmitReceive+0x362>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d005      	beq.n	8002abe <HAL_SPI_TransmitReceive+0x26a>
 8002ab2:	2312      	movs	r3, #18
 8002ab4:	18fb      	adds	r3, r7, r3
 8002ab6:	881b      	ldrh	r3, [r3, #0]
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d000      	beq.n	8002abe <HAL_SPI_TransmitReceive+0x26a>
 8002abc:	e070      	b.n	8002ba0 <HAL_SPI_TransmitReceive+0x34c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	330c      	adds	r3, #12
 8002ac8:	7812      	ldrb	r2, [r2, #0]
 8002aca:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ad0:	1c5a      	adds	r2, r3, #1
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	3b01      	subs	r3, #1
 8002ade:	b29a      	uxth	r2, r3
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ae4:	e05c      	b.n	8002ba0 <HAL_SPI_TransmitReceive+0x34c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	2202      	movs	r2, #2
 8002aee:	4013      	ands	r3, r2
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d11c      	bne.n	8002b2e <HAL_SPI_TransmitReceive+0x2da>
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d017      	beq.n	8002b2e <HAL_SPI_TransmitReceive+0x2da>
 8002afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d114      	bne.n	8002b2e <HAL_SPI_TransmitReceive+0x2da>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	330c      	adds	r3, #12
 8002b0e:	7812      	ldrb	r2, [r2, #0]
 8002b10:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b16:	1c5a      	adds	r2, r3, #1
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	3b01      	subs	r3, #1
 8002b24:	b29a      	uxth	r2, r3
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	2201      	movs	r2, #1
 8002b36:	4013      	ands	r3, r2
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d11e      	bne.n	8002b7a <HAL_SPI_TransmitReceive+0x326>
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2246      	movs	r2, #70	; 0x46
 8002b40:	5a9b      	ldrh	r3, [r3, r2]
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d018      	beq.n	8002b7a <HAL_SPI_TransmitReceive+0x326>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	330c      	adds	r3, #12
 8002b4e:	001a      	movs	r2, r3
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b54:	7812      	ldrb	r2, [r2, #0]
 8002b56:	b2d2      	uxtb	r2, r2
 8002b58:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5e:	1c5a      	adds	r2, r3, #1
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2246      	movs	r2, #70	; 0x46
 8002b68:	5a9b      	ldrh	r3, [r3, r2]
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	3b01      	subs	r3, #1
 8002b6e:	b299      	uxth	r1, r3
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2246      	movs	r2, #70	; 0x46
 8002b74:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002b76:	2301      	movs	r3, #1
 8002b78:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002b7a:	f7fe fc47 	bl	800140c <HAL_GetTick>
 8002b7e:	0002      	movs	r2, r0
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d802      	bhi.n	8002b90 <HAL_SPI_TransmitReceive+0x33c>
 8002b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b8c:	3301      	adds	r3, #1
 8002b8e:	d102      	bne.n	8002b96 <HAL_SPI_TransmitReceive+0x342>
 8002b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d104      	bne.n	8002ba0 <HAL_SPI_TransmitReceive+0x34c>
      {
        errorcode = HAL_TIMEOUT;
 8002b96:	2323      	movs	r3, #35	; 0x23
 8002b98:	18fb      	adds	r3, r7, r3
 8002b9a:	2203      	movs	r2, #3
 8002b9c:	701a      	strb	r2, [r3, #0]
        goto error;
 8002b9e:	e01b      	b.n	8002bd8 <HAL_SPI_TransmitReceive+0x384>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d19d      	bne.n	8002ae6 <HAL_SPI_TransmitReceive+0x292>
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2246      	movs	r2, #70	; 0x46
 8002bae:	5a9b      	ldrh	r3, [r3, r2]
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d197      	bne.n	8002ae6 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002bb6:	69fa      	ldr	r2, [r7, #28]
 8002bb8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	0018      	movs	r0, r3
 8002bbe:	f000 fc79 	bl	80034b4 <SPI_EndRxTxTransaction>
 8002bc2:	1e03      	subs	r3, r0, #0
 8002bc4:	d007      	beq.n	8002bd6 <HAL_SPI_TransmitReceive+0x382>
  {
    errorcode = HAL_ERROR;
 8002bc6:	2323      	movs	r3, #35	; 0x23
 8002bc8:	18fb      	adds	r3, r7, r3
 8002bca:	2201      	movs	r2, #1
 8002bcc:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2220      	movs	r2, #32
 8002bd2:	661a      	str	r2, [r3, #96]	; 0x60
 8002bd4:	e000      	b.n	8002bd8 <HAL_SPI_TransmitReceive+0x384>
  }

error :
 8002bd6:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	225d      	movs	r2, #93	; 0x5d
 8002bdc:	2101      	movs	r1, #1
 8002bde:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	225c      	movs	r2, #92	; 0x5c
 8002be4:	2100      	movs	r1, #0
 8002be6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002be8:	2323      	movs	r3, #35	; 0x23
 8002bea:	18fb      	adds	r3, r7, r3
 8002bec:	781b      	ldrb	r3, [r3, #0]
}
 8002bee:	0018      	movs	r0, r3
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	b00a      	add	sp, #40	; 0x28
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	46c0      	nop			; (mov r8, r8)
 8002bf8:	ffffefff 	.word	0xffffefff

08002bfc <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8002bfc:	b590      	push	{r4, r7, lr}
 8002bfe:	b087      	sub	sp, #28
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	60b9      	str	r1, [r7, #8]
 8002c06:	607a      	str	r2, [r7, #4]
 8002c08:	001a      	movs	r2, r3
 8002c0a:	1cbb      	adds	r3, r7, #2
 8002c0c:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002c0e:	2317      	movs	r3, #23
 8002c10:	18fb      	adds	r3, r7, r3
 8002c12:	2200      	movs	r2, #0
 8002c14:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	225c      	movs	r2, #92	; 0x5c
 8002c1a:	5c9b      	ldrb	r3, [r3, r2]
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d101      	bne.n	8002c24 <HAL_SPI_TransmitReceive_DMA+0x28>
 8002c20:	2302      	movs	r3, #2
 8002c22:	e198      	b.n	8002f56 <HAL_SPI_TransmitReceive_DMA+0x35a>
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	225c      	movs	r2, #92	; 0x5c
 8002c28:	2101      	movs	r1, #1
 8002c2a:	5499      	strb	r1, [r3, r2]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002c2c:	2016      	movs	r0, #22
 8002c2e:	183b      	adds	r3, r7, r0
 8002c30:	68fa      	ldr	r2, [r7, #12]
 8002c32:	215d      	movs	r1, #93	; 0x5d
 8002c34:	5c52      	ldrb	r2, [r2, r1]
 8002c36:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8002c3e:	183b      	adds	r3, r7, r0
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d012      	beq.n	8002c6c <HAL_SPI_TransmitReceive_DMA+0x70>
 8002c46:	693a      	ldr	r2, [r7, #16]
 8002c48:	2382      	movs	r3, #130	; 0x82
 8002c4a:	005b      	lsls	r3, r3, #1
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d108      	bne.n	8002c62 <HAL_SPI_TransmitReceive_DMA+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d104      	bne.n	8002c62 <HAL_SPI_TransmitReceive_DMA+0x66>
 8002c58:	2316      	movs	r3, #22
 8002c5a:	18fb      	adds	r3, r7, r3
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	2b04      	cmp	r3, #4
 8002c60:	d004      	beq.n	8002c6c <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_BUSY;
 8002c62:	2317      	movs	r3, #23
 8002c64:	18fb      	adds	r3, r7, r3
 8002c66:	2202      	movs	r2, #2
 8002c68:	701a      	strb	r2, [r3, #0]
    goto error;
 8002c6a:	e16d      	b.n	8002f48 <HAL_SPI_TransmitReceive_DMA+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d006      	beq.n	8002c80 <HAL_SPI_TransmitReceive_DMA+0x84>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d003      	beq.n	8002c80 <HAL_SPI_TransmitReceive_DMA+0x84>
 8002c78:	1cbb      	adds	r3, r7, #2
 8002c7a:	881b      	ldrh	r3, [r3, #0]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d104      	bne.n	8002c8a <HAL_SPI_TransmitReceive_DMA+0x8e>
  {
    errorcode = HAL_ERROR;
 8002c80:	2317      	movs	r3, #23
 8002c82:	18fb      	adds	r3, r7, r3
 8002c84:	2201      	movs	r2, #1
 8002c86:	701a      	strb	r2, [r3, #0]
    goto error;
 8002c88:	e15e      	b.n	8002f48 <HAL_SPI_TransmitReceive_DMA+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	225d      	movs	r2, #93	; 0x5d
 8002c8e:	5c9b      	ldrb	r3, [r3, r2]
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	2b04      	cmp	r3, #4
 8002c94:	d003      	beq.n	8002c9e <HAL_SPI_TransmitReceive_DMA+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	225d      	movs	r2, #93	; 0x5d
 8002c9a:	2105      	movs	r1, #5
 8002c9c:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	68ba      	ldr	r2, [r7, #8]
 8002ca8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	1cba      	adds	r2, r7, #2
 8002cae:	8812      	ldrh	r2, [r2, #0]
 8002cb0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	1cba      	adds	r2, r7, #2
 8002cb6:	8812      	ldrh	r2, [r2, #0]
 8002cb8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	1cba      	adds	r2, r7, #2
 8002cc4:	2144      	movs	r1, #68	; 0x44
 8002cc6:	8812      	ldrh	r2, [r2, #0]
 8002cc8:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	1cba      	adds	r2, r7, #2
 8002cce:	2146      	movs	r1, #70	; 0x46
 8002cd0:	8812      	ldrh	r2, [r2, #0]
 8002cd2:	525a      	strh	r2, [r3, r1]

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	651a      	str	r2, [r3, #80]	; 0x50
  }
#endif /* USE_SPI_CRC */

#if defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F051x8) || defined (STM32F058xx)
  /* Packing mode management is enabled by the DMA settings */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	68da      	ldr	r2, [r3, #12]
 8002ce4:	23e0      	movs	r3, #224	; 0xe0
 8002ce6:	00db      	lsls	r3, r3, #3
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d80b      	bhi.n	8002d04 <HAL_SPI_TransmitReceive_DMA+0x108>
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cf0:	695a      	ldr	r2, [r3, #20]
 8002cf2:	2380      	movs	r3, #128	; 0x80
 8002cf4:	00db      	lsls	r3, r3, #3
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d104      	bne.n	8002d04 <HAL_SPI_TransmitReceive_DMA+0x108>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 8002cfa:	2317      	movs	r3, #23
 8002cfc:	18fb      	adds	r3, r7, r3
 8002cfe:	2201      	movs	r2, #1
 8002d00:	701a      	strb	r2, [r3, #0]
    goto error;
 8002d02:	e121      	b.n	8002f48 <HAL_SPI_TransmitReceive_DMA+0x34c>
  }
#endif /* STM32F030x6 || STM32F030x8 || STM32F031x6 || STM32F038xx || STM32F051x8 || STM32F058xx */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	685a      	ldr	r2, [r3, #4]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4994      	ldr	r1, [pc, #592]	; (8002f60 <HAL_SPI_TransmitReceive_DMA+0x364>)
 8002d10:	400a      	ands	r2, r1
 8002d12:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	68da      	ldr	r2, [r3, #12]
 8002d18:	23e0      	movs	r3, #224	; 0xe0
 8002d1a:	00db      	lsls	r3, r3, #3
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d908      	bls.n	8002d32 <HAL_SPI_TransmitReceive_DMA+0x136>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	685a      	ldr	r2, [r3, #4]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	498e      	ldr	r1, [pc, #568]	; (8002f64 <HAL_SPI_TransmitReceive_DMA+0x368>)
 8002d2c:	400a      	ands	r2, r1
 8002d2e:	605a      	str	r2, [r3, #4]
 8002d30:	e074      	b.n	8002e1c <HAL_SPI_TransmitReceive_DMA+0x220>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	685a      	ldr	r2, [r3, #4]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2180      	movs	r1, #128	; 0x80
 8002d3e:	0149      	lsls	r1, r1, #5
 8002d40:	430a      	orrs	r2, r1
 8002d42:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d48:	695a      	ldr	r2, [r3, #20]
 8002d4a:	2380      	movs	r3, #128	; 0x80
 8002d4c:	00db      	lsls	r3, r3, #3
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d127      	bne.n	8002da2 <HAL_SPI_TransmitReceive_DMA+0x1a6>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8002d56:	001a      	movs	r2, r3
 8002d58:	2301      	movs	r3, #1
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	d10f      	bne.n	8002d7e <HAL_SPI_TransmitReceive_DMA+0x182>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	685a      	ldr	r2, [r3, #4]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	497f      	ldr	r1, [pc, #508]	; (8002f68 <HAL_SPI_TransmitReceive_DMA+0x36c>)
 8002d6a:	400a      	ands	r2, r1
 8002d6c:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	085b      	lsrs	r3, r3, #1
 8002d76:	b29a      	uxth	r2, r3
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002d7c:	e011      	b.n	8002da2 <HAL_SPI_TransmitReceive_DMA+0x1a6>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	685a      	ldr	r2, [r3, #4]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2180      	movs	r1, #128	; 0x80
 8002d8a:	01c9      	lsls	r1, r1, #7
 8002d8c:	430a      	orrs	r2, r1
 8002d8e:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	085b      	lsrs	r3, r3, #1
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	b29a      	uxth	r2, r3
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002da6:	695a      	ldr	r2, [r3, #20]
 8002da8:	2380      	movs	r3, #128	; 0x80
 8002daa:	00db      	lsls	r3, r3, #3
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d135      	bne.n	8002e1c <HAL_SPI_TransmitReceive_DMA+0x220>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	685a      	ldr	r2, [r3, #4]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	496a      	ldr	r1, [pc, #424]	; (8002f64 <HAL_SPI_TransmitReceive_DMA+0x368>)
 8002dbc:	400a      	ands	r2, r1
 8002dbe:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2246      	movs	r2, #70	; 0x46
 8002dc4:	5a9b      	ldrh	r3, [r3, r2]
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	001a      	movs	r2, r3
 8002dca:	2301      	movs	r3, #1
 8002dcc:	4013      	ands	r3, r2
 8002dce:	d111      	bne.n	8002df4 <HAL_SPI_TransmitReceive_DMA+0x1f8>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	685a      	ldr	r2, [r3, #4]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4964      	ldr	r1, [pc, #400]	; (8002f6c <HAL_SPI_TransmitReceive_DMA+0x370>)
 8002ddc:	400a      	ands	r2, r1
 8002dde:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2246      	movs	r2, #70	; 0x46
 8002de4:	5a9b      	ldrh	r3, [r3, r2]
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	085b      	lsrs	r3, r3, #1
 8002dea:	b299      	uxth	r1, r3
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2246      	movs	r2, #70	; 0x46
 8002df0:	5299      	strh	r1, [r3, r2]
 8002df2:	e013      	b.n	8002e1c <HAL_SPI_TransmitReceive_DMA+0x220>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	685a      	ldr	r2, [r3, #4]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	2180      	movs	r1, #128	; 0x80
 8002e00:	0189      	lsls	r1, r1, #6
 8002e02:	430a      	orrs	r2, r1
 8002e04:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2246      	movs	r2, #70	; 0x46
 8002e0a:	5a9b      	ldrh	r3, [r3, r2]
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	085b      	lsrs	r3, r3, #1
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	3301      	adds	r3, #1
 8002e14:	b299      	uxth	r1, r3
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2246      	movs	r2, #70	; 0x46
 8002e1a:	5299      	strh	r1, [r3, r2]
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	225d      	movs	r2, #93	; 0x5d
 8002e20:	5c9b      	ldrb	r3, [r3, r2]
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	2b04      	cmp	r3, #4
 8002e26:	d108      	bne.n	8002e3a <HAL_SPI_TransmitReceive_DMA+0x23e>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e2c:	4a50      	ldr	r2, [pc, #320]	; (8002f70 <HAL_SPI_TransmitReceive_DMA+0x374>)
 8002e2e:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e34:	4a4f      	ldr	r2, [pc, #316]	; (8002f74 <HAL_SPI_TransmitReceive_DMA+0x378>)
 8002e36:	629a      	str	r2, [r3, #40]	; 0x28
 8002e38:	e007      	b.n	8002e4a <HAL_SPI_TransmitReceive_DMA+0x24e>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e3e:	4a4e      	ldr	r2, [pc, #312]	; (8002f78 <HAL_SPI_TransmitReceive_DMA+0x37c>)
 8002e40:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e46:	4a4d      	ldr	r2, [pc, #308]	; (8002f7c <HAL_SPI_TransmitReceive_DMA+0x380>)
 8002e48:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e4e:	4a4c      	ldr	r2, [pc, #304]	; (8002f80 <HAL_SPI_TransmitReceive_DMA+0x384>)
 8002e50:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e56:	2200      	movs	r2, #0
 8002e58:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	330c      	adds	r3, #12
 8002e64:	0019      	movs	r1, r3
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6a:	001c      	movs	r4, r3
                                 hspi->RxXferCount))
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2246      	movs	r2, #70	; 0x46
 8002e70:	5a9b      	ldrh	r3, [r3, r2]
 8002e72:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002e74:	0022      	movs	r2, r4
 8002e76:	f7fe fc1b 	bl	80016b0 <HAL_DMA_Start_IT>
 8002e7a:	1e03      	subs	r3, r0, #0
 8002e7c:	d00e      	beq.n	8002e9c <HAL_SPI_TransmitReceive_DMA+0x2a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e82:	2210      	movs	r2, #16
 8002e84:	431a      	orrs	r2, r3
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8002e8a:	2317      	movs	r3, #23
 8002e8c:	18fb      	adds	r3, r7, r3
 8002e8e:	2201      	movs	r2, #1
 8002e90:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	225d      	movs	r2, #93	; 0x5d
 8002e96:	2101      	movs	r1, #1
 8002e98:	5499      	strb	r1, [r3, r2]
    goto error;
 8002e9a:	e055      	b.n	8002f48 <HAL_SPI_TransmitReceive_DMA+0x34c>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	685a      	ldr	r2, [r3, #4]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2101      	movs	r1, #1
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferCpltCallback     = NULL;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eb8:	2200      	movs	r2, #0
 8002eba:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->hdmatx->XferErrorCallback    = NULL;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferAbortCallback    = NULL;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ec8:	2200      	movs	r2, #0
 8002eca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed4:	0019      	movs	r1, r3
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	330c      	adds	r3, #12
 8002edc:	001a      	movs	r2, r3
                                 hspi->TxXferCount))
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ee2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002ee4:	f7fe fbe4 	bl	80016b0 <HAL_DMA_Start_IT>
 8002ee8:	1e03      	subs	r3, r0, #0
 8002eea:	d00e      	beq.n	8002f0a <HAL_SPI_TransmitReceive_DMA+0x30e>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ef0:	2210      	movs	r2, #16
 8002ef2:	431a      	orrs	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8002ef8:	2317      	movs	r3, #23
 8002efa:	18fb      	adds	r3, r7, r3
 8002efc:	2201      	movs	r2, #1
 8002efe:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	225d      	movs	r2, #93	; 0x5d
 8002f04:	2101      	movs	r1, #1
 8002f06:	5499      	strb	r1, [r3, r2]
    goto error;
 8002f08:	e01e      	b.n	8002f48 <HAL_SPI_TransmitReceive_DMA+0x34c>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2240      	movs	r2, #64	; 0x40
 8002f12:	4013      	ands	r3, r2
 8002f14:	2b40      	cmp	r3, #64	; 0x40
 8002f16:	d007      	beq.n	8002f28 <HAL_SPI_TransmitReceive_DMA+0x32c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	2140      	movs	r1, #64	; 0x40
 8002f24:	430a      	orrs	r2, r1
 8002f26:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	685a      	ldr	r2, [r3, #4]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2120      	movs	r1, #32
 8002f34:	430a      	orrs	r2, r1
 8002f36:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	685a      	ldr	r2, [r3, #4]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2102      	movs	r1, #2
 8002f44:	430a      	orrs	r2, r1
 8002f46:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	225c      	movs	r2, #92	; 0x5c
 8002f4c:	2100      	movs	r1, #0
 8002f4e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002f50:	2317      	movs	r3, #23
 8002f52:	18fb      	adds	r3, r7, r3
 8002f54:	781b      	ldrb	r3, [r3, #0]
}
 8002f56:	0018      	movs	r0, r3
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	b007      	add	sp, #28
 8002f5c:	bd90      	pop	{r4, r7, pc}
 8002f5e:	46c0      	nop			; (mov r8, r8)
 8002f60:	ffff9fff 	.word	0xffff9fff
 8002f64:	ffffefff 	.word	0xffffefff
 8002f68:	ffffbfff 	.word	0xffffbfff
 8002f6c:	ffffdfff 	.word	0xffffdfff
 8002f70:	0800311b 	.word	0x0800311b
 8002f74:	08002fd5 	.word	0x08002fd5
 8002f78:	08003139 	.word	0x08003139
 8002f7c:	08003085 	.word	0x08003085
 8002f80:	08003157 	.word	0x08003157

08002f84 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8002f8c:	46c0      	nop			; (mov r8, r8)
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	b002      	add	sp, #8
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8002f9c:	46c0      	nop			; (mov r8, r8)
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	b002      	add	sp, #8
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8002fac:	46c0      	nop			; (mov r8, r8)
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	b002      	add	sp, #8
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8002fbc:	46c0      	nop			; (mov r8, r8)
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	b002      	add	sp, #8
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002fcc:	46c0      	nop			; (mov r8, r8)
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	b002      	add	sp, #8
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe0:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002fe2:	f7fe fa13 	bl	800140c <HAL_GetTick>
 8002fe6:	0003      	movs	r3, r0
 8002fe8:	60bb      	str	r3, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2220      	movs	r2, #32
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	2b20      	cmp	r3, #32
 8002ff6:	d03e      	beq.n	8003076 <SPI_DMAReceiveCplt+0xa2>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	685a      	ldr	r2, [r3, #4]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	2120      	movs	r1, #32
 8003004:	438a      	bics	r2, r1
 8003006:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d10e      	bne.n	800302e <SPI_DMAReceiveCplt+0x5a>
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	685a      	ldr	r2, [r3, #4]
 8003014:	2382      	movs	r3, #130	; 0x82
 8003016:	005b      	lsls	r3, r3, #1
 8003018:	429a      	cmp	r2, r3
 800301a:	d108      	bne.n	800302e <SPI_DMAReceiveCplt+0x5a>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	685a      	ldr	r2, [r3, #4]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2103      	movs	r1, #3
 8003028:	438a      	bics	r2, r1
 800302a:	605a      	str	r2, [r3, #4]
 800302c:	e007      	b.n	800303e <SPI_DMAReceiveCplt+0x6a>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	685a      	ldr	r2, [r3, #4]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2101      	movs	r1, #1
 800303a:	438a      	bics	r2, r1
 800303c:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800303e:	68ba      	ldr	r2, [r7, #8]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2164      	movs	r1, #100	; 0x64
 8003044:	0018      	movs	r0, r3
 8003046:	f000 f9d7 	bl	80033f8 <SPI_EndRxTransaction>
 800304a:	1e03      	subs	r3, r0, #0
 800304c:	d002      	beq.n	8003054 <SPI_DMAReceiveCplt+0x80>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2220      	movs	r2, #32
 8003052:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2246      	movs	r2, #70	; 0x46
 8003058:	2100      	movs	r1, #0
 800305a:	5299      	strh	r1, [r3, r2]
    hspi->State = HAL_SPI_STATE_READY;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	225d      	movs	r2, #93	; 0x5d
 8003060:	2101      	movs	r1, #1
 8003062:	5499      	strb	r1, [r3, r2]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003068:	2b00      	cmp	r3, #0
 800306a:	d004      	beq.n	8003076 <SPI_DMAReceiveCplt+0xa2>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	0018      	movs	r0, r3
 8003070:	f7ff ffa8 	bl	8002fc4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003074:	e003      	b.n	800307e <SPI_DMAReceiveCplt+0xaa>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	0018      	movs	r0, r3
 800307a:	f7ff ff83 	bl	8002f84 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800307e:	46bd      	mov	sp, r7
 8003080:	b004      	add	sp, #16
 8003082:	bd80      	pop	{r7, pc}

08003084 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003090:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003092:	f7fe f9bb 	bl	800140c <HAL_GetTick>
 8003096:	0003      	movs	r3, r0
 8003098:	60bb      	str	r3, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2220      	movs	r2, #32
 80030a2:	4013      	ands	r3, r2
 80030a4:	2b20      	cmp	r3, #32
 80030a6:	d031      	beq.n	800310c <SPI_DMATransmitReceiveCplt+0x88>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	685a      	ldr	r2, [r3, #4]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2120      	movs	r1, #32
 80030b4:	438a      	bics	r2, r1
 80030b6:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80030b8:	68ba      	ldr	r2, [r7, #8]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2164      	movs	r1, #100	; 0x64
 80030be:	0018      	movs	r0, r3
 80030c0:	f000 f9f8 	bl	80034b4 <SPI_EndRxTxTransaction>
 80030c4:	1e03      	subs	r3, r0, #0
 80030c6:	d005      	beq.n	80030d4 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030cc:	2220      	movs	r2, #32
 80030ce:	431a      	orrs	r2, r3
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	685a      	ldr	r2, [r3, #4]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2103      	movs	r1, #3
 80030e0:	438a      	bics	r2, r1
 80030e2:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2200      	movs	r2, #0
 80030e8:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2246      	movs	r2, #70	; 0x46
 80030ee:	2100      	movs	r1, #0
 80030f0:	5299      	strh	r1, [r3, r2]
    hspi->State = HAL_SPI_STATE_READY;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	225d      	movs	r2, #93	; 0x5d
 80030f6:	2101      	movs	r1, #1
 80030f8:	5499      	strb	r1, [r3, r2]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d004      	beq.n	800310c <SPI_DMATransmitReceiveCplt+0x88>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	0018      	movs	r0, r3
 8003106:	f7ff ff5d 	bl	8002fc4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800310a:	e003      	b.n	8003114 <SPI_DMATransmitReceiveCplt+0x90>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	0018      	movs	r0, r3
 8003110:	f7ff ff40 	bl	8002f94 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003114:	46bd      	mov	sp, r7
 8003116:	b004      	add	sp, #16
 8003118:	bd80      	pop	{r7, pc}

0800311a <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800311a:	b580      	push	{r7, lr}
 800311c:	b084      	sub	sp, #16
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003126:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	0018      	movs	r0, r3
 800312c:	f7ff ff3a 	bl	8002fa4 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003130:	46c0      	nop			; (mov r8, r8)
 8003132:	46bd      	mov	sp, r7
 8003134:	b004      	add	sp, #16
 8003136:	bd80      	pop	{r7, pc}

08003138 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003144:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	0018      	movs	r0, r3
 800314a:	f7ff ff33 	bl	8002fb4 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800314e:	46c0      	nop			; (mov r8, r8)
 8003150:	46bd      	mov	sp, r7
 8003152:	b004      	add	sp, #16
 8003154:	bd80      	pop	{r7, pc}

08003156 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003156:	b580      	push	{r7, lr}
 8003158:	b084      	sub	sp, #16
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003162:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	685a      	ldr	r2, [r3, #4]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2103      	movs	r1, #3
 8003170:	438a      	bics	r2, r1
 8003172:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003178:	2210      	movs	r2, #16
 800317a:	431a      	orrs	r2, r3
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	225d      	movs	r2, #93	; 0x5d
 8003184:	2101      	movs	r1, #1
 8003186:	5499      	strb	r1, [r3, r2]
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	0018      	movs	r0, r3
 800318c:	f7ff ff1a 	bl	8002fc4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003190:	46c0      	nop			; (mov r8, r8)
 8003192:	46bd      	mov	sp, r7
 8003194:	b004      	add	sp, #16
 8003196:	bd80      	pop	{r7, pc}

08003198 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b088      	sub	sp, #32
 800319c:	af00      	add	r7, sp, #0
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	603b      	str	r3, [r7, #0]
 80031a4:	1dfb      	adds	r3, r7, #7
 80031a6:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80031a8:	f7fe f930 	bl	800140c <HAL_GetTick>
 80031ac:	0002      	movs	r2, r0
 80031ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b0:	1a9b      	subs	r3, r3, r2
 80031b2:	683a      	ldr	r2, [r7, #0]
 80031b4:	18d3      	adds	r3, r2, r3
 80031b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80031b8:	f7fe f928 	bl	800140c <HAL_GetTick>
 80031bc:	0003      	movs	r3, r0
 80031be:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80031c0:	4b3a      	ldr	r3, [pc, #232]	; (80032ac <SPI_WaitFlagStateUntilTimeout+0x114>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	015b      	lsls	r3, r3, #5
 80031c6:	0d1b      	lsrs	r3, r3, #20
 80031c8:	69fa      	ldr	r2, [r7, #28]
 80031ca:	4353      	muls	r3, r2
 80031cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80031ce:	e058      	b.n	8003282 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	3301      	adds	r3, #1
 80031d4:	d055      	beq.n	8003282 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80031d6:	f7fe f919 	bl	800140c <HAL_GetTick>
 80031da:	0002      	movs	r2, r0
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	69fa      	ldr	r2, [r7, #28]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d902      	bls.n	80031ec <SPI_WaitFlagStateUntilTimeout+0x54>
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d142      	bne.n	8003272 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	685a      	ldr	r2, [r3, #4]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	21e0      	movs	r1, #224	; 0xe0
 80031f8:	438a      	bics	r2, r1
 80031fa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	685a      	ldr	r2, [r3, #4]
 8003200:	2382      	movs	r3, #130	; 0x82
 8003202:	005b      	lsls	r3, r3, #1
 8003204:	429a      	cmp	r2, r3
 8003206:	d113      	bne.n	8003230 <SPI_WaitFlagStateUntilTimeout+0x98>
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	689a      	ldr	r2, [r3, #8]
 800320c:	2380      	movs	r3, #128	; 0x80
 800320e:	021b      	lsls	r3, r3, #8
 8003210:	429a      	cmp	r2, r3
 8003212:	d005      	beq.n	8003220 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	689a      	ldr	r2, [r3, #8]
 8003218:	2380      	movs	r3, #128	; 0x80
 800321a:	00db      	lsls	r3, r3, #3
 800321c:	429a      	cmp	r2, r3
 800321e:	d107      	bne.n	8003230 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2140      	movs	r1, #64	; 0x40
 800322c:	438a      	bics	r2, r1
 800322e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003234:	2380      	movs	r3, #128	; 0x80
 8003236:	019b      	lsls	r3, r3, #6
 8003238:	429a      	cmp	r2, r3
 800323a:	d110      	bne.n	800325e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	491a      	ldr	r1, [pc, #104]	; (80032b0 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003248:	400a      	ands	r2, r1
 800324a:	601a      	str	r2, [r3, #0]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2180      	movs	r1, #128	; 0x80
 8003258:	0189      	lsls	r1, r1, #6
 800325a:	430a      	orrs	r2, r1
 800325c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	225d      	movs	r2, #93	; 0x5d
 8003262:	2101      	movs	r1, #1
 8003264:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	225c      	movs	r2, #92	; 0x5c
 800326a:	2100      	movs	r1, #0
 800326c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e017      	b.n	80032a2 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d101      	bne.n	800327c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8003278:	2300      	movs	r3, #0
 800327a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	3b01      	subs	r3, #1
 8003280:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	68ba      	ldr	r2, [r7, #8]
 800328a:	4013      	ands	r3, r2
 800328c:	68ba      	ldr	r2, [r7, #8]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	425a      	negs	r2, r3
 8003292:	4153      	adcs	r3, r2
 8003294:	b2db      	uxtb	r3, r3
 8003296:	001a      	movs	r2, r3
 8003298:	1dfb      	adds	r3, r7, #7
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	429a      	cmp	r2, r3
 800329e:	d197      	bne.n	80031d0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	0018      	movs	r0, r3
 80032a4:	46bd      	mov	sp, r7
 80032a6:	b008      	add	sp, #32
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	46c0      	nop			; (mov r8, r8)
 80032ac:	2000021c 	.word	0x2000021c
 80032b0:	ffffdfff 	.word	0xffffdfff

080032b4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b08a      	sub	sp, #40	; 0x28
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	60f8      	str	r0, [r7, #12]
 80032bc:	60b9      	str	r1, [r7, #8]
 80032be:	607a      	str	r2, [r7, #4]
 80032c0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80032c2:	2317      	movs	r3, #23
 80032c4:	18fb      	adds	r3, r7, r3
 80032c6:	2200      	movs	r2, #0
 80032c8:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80032ca:	f7fe f89f 	bl	800140c <HAL_GetTick>
 80032ce:	0002      	movs	r2, r0
 80032d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032d2:	1a9b      	subs	r3, r3, r2
 80032d4:	683a      	ldr	r2, [r7, #0]
 80032d6:	18d3      	adds	r3, r2, r3
 80032d8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80032da:	f7fe f897 	bl	800140c <HAL_GetTick>
 80032de:	0003      	movs	r3, r0
 80032e0:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	330c      	adds	r3, #12
 80032e8:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80032ea:	4b41      	ldr	r3, [pc, #260]	; (80033f0 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	0013      	movs	r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	189b      	adds	r3, r3, r2
 80032f4:	00da      	lsls	r2, r3, #3
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	0d1b      	lsrs	r3, r3, #20
 80032fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032fc:	4353      	muls	r3, r2
 80032fe:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003300:	e068      	b.n	80033d4 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003302:	68ba      	ldr	r2, [r7, #8]
 8003304:	23c0      	movs	r3, #192	; 0xc0
 8003306:	00db      	lsls	r3, r3, #3
 8003308:	429a      	cmp	r2, r3
 800330a:	d10a      	bne.n	8003322 <SPI_WaitFifoStateUntilTimeout+0x6e>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d107      	bne.n	8003322 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	b2da      	uxtb	r2, r3
 8003318:	2117      	movs	r1, #23
 800331a:	187b      	adds	r3, r7, r1
 800331c:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800331e:	187b      	adds	r3, r7, r1
 8003320:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	3301      	adds	r3, #1
 8003326:	d055      	beq.n	80033d4 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003328:	f7fe f870 	bl	800140c <HAL_GetTick>
 800332c:	0002      	movs	r2, r0
 800332e:	6a3b      	ldr	r3, [r7, #32]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003334:	429a      	cmp	r2, r3
 8003336:	d902      	bls.n	800333e <SPI_WaitFifoStateUntilTimeout+0x8a>
 8003338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333a:	2b00      	cmp	r3, #0
 800333c:	d142      	bne.n	80033c4 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	685a      	ldr	r2, [r3, #4]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	21e0      	movs	r1, #224	; 0xe0
 800334a:	438a      	bics	r2, r1
 800334c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	685a      	ldr	r2, [r3, #4]
 8003352:	2382      	movs	r3, #130	; 0x82
 8003354:	005b      	lsls	r3, r3, #1
 8003356:	429a      	cmp	r2, r3
 8003358:	d113      	bne.n	8003382 <SPI_WaitFifoStateUntilTimeout+0xce>
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	689a      	ldr	r2, [r3, #8]
 800335e:	2380      	movs	r3, #128	; 0x80
 8003360:	021b      	lsls	r3, r3, #8
 8003362:	429a      	cmp	r2, r3
 8003364:	d005      	beq.n	8003372 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	689a      	ldr	r2, [r3, #8]
 800336a:	2380      	movs	r3, #128	; 0x80
 800336c:	00db      	lsls	r3, r3, #3
 800336e:	429a      	cmp	r2, r3
 8003370:	d107      	bne.n	8003382 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2140      	movs	r1, #64	; 0x40
 800337e:	438a      	bics	r2, r1
 8003380:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003386:	2380      	movs	r3, #128	; 0x80
 8003388:	019b      	lsls	r3, r3, #6
 800338a:	429a      	cmp	r2, r3
 800338c:	d110      	bne.n	80033b0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4916      	ldr	r1, [pc, #88]	; (80033f4 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800339a:	400a      	ands	r2, r1
 800339c:	601a      	str	r2, [r3, #0]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2180      	movs	r1, #128	; 0x80
 80033aa:	0189      	lsls	r1, r1, #6
 80033ac:	430a      	orrs	r2, r1
 80033ae:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	225d      	movs	r2, #93	; 0x5d
 80033b4:	2101      	movs	r1, #1
 80033b6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	225c      	movs	r2, #92	; 0x5c
 80033bc:	2100      	movs	r1, #0
 80033be:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80033c0:	2303      	movs	r3, #3
 80033c2:	e010      	b.n	80033e6 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d101      	bne.n	80033ce <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80033ca:	2300      	movs	r3, #0
 80033cc:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	3b01      	subs	r3, #1
 80033d2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	68ba      	ldr	r2, [r7, #8]
 80033dc:	4013      	ands	r3, r2
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d18e      	bne.n	8003302 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	0018      	movs	r0, r3
 80033e8:	46bd      	mov	sp, r7
 80033ea:	b00a      	add	sp, #40	; 0x28
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	46c0      	nop			; (mov r8, r8)
 80033f0:	2000021c 	.word	0x2000021c
 80033f4:	ffffdfff 	.word	0xffffdfff

080033f8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b086      	sub	sp, #24
 80033fc:	af02      	add	r7, sp, #8
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	60b9      	str	r1, [r7, #8]
 8003402:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	685a      	ldr	r2, [r3, #4]
 8003408:	2382      	movs	r3, #130	; 0x82
 800340a:	005b      	lsls	r3, r3, #1
 800340c:	429a      	cmp	r2, r3
 800340e:	d113      	bne.n	8003438 <SPI_EndRxTransaction+0x40>
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	689a      	ldr	r2, [r3, #8]
 8003414:	2380      	movs	r3, #128	; 0x80
 8003416:	021b      	lsls	r3, r3, #8
 8003418:	429a      	cmp	r2, r3
 800341a:	d005      	beq.n	8003428 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	689a      	ldr	r2, [r3, #8]
 8003420:	2380      	movs	r3, #128	; 0x80
 8003422:	00db      	lsls	r3, r3, #3
 8003424:	429a      	cmp	r2, r3
 8003426:	d107      	bne.n	8003438 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2140      	movs	r1, #64	; 0x40
 8003434:	438a      	bics	r2, r1
 8003436:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003438:	68ba      	ldr	r2, [r7, #8]
 800343a:	68f8      	ldr	r0, [r7, #12]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	9300      	str	r3, [sp, #0]
 8003440:	0013      	movs	r3, r2
 8003442:	2200      	movs	r2, #0
 8003444:	2180      	movs	r1, #128	; 0x80
 8003446:	f7ff fea7 	bl	8003198 <SPI_WaitFlagStateUntilTimeout>
 800344a:	1e03      	subs	r3, r0, #0
 800344c:	d007      	beq.n	800345e <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003452:	2220      	movs	r2, #32
 8003454:	431a      	orrs	r2, r3
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e026      	b.n	80034ac <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	685a      	ldr	r2, [r3, #4]
 8003462:	2382      	movs	r3, #130	; 0x82
 8003464:	005b      	lsls	r3, r3, #1
 8003466:	429a      	cmp	r2, r3
 8003468:	d11f      	bne.n	80034aa <SPI_EndRxTransaction+0xb2>
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	689a      	ldr	r2, [r3, #8]
 800346e:	2380      	movs	r3, #128	; 0x80
 8003470:	021b      	lsls	r3, r3, #8
 8003472:	429a      	cmp	r2, r3
 8003474:	d005      	beq.n	8003482 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	689a      	ldr	r2, [r3, #8]
 800347a:	2380      	movs	r3, #128	; 0x80
 800347c:	00db      	lsls	r3, r3, #3
 800347e:	429a      	cmp	r2, r3
 8003480:	d113      	bne.n	80034aa <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003482:	68ba      	ldr	r2, [r7, #8]
 8003484:	23c0      	movs	r3, #192	; 0xc0
 8003486:	00d9      	lsls	r1, r3, #3
 8003488:	68f8      	ldr	r0, [r7, #12]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	9300      	str	r3, [sp, #0]
 800348e:	0013      	movs	r3, r2
 8003490:	2200      	movs	r2, #0
 8003492:	f7ff ff0f 	bl	80032b4 <SPI_WaitFifoStateUntilTimeout>
 8003496:	1e03      	subs	r3, r0, #0
 8003498:	d007      	beq.n	80034aa <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800349e:	2220      	movs	r2, #32
 80034a0:	431a      	orrs	r2, r3
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e000      	b.n	80034ac <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 80034aa:	2300      	movs	r3, #0
}
 80034ac:	0018      	movs	r0, r3
 80034ae:	46bd      	mov	sp, r7
 80034b0:	b004      	add	sp, #16
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b086      	sub	sp, #24
 80034b8:	af02      	add	r7, sp, #8
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80034c0:	68ba      	ldr	r2, [r7, #8]
 80034c2:	23c0      	movs	r3, #192	; 0xc0
 80034c4:	0159      	lsls	r1, r3, #5
 80034c6:	68f8      	ldr	r0, [r7, #12]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	9300      	str	r3, [sp, #0]
 80034cc:	0013      	movs	r3, r2
 80034ce:	2200      	movs	r2, #0
 80034d0:	f7ff fef0 	bl	80032b4 <SPI_WaitFifoStateUntilTimeout>
 80034d4:	1e03      	subs	r3, r0, #0
 80034d6:	d007      	beq.n	80034e8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034dc:	2220      	movs	r2, #32
 80034de:	431a      	orrs	r2, r3
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e027      	b.n	8003538 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80034e8:	68ba      	ldr	r2, [r7, #8]
 80034ea:	68f8      	ldr	r0, [r7, #12]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	9300      	str	r3, [sp, #0]
 80034f0:	0013      	movs	r3, r2
 80034f2:	2200      	movs	r2, #0
 80034f4:	2180      	movs	r1, #128	; 0x80
 80034f6:	f7ff fe4f 	bl	8003198 <SPI_WaitFlagStateUntilTimeout>
 80034fa:	1e03      	subs	r3, r0, #0
 80034fc:	d007      	beq.n	800350e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003502:	2220      	movs	r2, #32
 8003504:	431a      	orrs	r2, r3
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e014      	b.n	8003538 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800350e:	68ba      	ldr	r2, [r7, #8]
 8003510:	23c0      	movs	r3, #192	; 0xc0
 8003512:	00d9      	lsls	r1, r3, #3
 8003514:	68f8      	ldr	r0, [r7, #12]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	9300      	str	r3, [sp, #0]
 800351a:	0013      	movs	r3, r2
 800351c:	2200      	movs	r2, #0
 800351e:	f7ff fec9 	bl	80032b4 <SPI_WaitFifoStateUntilTimeout>
 8003522:	1e03      	subs	r3, r0, #0
 8003524:	d007      	beq.n	8003536 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800352a:	2220      	movs	r2, #32
 800352c:	431a      	orrs	r2, r3
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e000      	b.n	8003538 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003536:	2300      	movs	r3, #0
}
 8003538:	0018      	movs	r0, r3
 800353a:	46bd      	mov	sp, r7
 800353c:	b004      	add	sp, #16
 800353e:	bd80      	pop	{r7, pc}

08003540 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d101      	bne.n	8003552 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e042      	b.n	80035d8 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	223d      	movs	r2, #61	; 0x3d
 8003556:	5c9b      	ldrb	r3, [r3, r2]
 8003558:	b2db      	uxtb	r3, r3
 800355a:	2b00      	cmp	r3, #0
 800355c:	d107      	bne.n	800356e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	223c      	movs	r2, #60	; 0x3c
 8003562:	2100      	movs	r1, #0
 8003564:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	0018      	movs	r0, r3
 800356a:	f7fd fd81 	bl	8001070 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	223d      	movs	r2, #61	; 0x3d
 8003572:	2102      	movs	r1, #2
 8003574:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	3304      	adds	r3, #4
 800357e:	0019      	movs	r1, r3
 8003580:	0010      	movs	r0, r2
 8003582:	f000 fc13 	bl	8003dac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2246      	movs	r2, #70	; 0x46
 800358a:	2101      	movs	r1, #1
 800358c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	223e      	movs	r2, #62	; 0x3e
 8003592:	2101      	movs	r1, #1
 8003594:	5499      	strb	r1, [r3, r2]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	223f      	movs	r2, #63	; 0x3f
 800359a:	2101      	movs	r1, #1
 800359c:	5499      	strb	r1, [r3, r2]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2240      	movs	r2, #64	; 0x40
 80035a2:	2101      	movs	r1, #1
 80035a4:	5499      	strb	r1, [r3, r2]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2241      	movs	r2, #65	; 0x41
 80035aa:	2101      	movs	r1, #1
 80035ac:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2242      	movs	r2, #66	; 0x42
 80035b2:	2101      	movs	r1, #1
 80035b4:	5499      	strb	r1, [r3, r2]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2243      	movs	r2, #67	; 0x43
 80035ba:	2101      	movs	r1, #1
 80035bc:	5499      	strb	r1, [r3, r2]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2244      	movs	r2, #68	; 0x44
 80035c2:	2101      	movs	r1, #1
 80035c4:	5499      	strb	r1, [r3, r2]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2245      	movs	r2, #69	; 0x45
 80035ca:	2101      	movs	r1, #1
 80035cc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	223d      	movs	r2, #61	; 0x3d
 80035d2:	2101      	movs	r1, #1
 80035d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80035d6:	2300      	movs	r3, #0
}
 80035d8:	0018      	movs	r0, r3
 80035da:	46bd      	mov	sp, r7
 80035dc:	b002      	add	sp, #8
 80035de:	bd80      	pop	{r7, pc}

080035e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d101      	bne.n	80035f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e042      	b.n	8003678 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	223d      	movs	r2, #61	; 0x3d
 80035f6:	5c9b      	ldrb	r3, [r3, r2]
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d107      	bne.n	800360e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	223c      	movs	r2, #60	; 0x3c
 8003602:	2100      	movs	r1, #0
 8003604:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	0018      	movs	r0, r3
 800360a:	f000 f839 	bl	8003680 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	223d      	movs	r2, #61	; 0x3d
 8003612:	2102      	movs	r1, #2
 8003614:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	3304      	adds	r3, #4
 800361e:	0019      	movs	r1, r3
 8003620:	0010      	movs	r0, r2
 8003622:	f000 fbc3 	bl	8003dac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2246      	movs	r2, #70	; 0x46
 800362a:	2101      	movs	r1, #1
 800362c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	223e      	movs	r2, #62	; 0x3e
 8003632:	2101      	movs	r1, #1
 8003634:	5499      	strb	r1, [r3, r2]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	223f      	movs	r2, #63	; 0x3f
 800363a:	2101      	movs	r1, #1
 800363c:	5499      	strb	r1, [r3, r2]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2240      	movs	r2, #64	; 0x40
 8003642:	2101      	movs	r1, #1
 8003644:	5499      	strb	r1, [r3, r2]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2241      	movs	r2, #65	; 0x41
 800364a:	2101      	movs	r1, #1
 800364c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2242      	movs	r2, #66	; 0x42
 8003652:	2101      	movs	r1, #1
 8003654:	5499      	strb	r1, [r3, r2]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2243      	movs	r2, #67	; 0x43
 800365a:	2101      	movs	r1, #1
 800365c:	5499      	strb	r1, [r3, r2]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2244      	movs	r2, #68	; 0x44
 8003662:	2101      	movs	r1, #1
 8003664:	5499      	strb	r1, [r3, r2]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2245      	movs	r2, #69	; 0x45
 800366a:	2101      	movs	r1, #1
 800366c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	223d      	movs	r2, #61	; 0x3d
 8003672:	2101      	movs	r1, #1
 8003674:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003676:	2300      	movs	r3, #0
}
 8003678:	0018      	movs	r0, r3
 800367a:	46bd      	mov	sp, r7
 800367c:	b002      	add	sp, #8
 800367e:	bd80      	pop	{r7, pc}

08003680 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003688:	46c0      	nop			; (mov r8, r8)
 800368a:	46bd      	mov	sp, r7
 800368c:	b002      	add	sp, #8
 800368e:	bd80      	pop	{r7, pc}

08003690 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800369a:	230f      	movs	r3, #15
 800369c:	18fb      	adds	r3, r7, r3
 800369e:	2200      	movs	r2, #0
 80036a0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d108      	bne.n	80036ba <HAL_TIM_PWM_Start_IT+0x2a>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	223e      	movs	r2, #62	; 0x3e
 80036ac:	5c9b      	ldrb	r3, [r3, r2]
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	3b01      	subs	r3, #1
 80036b2:	1e5a      	subs	r2, r3, #1
 80036b4:	4193      	sbcs	r3, r2
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	e01f      	b.n	80036fa <HAL_TIM_PWM_Start_IT+0x6a>
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	2b04      	cmp	r3, #4
 80036be:	d108      	bne.n	80036d2 <HAL_TIM_PWM_Start_IT+0x42>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	223f      	movs	r2, #63	; 0x3f
 80036c4:	5c9b      	ldrb	r3, [r3, r2]
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	3b01      	subs	r3, #1
 80036ca:	1e5a      	subs	r2, r3, #1
 80036cc:	4193      	sbcs	r3, r2
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	e013      	b.n	80036fa <HAL_TIM_PWM_Start_IT+0x6a>
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	2b08      	cmp	r3, #8
 80036d6:	d108      	bne.n	80036ea <HAL_TIM_PWM_Start_IT+0x5a>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2240      	movs	r2, #64	; 0x40
 80036dc:	5c9b      	ldrb	r3, [r3, r2]
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	3b01      	subs	r3, #1
 80036e2:	1e5a      	subs	r2, r3, #1
 80036e4:	4193      	sbcs	r3, r2
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	e007      	b.n	80036fa <HAL_TIM_PWM_Start_IT+0x6a>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2241      	movs	r2, #65	; 0x41
 80036ee:	5c9b      	ldrb	r3, [r3, r2]
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	3b01      	subs	r3, #1
 80036f4:	1e5a      	subs	r2, r3, #1
 80036f6:	4193      	sbcs	r3, r2
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d001      	beq.n	8003702 <HAL_TIM_PWM_Start_IT+0x72>
  {
    return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e0a0      	b.n	8003844 <HAL_TIM_PWM_Start_IT+0x1b4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d104      	bne.n	8003712 <HAL_TIM_PWM_Start_IT+0x82>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	223e      	movs	r2, #62	; 0x3e
 800370c:	2102      	movs	r1, #2
 800370e:	5499      	strb	r1, [r3, r2]
 8003710:	e013      	b.n	800373a <HAL_TIM_PWM_Start_IT+0xaa>
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	2b04      	cmp	r3, #4
 8003716:	d104      	bne.n	8003722 <HAL_TIM_PWM_Start_IT+0x92>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	223f      	movs	r2, #63	; 0x3f
 800371c:	2102      	movs	r1, #2
 800371e:	5499      	strb	r1, [r3, r2]
 8003720:	e00b      	b.n	800373a <HAL_TIM_PWM_Start_IT+0xaa>
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	2b08      	cmp	r3, #8
 8003726:	d104      	bne.n	8003732 <HAL_TIM_PWM_Start_IT+0xa2>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2240      	movs	r2, #64	; 0x40
 800372c:	2102      	movs	r1, #2
 800372e:	5499      	strb	r1, [r3, r2]
 8003730:	e003      	b.n	800373a <HAL_TIM_PWM_Start_IT+0xaa>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2241      	movs	r2, #65	; 0x41
 8003736:	2102      	movs	r1, #2
 8003738:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	2b04      	cmp	r3, #4
 800373e:	d011      	beq.n	8003764 <HAL_TIM_PWM_Start_IT+0xd4>
 8003740:	d802      	bhi.n	8003748 <HAL_TIM_PWM_Start_IT+0xb8>
 8003742:	2b00      	cmp	r3, #0
 8003744:	d005      	beq.n	8003752 <HAL_TIM_PWM_Start_IT+0xc2>
 8003746:	e028      	b.n	800379a <HAL_TIM_PWM_Start_IT+0x10a>
 8003748:	2b08      	cmp	r3, #8
 800374a:	d014      	beq.n	8003776 <HAL_TIM_PWM_Start_IT+0xe6>
 800374c:	2b0c      	cmp	r3, #12
 800374e:	d01b      	beq.n	8003788 <HAL_TIM_PWM_Start_IT+0xf8>
 8003750:	e023      	b.n	800379a <HAL_TIM_PWM_Start_IT+0x10a>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68da      	ldr	r2, [r3, #12]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	2102      	movs	r1, #2
 800375e:	430a      	orrs	r2, r1
 8003760:	60da      	str	r2, [r3, #12]
      break;
 8003762:	e01f      	b.n	80037a4 <HAL_TIM_PWM_Start_IT+0x114>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	68da      	ldr	r2, [r3, #12]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	2104      	movs	r1, #4
 8003770:	430a      	orrs	r2, r1
 8003772:	60da      	str	r2, [r3, #12]
      break;
 8003774:	e016      	b.n	80037a4 <HAL_TIM_PWM_Start_IT+0x114>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68da      	ldr	r2, [r3, #12]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2108      	movs	r1, #8
 8003782:	430a      	orrs	r2, r1
 8003784:	60da      	str	r2, [r3, #12]
      break;
 8003786:	e00d      	b.n	80037a4 <HAL_TIM_PWM_Start_IT+0x114>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68da      	ldr	r2, [r3, #12]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	2110      	movs	r1, #16
 8003794:	430a      	orrs	r2, r1
 8003796:	60da      	str	r2, [r3, #12]
      break;
 8003798:	e004      	b.n	80037a4 <HAL_TIM_PWM_Start_IT+0x114>
    }

    default:
      status = HAL_ERROR;
 800379a:	230f      	movs	r3, #15
 800379c:	18fb      	adds	r3, r7, r3
 800379e:	2201      	movs	r2, #1
 80037a0:	701a      	strb	r2, [r3, #0]
      break;
 80037a2:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 80037a4:	230f      	movs	r3, #15
 80037a6:	18fb      	adds	r3, r7, r3
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d147      	bne.n	800383e <HAL_TIM_PWM_Start_IT+0x1ae>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	6839      	ldr	r1, [r7, #0]
 80037b4:	2201      	movs	r2, #1
 80037b6:	0018      	movs	r0, r3
 80037b8:	f000 fd44 	bl	8004244 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a22      	ldr	r2, [pc, #136]	; (800384c <HAL_TIM_PWM_Start_IT+0x1bc>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d009      	beq.n	80037da <HAL_TIM_PWM_Start_IT+0x14a>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a21      	ldr	r2, [pc, #132]	; (8003850 <HAL_TIM_PWM_Start_IT+0x1c0>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d004      	beq.n	80037da <HAL_TIM_PWM_Start_IT+0x14a>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a1f      	ldr	r2, [pc, #124]	; (8003854 <HAL_TIM_PWM_Start_IT+0x1c4>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d101      	bne.n	80037de <HAL_TIM_PWM_Start_IT+0x14e>
 80037da:	2301      	movs	r3, #1
 80037dc:	e000      	b.n	80037e0 <HAL_TIM_PWM_Start_IT+0x150>
 80037de:	2300      	movs	r3, #0
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d008      	beq.n	80037f6 <HAL_TIM_PWM_Start_IT+0x166>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2180      	movs	r1, #128	; 0x80
 80037f0:	0209      	lsls	r1, r1, #8
 80037f2:	430a      	orrs	r2, r1
 80037f4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a14      	ldr	r2, [pc, #80]	; (800384c <HAL_TIM_PWM_Start_IT+0x1bc>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d004      	beq.n	800380a <HAL_TIM_PWM_Start_IT+0x17a>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a14      	ldr	r2, [pc, #80]	; (8003858 <HAL_TIM_PWM_Start_IT+0x1c8>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d111      	bne.n	800382e <HAL_TIM_PWM_Start_IT+0x19e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	2207      	movs	r2, #7
 8003812:	4013      	ands	r3, r2
 8003814:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	2b06      	cmp	r3, #6
 800381a:	d010      	beq.n	800383e <HAL_TIM_PWM_Start_IT+0x1ae>
      {
        __HAL_TIM_ENABLE(htim);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	2101      	movs	r1, #1
 8003828:	430a      	orrs	r2, r1
 800382a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800382c:	e007      	b.n	800383e <HAL_TIM_PWM_Start_IT+0x1ae>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	2101      	movs	r1, #1
 800383a:	430a      	orrs	r2, r1
 800383c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800383e:	230f      	movs	r3, #15
 8003840:	18fb      	adds	r3, r7, r3
 8003842:	781b      	ldrb	r3, [r3, #0]
}
 8003844:	0018      	movs	r0, r3
 8003846:	46bd      	mov	sp, r7
 8003848:	b004      	add	sp, #16
 800384a:	bd80      	pop	{r7, pc}
 800384c:	40012c00 	.word	0x40012c00
 8003850:	40014400 	.word	0x40014400
 8003854:	40014800 	.word	0x40014800
 8003858:	40000400 	.word	0x40000400

0800385c <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003866:	230f      	movs	r3, #15
 8003868:	18fb      	adds	r3, r7, r3
 800386a:	2200      	movs	r2, #0
 800386c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	2b04      	cmp	r3, #4
 8003872:	d011      	beq.n	8003898 <HAL_TIM_PWM_Stop_IT+0x3c>
 8003874:	d802      	bhi.n	800387c <HAL_TIM_PWM_Stop_IT+0x20>
 8003876:	2b00      	cmp	r3, #0
 8003878:	d005      	beq.n	8003886 <HAL_TIM_PWM_Stop_IT+0x2a>
 800387a:	e028      	b.n	80038ce <HAL_TIM_PWM_Stop_IT+0x72>
 800387c:	2b08      	cmp	r3, #8
 800387e:	d014      	beq.n	80038aa <HAL_TIM_PWM_Stop_IT+0x4e>
 8003880:	2b0c      	cmp	r3, #12
 8003882:	d01b      	beq.n	80038bc <HAL_TIM_PWM_Stop_IT+0x60>
 8003884:	e023      	b.n	80038ce <HAL_TIM_PWM_Stop_IT+0x72>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	68da      	ldr	r2, [r3, #12]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2102      	movs	r1, #2
 8003892:	438a      	bics	r2, r1
 8003894:	60da      	str	r2, [r3, #12]
      break;
 8003896:	e01f      	b.n	80038d8 <HAL_TIM_PWM_Stop_IT+0x7c>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68da      	ldr	r2, [r3, #12]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	2104      	movs	r1, #4
 80038a4:	438a      	bics	r2, r1
 80038a6:	60da      	str	r2, [r3, #12]
      break;
 80038a8:	e016      	b.n	80038d8 <HAL_TIM_PWM_Stop_IT+0x7c>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	68da      	ldr	r2, [r3, #12]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2108      	movs	r1, #8
 80038b6:	438a      	bics	r2, r1
 80038b8:	60da      	str	r2, [r3, #12]
      break;
 80038ba:	e00d      	b.n	80038d8 <HAL_TIM_PWM_Stop_IT+0x7c>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	68da      	ldr	r2, [r3, #12]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	2110      	movs	r1, #16
 80038c8:	438a      	bics	r2, r1
 80038ca:	60da      	str	r2, [r3, #12]
      break;
 80038cc:	e004      	b.n	80038d8 <HAL_TIM_PWM_Stop_IT+0x7c>
    }

    default:
      status = HAL_ERROR;
 80038ce:	230f      	movs	r3, #15
 80038d0:	18fb      	adds	r3, r7, r3
 80038d2:	2201      	movs	r2, #1
 80038d4:	701a      	strb	r2, [r3, #0]
      break;
 80038d6:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 80038d8:	230f      	movs	r3, #15
 80038da:	18fb      	adds	r3, r7, r3
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d15e      	bne.n	80039a0 <HAL_TIM_PWM_Stop_IT+0x144>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	6839      	ldr	r1, [r7, #0]
 80038e8:	2200      	movs	r2, #0
 80038ea:	0018      	movs	r0, r3
 80038ec:	f000 fcaa 	bl	8004244 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a2e      	ldr	r2, [pc, #184]	; (80039b0 <HAL_TIM_PWM_Stop_IT+0x154>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d009      	beq.n	800390e <HAL_TIM_PWM_Stop_IT+0xb2>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a2d      	ldr	r2, [pc, #180]	; (80039b4 <HAL_TIM_PWM_Stop_IT+0x158>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d004      	beq.n	800390e <HAL_TIM_PWM_Stop_IT+0xb2>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a2b      	ldr	r2, [pc, #172]	; (80039b8 <HAL_TIM_PWM_Stop_IT+0x15c>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d101      	bne.n	8003912 <HAL_TIM_PWM_Stop_IT+0xb6>
 800390e:	2301      	movs	r3, #1
 8003910:	e000      	b.n	8003914 <HAL_TIM_PWM_Stop_IT+0xb8>
 8003912:	2300      	movs	r3, #0
 8003914:	2b00      	cmp	r3, #0
 8003916:	d013      	beq.n	8003940 <HAL_TIM_PWM_Stop_IT+0xe4>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	6a1b      	ldr	r3, [r3, #32]
 800391e:	4a27      	ldr	r2, [pc, #156]	; (80039bc <HAL_TIM_PWM_Stop_IT+0x160>)
 8003920:	4013      	ands	r3, r2
 8003922:	d10d      	bne.n	8003940 <HAL_TIM_PWM_Stop_IT+0xe4>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	6a1b      	ldr	r3, [r3, #32]
 800392a:	4a25      	ldr	r2, [pc, #148]	; (80039c0 <HAL_TIM_PWM_Stop_IT+0x164>)
 800392c:	4013      	ands	r3, r2
 800392e:	d107      	bne.n	8003940 <HAL_TIM_PWM_Stop_IT+0xe4>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4922      	ldr	r1, [pc, #136]	; (80039c4 <HAL_TIM_PWM_Stop_IT+0x168>)
 800393c:	400a      	ands	r2, r1
 800393e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	6a1b      	ldr	r3, [r3, #32]
 8003946:	4a1d      	ldr	r2, [pc, #116]	; (80039bc <HAL_TIM_PWM_Stop_IT+0x160>)
 8003948:	4013      	ands	r3, r2
 800394a:	d10d      	bne.n	8003968 <HAL_TIM_PWM_Stop_IT+0x10c>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	6a1b      	ldr	r3, [r3, #32]
 8003952:	4a1b      	ldr	r2, [pc, #108]	; (80039c0 <HAL_TIM_PWM_Stop_IT+0x164>)
 8003954:	4013      	ands	r3, r2
 8003956:	d107      	bne.n	8003968 <HAL_TIM_PWM_Stop_IT+0x10c>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2101      	movs	r1, #1
 8003964:	438a      	bics	r2, r1
 8003966:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d104      	bne.n	8003978 <HAL_TIM_PWM_Stop_IT+0x11c>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	223e      	movs	r2, #62	; 0x3e
 8003972:	2101      	movs	r1, #1
 8003974:	5499      	strb	r1, [r3, r2]
 8003976:	e013      	b.n	80039a0 <HAL_TIM_PWM_Stop_IT+0x144>
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	2b04      	cmp	r3, #4
 800397c:	d104      	bne.n	8003988 <HAL_TIM_PWM_Stop_IT+0x12c>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	223f      	movs	r2, #63	; 0x3f
 8003982:	2101      	movs	r1, #1
 8003984:	5499      	strb	r1, [r3, r2]
 8003986:	e00b      	b.n	80039a0 <HAL_TIM_PWM_Stop_IT+0x144>
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	2b08      	cmp	r3, #8
 800398c:	d104      	bne.n	8003998 <HAL_TIM_PWM_Stop_IT+0x13c>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2240      	movs	r2, #64	; 0x40
 8003992:	2101      	movs	r1, #1
 8003994:	5499      	strb	r1, [r3, r2]
 8003996:	e003      	b.n	80039a0 <HAL_TIM_PWM_Stop_IT+0x144>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2241      	movs	r2, #65	; 0x41
 800399c:	2101      	movs	r1, #1
 800399e:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 80039a0:	230f      	movs	r3, #15
 80039a2:	18fb      	adds	r3, r7, r3
 80039a4:	781b      	ldrb	r3, [r3, #0]
}
 80039a6:	0018      	movs	r0, r3
 80039a8:	46bd      	mov	sp, r7
 80039aa:	b004      	add	sp, #16
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	46c0      	nop			; (mov r8, r8)
 80039b0:	40012c00 	.word	0x40012c00
 80039b4:	40014400 	.word	0x40014400
 80039b8:	40014800 	.word	0x40014800
 80039bc:	00001111 	.word	0x00001111
 80039c0:	00000444 	.word	0x00000444
 80039c4:	ffff7fff 	.word	0xffff7fff

080039c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	2202      	movs	r2, #2
 80039d8:	4013      	ands	r3, r2
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d124      	bne.n	8003a28 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	2202      	movs	r2, #2
 80039e6:	4013      	ands	r3, r2
 80039e8:	2b02      	cmp	r3, #2
 80039ea:	d11d      	bne.n	8003a28 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	2203      	movs	r2, #3
 80039f2:	4252      	negs	r2, r2
 80039f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2201      	movs	r2, #1
 80039fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	699b      	ldr	r3, [r3, #24]
 8003a02:	2203      	movs	r2, #3
 8003a04:	4013      	ands	r3, r2
 8003a06:	d004      	beq.n	8003a12 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	0018      	movs	r0, r3
 8003a0c:	f000 f9be 	bl	8003d8c <HAL_TIM_IC_CaptureCallback>
 8003a10:	e007      	b.n	8003a22 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	0018      	movs	r0, r3
 8003a16:	f000 f9b1 	bl	8003d7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	0018      	movs	r0, r3
 8003a1e:	f7fc ff39 	bl	8000894 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	691b      	ldr	r3, [r3, #16]
 8003a2e:	2204      	movs	r2, #4
 8003a30:	4013      	ands	r3, r2
 8003a32:	2b04      	cmp	r3, #4
 8003a34:	d125      	bne.n	8003a82 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	2204      	movs	r2, #4
 8003a3e:	4013      	ands	r3, r2
 8003a40:	2b04      	cmp	r3, #4
 8003a42:	d11e      	bne.n	8003a82 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2205      	movs	r2, #5
 8003a4a:	4252      	negs	r2, r2
 8003a4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2202      	movs	r2, #2
 8003a52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	699a      	ldr	r2, [r3, #24]
 8003a5a:	23c0      	movs	r3, #192	; 0xc0
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	4013      	ands	r3, r2
 8003a60:	d004      	beq.n	8003a6c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	0018      	movs	r0, r3
 8003a66:	f000 f991 	bl	8003d8c <HAL_TIM_IC_CaptureCallback>
 8003a6a:	e007      	b.n	8003a7c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	0018      	movs	r0, r3
 8003a70:	f000 f984 	bl	8003d7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	0018      	movs	r0, r3
 8003a78:	f7fc ff0c 	bl	8000894 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	691b      	ldr	r3, [r3, #16]
 8003a88:	2208      	movs	r2, #8
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	2b08      	cmp	r3, #8
 8003a8e:	d124      	bne.n	8003ada <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	2208      	movs	r2, #8
 8003a98:	4013      	ands	r3, r2
 8003a9a:	2b08      	cmp	r3, #8
 8003a9c:	d11d      	bne.n	8003ada <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	2209      	movs	r2, #9
 8003aa4:	4252      	negs	r2, r2
 8003aa6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2204      	movs	r2, #4
 8003aac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	69db      	ldr	r3, [r3, #28]
 8003ab4:	2203      	movs	r2, #3
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	d004      	beq.n	8003ac4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	0018      	movs	r0, r3
 8003abe:	f000 f965 	bl	8003d8c <HAL_TIM_IC_CaptureCallback>
 8003ac2:	e007      	b.n	8003ad4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	0018      	movs	r0, r3
 8003ac8:	f000 f958 	bl	8003d7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	0018      	movs	r0, r3
 8003ad0:	f7fc fee0 	bl	8000894 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	691b      	ldr	r3, [r3, #16]
 8003ae0:	2210      	movs	r2, #16
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	2b10      	cmp	r3, #16
 8003ae6:	d125      	bne.n	8003b34 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	2210      	movs	r2, #16
 8003af0:	4013      	ands	r3, r2
 8003af2:	2b10      	cmp	r3, #16
 8003af4:	d11e      	bne.n	8003b34 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	2211      	movs	r2, #17
 8003afc:	4252      	negs	r2, r2
 8003afe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2208      	movs	r2, #8
 8003b04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	69da      	ldr	r2, [r3, #28]
 8003b0c:	23c0      	movs	r3, #192	; 0xc0
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	4013      	ands	r3, r2
 8003b12:	d004      	beq.n	8003b1e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	0018      	movs	r0, r3
 8003b18:	f000 f938 	bl	8003d8c <HAL_TIM_IC_CaptureCallback>
 8003b1c:	e007      	b.n	8003b2e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	0018      	movs	r0, r3
 8003b22:	f000 f92b 	bl	8003d7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	0018      	movs	r0, r3
 8003b2a:	f7fc feb3 	bl	8000894 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d10f      	bne.n	8003b62 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	2201      	movs	r2, #1
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d108      	bne.n	8003b62 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2202      	movs	r2, #2
 8003b56:	4252      	negs	r2, r2
 8003b58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	0018      	movs	r0, r3
 8003b5e:	f000 f905 	bl	8003d6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	691b      	ldr	r3, [r3, #16]
 8003b68:	2280      	movs	r2, #128	; 0x80
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	2b80      	cmp	r3, #128	; 0x80
 8003b6e:	d10f      	bne.n	8003b90 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	2280      	movs	r2, #128	; 0x80
 8003b78:	4013      	ands	r3, r2
 8003b7a:	2b80      	cmp	r3, #128	; 0x80
 8003b7c:	d108      	bne.n	8003b90 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2281      	movs	r2, #129	; 0x81
 8003b84:	4252      	negs	r2, r2
 8003b86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	0018      	movs	r0, r3
 8003b8c:	f000 fbe4 	bl	8004358 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	2240      	movs	r2, #64	; 0x40
 8003b98:	4013      	ands	r3, r2
 8003b9a:	2b40      	cmp	r3, #64	; 0x40
 8003b9c:	d10f      	bne.n	8003bbe <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	2240      	movs	r2, #64	; 0x40
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	2b40      	cmp	r3, #64	; 0x40
 8003baa:	d108      	bne.n	8003bbe <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2241      	movs	r2, #65	; 0x41
 8003bb2:	4252      	negs	r2, r2
 8003bb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	0018      	movs	r0, r3
 8003bba:	f000 f8ef 	bl	8003d9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	691b      	ldr	r3, [r3, #16]
 8003bc4:	2220      	movs	r2, #32
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	2b20      	cmp	r3, #32
 8003bca:	d10f      	bne.n	8003bec <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	2220      	movs	r2, #32
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	2b20      	cmp	r3, #32
 8003bd8:	d108      	bne.n	8003bec <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	2221      	movs	r2, #33	; 0x21
 8003be0:	4252      	negs	r2, r2
 8003be2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	0018      	movs	r0, r3
 8003be8:	f000 fbae 	bl	8004348 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003bec:	46c0      	nop			; (mov r8, r8)
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	b002      	add	sp, #8
 8003bf2:	bd80      	pop	{r7, pc}

08003bf4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b086      	sub	sp, #24
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c00:	2317      	movs	r3, #23
 8003c02:	18fb      	adds	r3, r7, r3
 8003c04:	2200      	movs	r2, #0
 8003c06:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	223c      	movs	r2, #60	; 0x3c
 8003c0c:	5c9b      	ldrb	r3, [r3, r2]
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d101      	bne.n	8003c16 <HAL_TIM_PWM_ConfigChannel+0x22>
 8003c12:	2302      	movs	r3, #2
 8003c14:	e0a3      	b.n	8003d5e <HAL_TIM_PWM_ConfigChannel+0x16a>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	223c      	movs	r2, #60	; 0x3c
 8003c1a:	2101      	movs	r1, #1
 8003c1c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2b04      	cmp	r3, #4
 8003c22:	d029      	beq.n	8003c78 <HAL_TIM_PWM_ConfigChannel+0x84>
 8003c24:	d802      	bhi.n	8003c2c <HAL_TIM_PWM_ConfigChannel+0x38>
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d005      	beq.n	8003c36 <HAL_TIM_PWM_ConfigChannel+0x42>
 8003c2a:	e08c      	b.n	8003d46 <HAL_TIM_PWM_ConfigChannel+0x152>
 8003c2c:	2b08      	cmp	r3, #8
 8003c2e:	d046      	beq.n	8003cbe <HAL_TIM_PWM_ConfigChannel+0xca>
 8003c30:	2b0c      	cmp	r3, #12
 8003c32:	d065      	beq.n	8003d00 <HAL_TIM_PWM_ConfigChannel+0x10c>
 8003c34:	e087      	b.n	8003d46 <HAL_TIM_PWM_ConfigChannel+0x152>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	68ba      	ldr	r2, [r7, #8]
 8003c3c:	0011      	movs	r1, r2
 8003c3e:	0018      	movs	r0, r3
 8003c40:	f000 f920 	bl	8003e84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	699a      	ldr	r2, [r3, #24]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	2108      	movs	r1, #8
 8003c50:	430a      	orrs	r2, r1
 8003c52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	699a      	ldr	r2, [r3, #24]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2104      	movs	r1, #4
 8003c60:	438a      	bics	r2, r1
 8003c62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	6999      	ldr	r1, [r3, #24]
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	691a      	ldr	r2, [r3, #16]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	430a      	orrs	r2, r1
 8003c74:	619a      	str	r2, [r3, #24]
      break;
 8003c76:	e06b      	b.n	8003d50 <HAL_TIM_PWM_ConfigChannel+0x15c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68ba      	ldr	r2, [r7, #8]
 8003c7e:	0011      	movs	r1, r2
 8003c80:	0018      	movs	r0, r3
 8003c82:	f000 f97d 	bl	8003f80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	699a      	ldr	r2, [r3, #24]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2180      	movs	r1, #128	; 0x80
 8003c92:	0109      	lsls	r1, r1, #4
 8003c94:	430a      	orrs	r2, r1
 8003c96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	699a      	ldr	r2, [r3, #24]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4931      	ldr	r1, [pc, #196]	; (8003d68 <HAL_TIM_PWM_ConfigChannel+0x174>)
 8003ca4:	400a      	ands	r2, r1
 8003ca6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	6999      	ldr	r1, [r3, #24]
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	021a      	lsls	r2, r3, #8
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	430a      	orrs	r2, r1
 8003cba:	619a      	str	r2, [r3, #24]
      break;
 8003cbc:	e048      	b.n	8003d50 <HAL_TIM_PWM_ConfigChannel+0x15c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68ba      	ldr	r2, [r7, #8]
 8003cc4:	0011      	movs	r1, r2
 8003cc6:	0018      	movs	r0, r3
 8003cc8:	f000 f9d8 	bl	800407c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	69da      	ldr	r2, [r3, #28]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2108      	movs	r1, #8
 8003cd8:	430a      	orrs	r2, r1
 8003cda:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	69da      	ldr	r2, [r3, #28]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2104      	movs	r1, #4
 8003ce8:	438a      	bics	r2, r1
 8003cea:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	69d9      	ldr	r1, [r3, #28]
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	691a      	ldr	r2, [r3, #16]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	430a      	orrs	r2, r1
 8003cfc:	61da      	str	r2, [r3, #28]
      break;
 8003cfe:	e027      	b.n	8003d50 <HAL_TIM_PWM_ConfigChannel+0x15c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	68ba      	ldr	r2, [r7, #8]
 8003d06:	0011      	movs	r1, r2
 8003d08:	0018      	movs	r0, r3
 8003d0a:	f000 fa37 	bl	800417c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	69da      	ldr	r2, [r3, #28]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	2180      	movs	r1, #128	; 0x80
 8003d1a:	0109      	lsls	r1, r1, #4
 8003d1c:	430a      	orrs	r2, r1
 8003d1e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	69da      	ldr	r2, [r3, #28]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	490f      	ldr	r1, [pc, #60]	; (8003d68 <HAL_TIM_PWM_ConfigChannel+0x174>)
 8003d2c:	400a      	ands	r2, r1
 8003d2e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	69d9      	ldr	r1, [r3, #28]
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	021a      	lsls	r2, r3, #8
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	430a      	orrs	r2, r1
 8003d42:	61da      	str	r2, [r3, #28]
      break;
 8003d44:	e004      	b.n	8003d50 <HAL_TIM_PWM_ConfigChannel+0x15c>
    }

    default:
      status = HAL_ERROR;
 8003d46:	2317      	movs	r3, #23
 8003d48:	18fb      	adds	r3, r7, r3
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	701a      	strb	r2, [r3, #0]
      break;
 8003d4e:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	223c      	movs	r2, #60	; 0x3c
 8003d54:	2100      	movs	r1, #0
 8003d56:	5499      	strb	r1, [r3, r2]

  return status;
 8003d58:	2317      	movs	r3, #23
 8003d5a:	18fb      	adds	r3, r7, r3
 8003d5c:	781b      	ldrb	r3, [r3, #0]
}
 8003d5e:	0018      	movs	r0, r3
 8003d60:	46bd      	mov	sp, r7
 8003d62:	b006      	add	sp, #24
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	46c0      	nop			; (mov r8, r8)
 8003d68:	fffffbff 	.word	0xfffffbff

08003d6c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b082      	sub	sp, #8
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003d74:	46c0      	nop			; (mov r8, r8)
 8003d76:	46bd      	mov	sp, r7
 8003d78:	b002      	add	sp, #8
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b082      	sub	sp, #8
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d84:	46c0      	nop			; (mov r8, r8)
 8003d86:	46bd      	mov	sp, r7
 8003d88:	b002      	add	sp, #8
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b082      	sub	sp, #8
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d94:	46c0      	nop			; (mov r8, r8)
 8003d96:	46bd      	mov	sp, r7
 8003d98:	b002      	add	sp, #8
 8003d9a:	bd80      	pop	{r7, pc}

08003d9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b082      	sub	sp, #8
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003da4:	46c0      	nop			; (mov r8, r8)
 8003da6:	46bd      	mov	sp, r7
 8003da8:	b002      	add	sp, #8
 8003daa:	bd80      	pop	{r7, pc}

08003dac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	4a2b      	ldr	r2, [pc, #172]	; (8003e6c <TIM_Base_SetConfig+0xc0>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d003      	beq.n	8003dcc <TIM_Base_SetConfig+0x20>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4a2a      	ldr	r2, [pc, #168]	; (8003e70 <TIM_Base_SetConfig+0xc4>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d108      	bne.n	8003dde <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2270      	movs	r2, #112	; 0x70
 8003dd0:	4393      	bics	r3, r2
 8003dd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	68fa      	ldr	r2, [r7, #12]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a22      	ldr	r2, [pc, #136]	; (8003e6c <TIM_Base_SetConfig+0xc0>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d00f      	beq.n	8003e06 <TIM_Base_SetConfig+0x5a>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4a21      	ldr	r2, [pc, #132]	; (8003e70 <TIM_Base_SetConfig+0xc4>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d00b      	beq.n	8003e06 <TIM_Base_SetConfig+0x5a>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a20      	ldr	r2, [pc, #128]	; (8003e74 <TIM_Base_SetConfig+0xc8>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d007      	beq.n	8003e06 <TIM_Base_SetConfig+0x5a>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a1f      	ldr	r2, [pc, #124]	; (8003e78 <TIM_Base_SetConfig+0xcc>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d003      	beq.n	8003e06 <TIM_Base_SetConfig+0x5a>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a1e      	ldr	r2, [pc, #120]	; (8003e7c <TIM_Base_SetConfig+0xd0>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d108      	bne.n	8003e18 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	4a1d      	ldr	r2, [pc, #116]	; (8003e80 <TIM_Base_SetConfig+0xd4>)
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	68fa      	ldr	r2, [r7, #12]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2280      	movs	r2, #128	; 0x80
 8003e1c:	4393      	bics	r3, r2
 8003e1e:	001a      	movs	r2, r3
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	695b      	ldr	r3, [r3, #20]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	68fa      	ldr	r2, [r7, #12]
 8003e2c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	689a      	ldr	r2, [r3, #8]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a0a      	ldr	r2, [pc, #40]	; (8003e6c <TIM_Base_SetConfig+0xc0>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d007      	beq.n	8003e56 <TIM_Base_SetConfig+0xaa>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a0b      	ldr	r2, [pc, #44]	; (8003e78 <TIM_Base_SetConfig+0xcc>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d003      	beq.n	8003e56 <TIM_Base_SetConfig+0xaa>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a0a      	ldr	r2, [pc, #40]	; (8003e7c <TIM_Base_SetConfig+0xd0>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d103      	bne.n	8003e5e <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	691a      	ldr	r2, [r3, #16]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2201      	movs	r2, #1
 8003e62:	615a      	str	r2, [r3, #20]
}
 8003e64:	46c0      	nop			; (mov r8, r8)
 8003e66:	46bd      	mov	sp, r7
 8003e68:	b004      	add	sp, #16
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	40012c00 	.word	0x40012c00
 8003e70:	40000400 	.word	0x40000400
 8003e74:	40002000 	.word	0x40002000
 8003e78:	40014400 	.word	0x40014400
 8003e7c:	40014800 	.word	0x40014800
 8003e80:	fffffcff 	.word	0xfffffcff

08003e84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b086      	sub	sp, #24
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a1b      	ldr	r3, [r3, #32]
 8003e92:	2201      	movs	r2, #1
 8003e94:	4393      	bics	r3, r2
 8003e96:	001a      	movs	r2, r3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6a1b      	ldr	r3, [r3, #32]
 8003ea0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	699b      	ldr	r3, [r3, #24]
 8003eac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2270      	movs	r2, #112	; 0x70
 8003eb2:	4393      	bics	r3, r2
 8003eb4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2203      	movs	r2, #3
 8003eba:	4393      	bics	r3, r2
 8003ebc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	68fa      	ldr	r2, [r7, #12]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	2202      	movs	r2, #2
 8003ecc:	4393      	bics	r3, r2
 8003ece:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	697a      	ldr	r2, [r7, #20]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a23      	ldr	r2, [pc, #140]	; (8003f6c <TIM_OC1_SetConfig+0xe8>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d007      	beq.n	8003ef2 <TIM_OC1_SetConfig+0x6e>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a22      	ldr	r2, [pc, #136]	; (8003f70 <TIM_OC1_SetConfig+0xec>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d003      	beq.n	8003ef2 <TIM_OC1_SetConfig+0x6e>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a21      	ldr	r2, [pc, #132]	; (8003f74 <TIM_OC1_SetConfig+0xf0>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d10c      	bne.n	8003f0c <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	2208      	movs	r2, #8
 8003ef6:	4393      	bics	r3, r2
 8003ef8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	697a      	ldr	r2, [r7, #20]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	2204      	movs	r2, #4
 8003f08:	4393      	bics	r3, r2
 8003f0a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4a17      	ldr	r2, [pc, #92]	; (8003f6c <TIM_OC1_SetConfig+0xe8>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d007      	beq.n	8003f24 <TIM_OC1_SetConfig+0xa0>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a16      	ldr	r2, [pc, #88]	; (8003f70 <TIM_OC1_SetConfig+0xec>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d003      	beq.n	8003f24 <TIM_OC1_SetConfig+0xa0>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4a15      	ldr	r2, [pc, #84]	; (8003f74 <TIM_OC1_SetConfig+0xf0>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d111      	bne.n	8003f48 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	4a14      	ldr	r2, [pc, #80]	; (8003f78 <TIM_OC1_SetConfig+0xf4>)
 8003f28:	4013      	ands	r3, r2
 8003f2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	4a13      	ldr	r2, [pc, #76]	; (8003f7c <TIM_OC1_SetConfig+0xf8>)
 8003f30:	4013      	ands	r3, r2
 8003f32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	695b      	ldr	r3, [r3, #20]
 8003f38:	693a      	ldr	r2, [r7, #16]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	693a      	ldr	r2, [r7, #16]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	693a      	ldr	r2, [r7, #16]
 8003f4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	68fa      	ldr	r2, [r7, #12]
 8003f52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	685a      	ldr	r2, [r3, #4]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	697a      	ldr	r2, [r7, #20]
 8003f60:	621a      	str	r2, [r3, #32]
}
 8003f62:	46c0      	nop			; (mov r8, r8)
 8003f64:	46bd      	mov	sp, r7
 8003f66:	b006      	add	sp, #24
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	46c0      	nop			; (mov r8, r8)
 8003f6c:	40012c00 	.word	0x40012c00
 8003f70:	40014400 	.word	0x40014400
 8003f74:	40014800 	.word	0x40014800
 8003f78:	fffffeff 	.word	0xfffffeff
 8003f7c:	fffffdff 	.word	0xfffffdff

08003f80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b086      	sub	sp, #24
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a1b      	ldr	r3, [r3, #32]
 8003f8e:	2210      	movs	r2, #16
 8003f90:	4393      	bics	r3, r2
 8003f92:	001a      	movs	r2, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6a1b      	ldr	r3, [r3, #32]
 8003f9c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	699b      	ldr	r3, [r3, #24]
 8003fa8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	4a2c      	ldr	r2, [pc, #176]	; (8004060 <TIM_OC2_SetConfig+0xe0>)
 8003fae:	4013      	ands	r3, r2
 8003fb0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	4a2b      	ldr	r2, [pc, #172]	; (8004064 <TIM_OC2_SetConfig+0xe4>)
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	021b      	lsls	r3, r3, #8
 8003fc0:	68fa      	ldr	r2, [r7, #12]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	2220      	movs	r2, #32
 8003fca:	4393      	bics	r3, r2
 8003fcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	011b      	lsls	r3, r3, #4
 8003fd4:	697a      	ldr	r2, [r7, #20]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a22      	ldr	r2, [pc, #136]	; (8004068 <TIM_OC2_SetConfig+0xe8>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d10d      	bne.n	8003ffe <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	2280      	movs	r2, #128	; 0x80
 8003fe6:	4393      	bics	r3, r2
 8003fe8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	011b      	lsls	r3, r3, #4
 8003ff0:	697a      	ldr	r2, [r7, #20]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	2240      	movs	r2, #64	; 0x40
 8003ffa:	4393      	bics	r3, r2
 8003ffc:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a19      	ldr	r2, [pc, #100]	; (8004068 <TIM_OC2_SetConfig+0xe8>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d007      	beq.n	8004016 <TIM_OC2_SetConfig+0x96>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a18      	ldr	r2, [pc, #96]	; (800406c <TIM_OC2_SetConfig+0xec>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d003      	beq.n	8004016 <TIM_OC2_SetConfig+0x96>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a17      	ldr	r2, [pc, #92]	; (8004070 <TIM_OC2_SetConfig+0xf0>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d113      	bne.n	800403e <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	4a16      	ldr	r2, [pc, #88]	; (8004074 <TIM_OC2_SetConfig+0xf4>)
 800401a:	4013      	ands	r3, r2
 800401c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	4a15      	ldr	r2, [pc, #84]	; (8004078 <TIM_OC2_SetConfig+0xf8>)
 8004022:	4013      	ands	r3, r2
 8004024:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	695b      	ldr	r3, [r3, #20]
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	693a      	ldr	r2, [r7, #16]
 800402e:	4313      	orrs	r3, r2
 8004030:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	699b      	ldr	r3, [r3, #24]
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	693a      	ldr	r2, [r7, #16]
 800403a:	4313      	orrs	r3, r2
 800403c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	693a      	ldr	r2, [r7, #16]
 8004042:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	68fa      	ldr	r2, [r7, #12]
 8004048:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	685a      	ldr	r2, [r3, #4]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	697a      	ldr	r2, [r7, #20]
 8004056:	621a      	str	r2, [r3, #32]
}
 8004058:	46c0      	nop			; (mov r8, r8)
 800405a:	46bd      	mov	sp, r7
 800405c:	b006      	add	sp, #24
 800405e:	bd80      	pop	{r7, pc}
 8004060:	ffff8fff 	.word	0xffff8fff
 8004064:	fffffcff 	.word	0xfffffcff
 8004068:	40012c00 	.word	0x40012c00
 800406c:	40014400 	.word	0x40014400
 8004070:	40014800 	.word	0x40014800
 8004074:	fffffbff 	.word	0xfffffbff
 8004078:	fffff7ff 	.word	0xfffff7ff

0800407c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b086      	sub	sp, #24
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a1b      	ldr	r3, [r3, #32]
 800408a:	4a33      	ldr	r2, [pc, #204]	; (8004158 <TIM_OC3_SetConfig+0xdc>)
 800408c:	401a      	ands	r2, r3
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a1b      	ldr	r3, [r3, #32]
 8004096:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	69db      	ldr	r3, [r3, #28]
 80040a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2270      	movs	r2, #112	; 0x70
 80040a8:	4393      	bics	r3, r2
 80040aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2203      	movs	r2, #3
 80040b0:	4393      	bics	r3, r2
 80040b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	68fa      	ldr	r2, [r7, #12]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	4a26      	ldr	r2, [pc, #152]	; (800415c <TIM_OC3_SetConfig+0xe0>)
 80040c2:	4013      	ands	r3, r2
 80040c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	021b      	lsls	r3, r3, #8
 80040cc:	697a      	ldr	r2, [r7, #20]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4a22      	ldr	r2, [pc, #136]	; (8004160 <TIM_OC3_SetConfig+0xe4>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d10d      	bne.n	80040f6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	4a21      	ldr	r2, [pc, #132]	; (8004164 <TIM_OC3_SetConfig+0xe8>)
 80040de:	4013      	ands	r3, r2
 80040e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	021b      	lsls	r3, r3, #8
 80040e8:	697a      	ldr	r2, [r7, #20]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	4a1d      	ldr	r2, [pc, #116]	; (8004168 <TIM_OC3_SetConfig+0xec>)
 80040f2:	4013      	ands	r3, r2
 80040f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4a19      	ldr	r2, [pc, #100]	; (8004160 <TIM_OC3_SetConfig+0xe4>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d007      	beq.n	800410e <TIM_OC3_SetConfig+0x92>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a1a      	ldr	r2, [pc, #104]	; (800416c <TIM_OC3_SetConfig+0xf0>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d003      	beq.n	800410e <TIM_OC3_SetConfig+0x92>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a19      	ldr	r2, [pc, #100]	; (8004170 <TIM_OC3_SetConfig+0xf4>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d113      	bne.n	8004136 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	4a18      	ldr	r2, [pc, #96]	; (8004174 <TIM_OC3_SetConfig+0xf8>)
 8004112:	4013      	ands	r3, r2
 8004114:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	4a17      	ldr	r2, [pc, #92]	; (8004178 <TIM_OC3_SetConfig+0xfc>)
 800411a:	4013      	ands	r3, r2
 800411c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	011b      	lsls	r3, r3, #4
 8004124:	693a      	ldr	r2, [r7, #16]
 8004126:	4313      	orrs	r3, r2
 8004128:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	699b      	ldr	r3, [r3, #24]
 800412e:	011b      	lsls	r3, r3, #4
 8004130:	693a      	ldr	r2, [r7, #16]
 8004132:	4313      	orrs	r3, r2
 8004134:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	693a      	ldr	r2, [r7, #16]
 800413a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	68fa      	ldr	r2, [r7, #12]
 8004140:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	685a      	ldr	r2, [r3, #4]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	697a      	ldr	r2, [r7, #20]
 800414e:	621a      	str	r2, [r3, #32]
}
 8004150:	46c0      	nop			; (mov r8, r8)
 8004152:	46bd      	mov	sp, r7
 8004154:	b006      	add	sp, #24
 8004156:	bd80      	pop	{r7, pc}
 8004158:	fffffeff 	.word	0xfffffeff
 800415c:	fffffdff 	.word	0xfffffdff
 8004160:	40012c00 	.word	0x40012c00
 8004164:	fffff7ff 	.word	0xfffff7ff
 8004168:	fffffbff 	.word	0xfffffbff
 800416c:	40014400 	.word	0x40014400
 8004170:	40014800 	.word	0x40014800
 8004174:	ffffefff 	.word	0xffffefff
 8004178:	ffffdfff 	.word	0xffffdfff

0800417c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b086      	sub	sp, #24
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a1b      	ldr	r3, [r3, #32]
 800418a:	4a26      	ldr	r2, [pc, #152]	; (8004224 <TIM_OC4_SetConfig+0xa8>)
 800418c:	401a      	ands	r2, r3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a1b      	ldr	r3, [r3, #32]
 8004196:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	69db      	ldr	r3, [r3, #28]
 80041a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	4a20      	ldr	r2, [pc, #128]	; (8004228 <TIM_OC4_SetConfig+0xac>)
 80041a8:	4013      	ands	r3, r2
 80041aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	4a1f      	ldr	r2, [pc, #124]	; (800422c <TIM_OC4_SetConfig+0xb0>)
 80041b0:	4013      	ands	r3, r2
 80041b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	021b      	lsls	r3, r3, #8
 80041ba:	68fa      	ldr	r2, [r7, #12]
 80041bc:	4313      	orrs	r3, r2
 80041be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	4a1b      	ldr	r2, [pc, #108]	; (8004230 <TIM_OC4_SetConfig+0xb4>)
 80041c4:	4013      	ands	r3, r2
 80041c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	031b      	lsls	r3, r3, #12
 80041ce:	693a      	ldr	r2, [r7, #16]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	4a17      	ldr	r2, [pc, #92]	; (8004234 <TIM_OC4_SetConfig+0xb8>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d007      	beq.n	80041ec <TIM_OC4_SetConfig+0x70>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4a16      	ldr	r2, [pc, #88]	; (8004238 <TIM_OC4_SetConfig+0xbc>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d003      	beq.n	80041ec <TIM_OC4_SetConfig+0x70>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	4a15      	ldr	r2, [pc, #84]	; (800423c <TIM_OC4_SetConfig+0xc0>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d109      	bne.n	8004200 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	4a14      	ldr	r2, [pc, #80]	; (8004240 <TIM_OC4_SetConfig+0xc4>)
 80041f0:	4013      	ands	r3, r2
 80041f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	695b      	ldr	r3, [r3, #20]
 80041f8:	019b      	lsls	r3, r3, #6
 80041fa:	697a      	ldr	r2, [r7, #20]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	697a      	ldr	r2, [r7, #20]
 8004204:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	68fa      	ldr	r2, [r7, #12]
 800420a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	685a      	ldr	r2, [r3, #4]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	693a      	ldr	r2, [r7, #16]
 8004218:	621a      	str	r2, [r3, #32]
}
 800421a:	46c0      	nop			; (mov r8, r8)
 800421c:	46bd      	mov	sp, r7
 800421e:	b006      	add	sp, #24
 8004220:	bd80      	pop	{r7, pc}
 8004222:	46c0      	nop			; (mov r8, r8)
 8004224:	ffffefff 	.word	0xffffefff
 8004228:	ffff8fff 	.word	0xffff8fff
 800422c:	fffffcff 	.word	0xfffffcff
 8004230:	ffffdfff 	.word	0xffffdfff
 8004234:	40012c00 	.word	0x40012c00
 8004238:	40014400 	.word	0x40014400
 800423c:	40014800 	.word	0x40014800
 8004240:	ffffbfff 	.word	0xffffbfff

08004244 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b086      	sub	sp, #24
 8004248:	af00      	add	r7, sp, #0
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	221f      	movs	r2, #31
 8004254:	4013      	ands	r3, r2
 8004256:	2201      	movs	r2, #1
 8004258:	409a      	lsls	r2, r3
 800425a:	0013      	movs	r3, r2
 800425c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6a1b      	ldr	r3, [r3, #32]
 8004262:	697a      	ldr	r2, [r7, #20]
 8004264:	43d2      	mvns	r2, r2
 8004266:	401a      	ands	r2, r3
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6a1a      	ldr	r2, [r3, #32]
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	211f      	movs	r1, #31
 8004274:	400b      	ands	r3, r1
 8004276:	6879      	ldr	r1, [r7, #4]
 8004278:	4099      	lsls	r1, r3
 800427a:	000b      	movs	r3, r1
 800427c:	431a      	orrs	r2, r3
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	621a      	str	r2, [r3, #32]
}
 8004282:	46c0      	nop			; (mov r8, r8)
 8004284:	46bd      	mov	sp, r7
 8004286:	b006      	add	sp, #24
 8004288:	bd80      	pop	{r7, pc}
	...

0800428c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004296:	2300      	movs	r3, #0
 8004298:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	223c      	movs	r2, #60	; 0x3c
 800429e:	5c9b      	ldrb	r3, [r3, r2]
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d101      	bne.n	80042a8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80042a4:	2302      	movs	r3, #2
 80042a6:	e03e      	b.n	8004326 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	223c      	movs	r2, #60	; 0x3c
 80042ac:	2101      	movs	r1, #1
 80042ae:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	22ff      	movs	r2, #255	; 0xff
 80042b4:	4393      	bics	r3, r2
 80042b6:	001a      	movs	r2, r3
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	4313      	orrs	r3, r2
 80042be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	4a1b      	ldr	r2, [pc, #108]	; (8004330 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 80042c4:	401a      	ands	r2, r3
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	4a18      	ldr	r2, [pc, #96]	; (8004334 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 80042d2:	401a      	ands	r2, r3
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	4313      	orrs	r3, r2
 80042da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	4a16      	ldr	r2, [pc, #88]	; (8004338 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 80042e0:	401a      	ands	r2, r3
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	4a13      	ldr	r2, [pc, #76]	; (800433c <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 80042ee:	401a      	ands	r2, r3
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	691b      	ldr	r3, [r3, #16]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	4a11      	ldr	r2, [pc, #68]	; (8004340 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 80042fc:	401a      	ands	r2, r3
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	695b      	ldr	r3, [r3, #20]
 8004302:	4313      	orrs	r3, r2
 8004304:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	4a0e      	ldr	r2, [pc, #56]	; (8004344 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 800430a:	401a      	ands	r2, r3
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	69db      	ldr	r3, [r3, #28]
 8004310:	4313      	orrs	r3, r2
 8004312:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	68fa      	ldr	r2, [r7, #12]
 800431a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	223c      	movs	r2, #60	; 0x3c
 8004320:	2100      	movs	r1, #0
 8004322:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004324:	2300      	movs	r3, #0
}
 8004326:	0018      	movs	r0, r3
 8004328:	46bd      	mov	sp, r7
 800432a:	b004      	add	sp, #16
 800432c:	bd80      	pop	{r7, pc}
 800432e:	46c0      	nop			; (mov r8, r8)
 8004330:	fffffcff 	.word	0xfffffcff
 8004334:	fffffbff 	.word	0xfffffbff
 8004338:	fffff7ff 	.word	0xfffff7ff
 800433c:	ffffefff 	.word	0xffffefff
 8004340:	ffffdfff 	.word	0xffffdfff
 8004344:	ffffbfff 	.word	0xffffbfff

08004348 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004350:	46c0      	nop			; (mov r8, r8)
 8004352:	46bd      	mov	sp, r7
 8004354:	b002      	add	sp, #8
 8004356:	bd80      	pop	{r7, pc}

08004358 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b082      	sub	sp, #8
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004360:	46c0      	nop			; (mov r8, r8)
 8004362:	46bd      	mov	sp, r7
 8004364:	b002      	add	sp, #8
 8004366:	bd80      	pop	{r7, pc}

08004368 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d101      	bne.n	800437a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e044      	b.n	8004404 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800437e:	2b00      	cmp	r3, #0
 8004380:	d107      	bne.n	8004392 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2274      	movs	r2, #116	; 0x74
 8004386:	2100      	movs	r1, #0
 8004388:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	0018      	movs	r0, r3
 800438e:	f7fc ff23 	bl	80011d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2224      	movs	r2, #36	; 0x24
 8004396:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	2101      	movs	r1, #1
 80043a4:	438a      	bics	r2, r1
 80043a6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	0018      	movs	r0, r3
 80043ac:	f000 f830 	bl	8004410 <UART_SetConfig>
 80043b0:	0003      	movs	r3, r0
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d101      	bne.n	80043ba <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e024      	b.n	8004404 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d003      	beq.n	80043ca <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	0018      	movs	r0, r3
 80043c6:	f000 f949 	bl	800465c <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	685a      	ldr	r2, [r3, #4]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	490d      	ldr	r1, [pc, #52]	; (800440c <HAL_UART_Init+0xa4>)
 80043d6:	400a      	ands	r2, r1
 80043d8:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	689a      	ldr	r2, [r3, #8]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2108      	movs	r1, #8
 80043e6:	438a      	bics	r2, r1
 80043e8:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2101      	movs	r1, #1
 80043f6:	430a      	orrs	r2, r1
 80043f8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	0018      	movs	r0, r3
 80043fe:	f000 f9e1 	bl	80047c4 <UART_CheckIdleState>
 8004402:	0003      	movs	r3, r0
}
 8004404:	0018      	movs	r0, r3
 8004406:	46bd      	mov	sp, r7
 8004408:	b002      	add	sp, #8
 800440a:	bd80      	pop	{r7, pc}
 800440c:	fffff7ff 	.word	0xfffff7ff

08004410 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b088      	sub	sp, #32
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004418:	231e      	movs	r3, #30
 800441a:	18fb      	adds	r3, r7, r3
 800441c:	2200      	movs	r2, #0
 800441e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	689a      	ldr	r2, [r3, #8]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	691b      	ldr	r3, [r3, #16]
 8004428:	431a      	orrs	r2, r3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	695b      	ldr	r3, [r3, #20]
 800442e:	431a      	orrs	r2, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	69db      	ldr	r3, [r3, #28]
 8004434:	4313      	orrs	r3, r2
 8004436:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a81      	ldr	r2, [pc, #516]	; (8004644 <UART_SetConfig+0x234>)
 8004440:	4013      	ands	r3, r2
 8004442:	0019      	movs	r1, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	697a      	ldr	r2, [r7, #20]
 800444a:	430a      	orrs	r2, r1
 800444c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	4a7c      	ldr	r2, [pc, #496]	; (8004648 <UART_SetConfig+0x238>)
 8004456:	4013      	ands	r3, r2
 8004458:	0019      	movs	r1, r3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	68da      	ldr	r2, [r3, #12]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	430a      	orrs	r2, r1
 8004464:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	699b      	ldr	r3, [r3, #24]
 800446a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6a1b      	ldr	r3, [r3, #32]
 8004470:	697a      	ldr	r2, [r7, #20]
 8004472:	4313      	orrs	r3, r2
 8004474:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	4a73      	ldr	r2, [pc, #460]	; (800464c <UART_SetConfig+0x23c>)
 800447e:	4013      	ands	r3, r2
 8004480:	0019      	movs	r1, r3
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	697a      	ldr	r2, [r7, #20]
 8004488:	430a      	orrs	r2, r1
 800448a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800448c:	4b70      	ldr	r3, [pc, #448]	; (8004650 <UART_SetConfig+0x240>)
 800448e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004490:	2203      	movs	r2, #3
 8004492:	4013      	ands	r3, r2
 8004494:	2b01      	cmp	r3, #1
 8004496:	d00f      	beq.n	80044b8 <UART_SetConfig+0xa8>
 8004498:	d304      	bcc.n	80044a4 <UART_SetConfig+0x94>
 800449a:	2b02      	cmp	r3, #2
 800449c:	d011      	beq.n	80044c2 <UART_SetConfig+0xb2>
 800449e:	2b03      	cmp	r3, #3
 80044a0:	d005      	beq.n	80044ae <UART_SetConfig+0x9e>
 80044a2:	e013      	b.n	80044cc <UART_SetConfig+0xbc>
 80044a4:	231f      	movs	r3, #31
 80044a6:	18fb      	adds	r3, r7, r3
 80044a8:	2200      	movs	r2, #0
 80044aa:	701a      	strb	r2, [r3, #0]
 80044ac:	e012      	b.n	80044d4 <UART_SetConfig+0xc4>
 80044ae:	231f      	movs	r3, #31
 80044b0:	18fb      	adds	r3, r7, r3
 80044b2:	2202      	movs	r2, #2
 80044b4:	701a      	strb	r2, [r3, #0]
 80044b6:	e00d      	b.n	80044d4 <UART_SetConfig+0xc4>
 80044b8:	231f      	movs	r3, #31
 80044ba:	18fb      	adds	r3, r7, r3
 80044bc:	2204      	movs	r2, #4
 80044be:	701a      	strb	r2, [r3, #0]
 80044c0:	e008      	b.n	80044d4 <UART_SetConfig+0xc4>
 80044c2:	231f      	movs	r3, #31
 80044c4:	18fb      	adds	r3, r7, r3
 80044c6:	2208      	movs	r2, #8
 80044c8:	701a      	strb	r2, [r3, #0]
 80044ca:	e003      	b.n	80044d4 <UART_SetConfig+0xc4>
 80044cc:	231f      	movs	r3, #31
 80044ce:	18fb      	adds	r3, r7, r3
 80044d0:	2210      	movs	r2, #16
 80044d2:	701a      	strb	r2, [r3, #0]
 80044d4:	46c0      	nop			; (mov r8, r8)

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	69da      	ldr	r2, [r3, #28]
 80044da:	2380      	movs	r3, #128	; 0x80
 80044dc:	021b      	lsls	r3, r3, #8
 80044de:	429a      	cmp	r2, r3
 80044e0:	d15c      	bne.n	800459c <UART_SetConfig+0x18c>
  {
    switch (clocksource)
 80044e2:	231f      	movs	r3, #31
 80044e4:	18fb      	adds	r3, r7, r3
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d00d      	beq.n	8004508 <UART_SetConfig+0xf8>
 80044ec:	dc02      	bgt.n	80044f4 <UART_SetConfig+0xe4>
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d005      	beq.n	80044fe <UART_SetConfig+0xee>
 80044f2:	e015      	b.n	8004520 <UART_SetConfig+0x110>
 80044f4:	2b04      	cmp	r3, #4
 80044f6:	d00a      	beq.n	800450e <UART_SetConfig+0xfe>
 80044f8:	2b08      	cmp	r3, #8
 80044fa:	d00d      	beq.n	8004518 <UART_SetConfig+0x108>
 80044fc:	e010      	b.n	8004520 <UART_SetConfig+0x110>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044fe:	f7fe f80d 	bl	800251c <HAL_RCC_GetPCLK1Freq>
 8004502:	0003      	movs	r3, r0
 8004504:	61bb      	str	r3, [r7, #24]
        break;
 8004506:	e012      	b.n	800452e <UART_SetConfig+0x11e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004508:	4b52      	ldr	r3, [pc, #328]	; (8004654 <UART_SetConfig+0x244>)
 800450a:	61bb      	str	r3, [r7, #24]
        break;
 800450c:	e00f      	b.n	800452e <UART_SetConfig+0x11e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800450e:	f7fd ff97 	bl	8002440 <HAL_RCC_GetSysClockFreq>
 8004512:	0003      	movs	r3, r0
 8004514:	61bb      	str	r3, [r7, #24]
        break;
 8004516:	e00a      	b.n	800452e <UART_SetConfig+0x11e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004518:	2380      	movs	r3, #128	; 0x80
 800451a:	021b      	lsls	r3, r3, #8
 800451c:	61bb      	str	r3, [r7, #24]
        break;
 800451e:	e006      	b.n	800452e <UART_SetConfig+0x11e>
      default:
        pclk = 0U;
 8004520:	2300      	movs	r3, #0
 8004522:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004524:	231e      	movs	r3, #30
 8004526:	18fb      	adds	r3, r7, r3
 8004528:	2201      	movs	r2, #1
 800452a:	701a      	strb	r2, [r3, #0]
        break;
 800452c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d100      	bne.n	8004536 <UART_SetConfig+0x126>
 8004534:	e079      	b.n	800462a <UART_SetConfig+0x21a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	005a      	lsls	r2, r3, #1
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	085b      	lsrs	r3, r3, #1
 8004540:	18d2      	adds	r2, r2, r3
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	0019      	movs	r1, r3
 8004548:	0010      	movs	r0, r2
 800454a:	f7fb fddd 	bl	8000108 <__udivsi3>
 800454e:	0003      	movs	r3, r0
 8004550:	b29b      	uxth	r3, r3
 8004552:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	2b0f      	cmp	r3, #15
 8004558:	d91b      	bls.n	8004592 <UART_SetConfig+0x182>
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	4a3e      	ldr	r2, [pc, #248]	; (8004658 <UART_SetConfig+0x248>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d817      	bhi.n	8004592 <UART_SetConfig+0x182>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	b29a      	uxth	r2, r3
 8004566:	200e      	movs	r0, #14
 8004568:	183b      	adds	r3, r7, r0
 800456a:	210f      	movs	r1, #15
 800456c:	438a      	bics	r2, r1
 800456e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	085b      	lsrs	r3, r3, #1
 8004574:	b29b      	uxth	r3, r3
 8004576:	2207      	movs	r2, #7
 8004578:	4013      	ands	r3, r2
 800457a:	b299      	uxth	r1, r3
 800457c:	183b      	adds	r3, r7, r0
 800457e:	183a      	adds	r2, r7, r0
 8004580:	8812      	ldrh	r2, [r2, #0]
 8004582:	430a      	orrs	r2, r1
 8004584:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	183a      	adds	r2, r7, r0
 800458c:	8812      	ldrh	r2, [r2, #0]
 800458e:	60da      	str	r2, [r3, #12]
 8004590:	e04b      	b.n	800462a <UART_SetConfig+0x21a>
      }
      else
      {
        ret = HAL_ERROR;
 8004592:	231e      	movs	r3, #30
 8004594:	18fb      	adds	r3, r7, r3
 8004596:	2201      	movs	r2, #1
 8004598:	701a      	strb	r2, [r3, #0]
 800459a:	e046      	b.n	800462a <UART_SetConfig+0x21a>
      }
    }
  }
  else
  {
    switch (clocksource)
 800459c:	231f      	movs	r3, #31
 800459e:	18fb      	adds	r3, r7, r3
 80045a0:	781b      	ldrb	r3, [r3, #0]
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	d00d      	beq.n	80045c2 <UART_SetConfig+0x1b2>
 80045a6:	dc02      	bgt.n	80045ae <UART_SetConfig+0x19e>
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d005      	beq.n	80045b8 <UART_SetConfig+0x1a8>
 80045ac:	e015      	b.n	80045da <UART_SetConfig+0x1ca>
 80045ae:	2b04      	cmp	r3, #4
 80045b0:	d00a      	beq.n	80045c8 <UART_SetConfig+0x1b8>
 80045b2:	2b08      	cmp	r3, #8
 80045b4:	d00d      	beq.n	80045d2 <UART_SetConfig+0x1c2>
 80045b6:	e010      	b.n	80045da <UART_SetConfig+0x1ca>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045b8:	f7fd ffb0 	bl	800251c <HAL_RCC_GetPCLK1Freq>
 80045bc:	0003      	movs	r3, r0
 80045be:	61bb      	str	r3, [r7, #24]
        break;
 80045c0:	e012      	b.n	80045e8 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045c2:	4b24      	ldr	r3, [pc, #144]	; (8004654 <UART_SetConfig+0x244>)
 80045c4:	61bb      	str	r3, [r7, #24]
        break;
 80045c6:	e00f      	b.n	80045e8 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045c8:	f7fd ff3a 	bl	8002440 <HAL_RCC_GetSysClockFreq>
 80045cc:	0003      	movs	r3, r0
 80045ce:	61bb      	str	r3, [r7, #24]
        break;
 80045d0:	e00a      	b.n	80045e8 <UART_SetConfig+0x1d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045d2:	2380      	movs	r3, #128	; 0x80
 80045d4:	021b      	lsls	r3, r3, #8
 80045d6:	61bb      	str	r3, [r7, #24]
        break;
 80045d8:	e006      	b.n	80045e8 <UART_SetConfig+0x1d8>
      default:
        pclk = 0U;
 80045da:	2300      	movs	r3, #0
 80045dc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80045de:	231e      	movs	r3, #30
 80045e0:	18fb      	adds	r3, r7, r3
 80045e2:	2201      	movs	r2, #1
 80045e4:	701a      	strb	r2, [r3, #0]
        break;
 80045e6:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80045e8:	69bb      	ldr	r3, [r7, #24]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d01d      	beq.n	800462a <UART_SetConfig+0x21a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	085a      	lsrs	r2, r3, #1
 80045f4:	69bb      	ldr	r3, [r7, #24]
 80045f6:	18d2      	adds	r2, r2, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	0019      	movs	r1, r3
 80045fe:	0010      	movs	r0, r2
 8004600:	f7fb fd82 	bl	8000108 <__udivsi3>
 8004604:	0003      	movs	r3, r0
 8004606:	b29b      	uxth	r3, r3
 8004608:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	2b0f      	cmp	r3, #15
 800460e:	d908      	bls.n	8004622 <UART_SetConfig+0x212>
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	4a11      	ldr	r2, [pc, #68]	; (8004658 <UART_SetConfig+0x248>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d804      	bhi.n	8004622 <UART_SetConfig+0x212>
      {
        huart->Instance->BRR = usartdiv;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	693a      	ldr	r2, [r7, #16]
 800461e:	60da      	str	r2, [r3, #12]
 8004620:	e003      	b.n	800462a <UART_SetConfig+0x21a>
      }
      else
      {
        ret = HAL_ERROR;
 8004622:	231e      	movs	r3, #30
 8004624:	18fb      	adds	r3, r7, r3
 8004626:	2201      	movs	r2, #1
 8004628:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004636:	231e      	movs	r3, #30
 8004638:	18fb      	adds	r3, r7, r3
 800463a:	781b      	ldrb	r3, [r3, #0]
}
 800463c:	0018      	movs	r0, r3
 800463e:	46bd      	mov	sp, r7
 8004640:	b008      	add	sp, #32
 8004642:	bd80      	pop	{r7, pc}
 8004644:	ffff69f3 	.word	0xffff69f3
 8004648:	ffffcfff 	.word	0xffffcfff
 800464c:	fffff4ff 	.word	0xfffff4ff
 8004650:	40021000 	.word	0x40021000
 8004654:	007a1200 	.word	0x007a1200
 8004658:	0000ffff 	.word	0x0000ffff

0800465c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b082      	sub	sp, #8
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004668:	2201      	movs	r2, #1
 800466a:	4013      	ands	r3, r2
 800466c:	d00b      	beq.n	8004686 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	4a4a      	ldr	r2, [pc, #296]	; (80047a0 <UART_AdvFeatureConfig+0x144>)
 8004676:	4013      	ands	r3, r2
 8004678:	0019      	movs	r1, r3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	430a      	orrs	r2, r1
 8004684:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468a:	2202      	movs	r2, #2
 800468c:	4013      	ands	r3, r2
 800468e:	d00b      	beq.n	80046a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	4a43      	ldr	r2, [pc, #268]	; (80047a4 <UART_AdvFeatureConfig+0x148>)
 8004698:	4013      	ands	r3, r2
 800469a:	0019      	movs	r1, r3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	430a      	orrs	r2, r1
 80046a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ac:	2204      	movs	r2, #4
 80046ae:	4013      	ands	r3, r2
 80046b0:	d00b      	beq.n	80046ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	4a3b      	ldr	r2, [pc, #236]	; (80047a8 <UART_AdvFeatureConfig+0x14c>)
 80046ba:	4013      	ands	r3, r2
 80046bc:	0019      	movs	r1, r3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	430a      	orrs	r2, r1
 80046c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ce:	2208      	movs	r2, #8
 80046d0:	4013      	ands	r3, r2
 80046d2:	d00b      	beq.n	80046ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	4a34      	ldr	r2, [pc, #208]	; (80047ac <UART_AdvFeatureConfig+0x150>)
 80046dc:	4013      	ands	r3, r2
 80046de:	0019      	movs	r1, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	430a      	orrs	r2, r1
 80046ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f0:	2210      	movs	r2, #16
 80046f2:	4013      	ands	r3, r2
 80046f4:	d00b      	beq.n	800470e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	4a2c      	ldr	r2, [pc, #176]	; (80047b0 <UART_AdvFeatureConfig+0x154>)
 80046fe:	4013      	ands	r3, r2
 8004700:	0019      	movs	r1, r3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	430a      	orrs	r2, r1
 800470c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004712:	2220      	movs	r2, #32
 8004714:	4013      	ands	r3, r2
 8004716:	d00b      	beq.n	8004730 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	4a25      	ldr	r2, [pc, #148]	; (80047b4 <UART_AdvFeatureConfig+0x158>)
 8004720:	4013      	ands	r3, r2
 8004722:	0019      	movs	r1, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	430a      	orrs	r2, r1
 800472e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004734:	2240      	movs	r2, #64	; 0x40
 8004736:	4013      	ands	r3, r2
 8004738:	d01d      	beq.n	8004776 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	4a1d      	ldr	r2, [pc, #116]	; (80047b8 <UART_AdvFeatureConfig+0x15c>)
 8004742:	4013      	ands	r3, r2
 8004744:	0019      	movs	r1, r3
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	430a      	orrs	r2, r1
 8004750:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004756:	2380      	movs	r3, #128	; 0x80
 8004758:	035b      	lsls	r3, r3, #13
 800475a:	429a      	cmp	r2, r3
 800475c:	d10b      	bne.n	8004776 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	4a15      	ldr	r2, [pc, #84]	; (80047bc <UART_AdvFeatureConfig+0x160>)
 8004766:	4013      	ands	r3, r2
 8004768:	0019      	movs	r1, r3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	430a      	orrs	r2, r1
 8004774:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477a:	2280      	movs	r2, #128	; 0x80
 800477c:	4013      	ands	r3, r2
 800477e:	d00b      	beq.n	8004798 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	4a0e      	ldr	r2, [pc, #56]	; (80047c0 <UART_AdvFeatureConfig+0x164>)
 8004788:	4013      	ands	r3, r2
 800478a:	0019      	movs	r1, r3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	430a      	orrs	r2, r1
 8004796:	605a      	str	r2, [r3, #4]
  }
}
 8004798:	46c0      	nop			; (mov r8, r8)
 800479a:	46bd      	mov	sp, r7
 800479c:	b002      	add	sp, #8
 800479e:	bd80      	pop	{r7, pc}
 80047a0:	fffdffff 	.word	0xfffdffff
 80047a4:	fffeffff 	.word	0xfffeffff
 80047a8:	fffbffff 	.word	0xfffbffff
 80047ac:	ffff7fff 	.word	0xffff7fff
 80047b0:	ffffefff 	.word	0xffffefff
 80047b4:	ffffdfff 	.word	0xffffdfff
 80047b8:	ffefffff 	.word	0xffefffff
 80047bc:	ff9fffff 	.word	0xff9fffff
 80047c0:	fff7ffff 	.word	0xfff7ffff

080047c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b086      	sub	sp, #24
 80047c8:	af02      	add	r7, sp, #8
 80047ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2280      	movs	r2, #128	; 0x80
 80047d0:	2100      	movs	r1, #0
 80047d2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80047d4:	f7fc fe1a 	bl	800140c <HAL_GetTick>
 80047d8:	0003      	movs	r3, r0
 80047da:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	2208      	movs	r2, #8
 80047e4:	4013      	ands	r3, r2
 80047e6:	2b08      	cmp	r3, #8
 80047e8:	d10d      	bne.n	8004806 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	2380      	movs	r3, #128	; 0x80
 80047ee:	0399      	lsls	r1, r3, #14
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	4b18      	ldr	r3, [pc, #96]	; (8004854 <UART_CheckIdleState+0x90>)
 80047f4:	9300      	str	r3, [sp, #0]
 80047f6:	0013      	movs	r3, r2
 80047f8:	2200      	movs	r2, #0
 80047fa:	f000 f82d 	bl	8004858 <UART_WaitOnFlagUntilTimeout>
 80047fe:	1e03      	subs	r3, r0, #0
 8004800:	d001      	beq.n	8004806 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004802:	2303      	movs	r3, #3
 8004804:	e022      	b.n	800484c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2204      	movs	r2, #4
 800480e:	4013      	ands	r3, r2
 8004810:	2b04      	cmp	r3, #4
 8004812:	d10d      	bne.n	8004830 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004814:	68fa      	ldr	r2, [r7, #12]
 8004816:	2380      	movs	r3, #128	; 0x80
 8004818:	03d9      	lsls	r1, r3, #15
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	4b0d      	ldr	r3, [pc, #52]	; (8004854 <UART_CheckIdleState+0x90>)
 800481e:	9300      	str	r3, [sp, #0]
 8004820:	0013      	movs	r3, r2
 8004822:	2200      	movs	r2, #0
 8004824:	f000 f818 	bl	8004858 <UART_WaitOnFlagUntilTimeout>
 8004828:	1e03      	subs	r3, r0, #0
 800482a:	d001      	beq.n	8004830 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800482c:	2303      	movs	r3, #3
 800482e:	e00d      	b.n	800484c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2220      	movs	r2, #32
 8004834:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2220      	movs	r2, #32
 800483a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2274      	movs	r2, #116	; 0x74
 8004846:	2100      	movs	r1, #0
 8004848:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800484a:	2300      	movs	r3, #0
}
 800484c:	0018      	movs	r0, r3
 800484e:	46bd      	mov	sp, r7
 8004850:	b004      	add	sp, #16
 8004852:	bd80      	pop	{r7, pc}
 8004854:	01ffffff 	.word	0x01ffffff

08004858 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b094      	sub	sp, #80	; 0x50
 800485c:	af00      	add	r7, sp, #0
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	60b9      	str	r1, [r7, #8]
 8004862:	603b      	str	r3, [r7, #0]
 8004864:	1dfb      	adds	r3, r7, #7
 8004866:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004868:	e09b      	b.n	80049a2 <UART_WaitOnFlagUntilTimeout+0x14a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800486a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800486c:	3301      	adds	r3, #1
 800486e:	d100      	bne.n	8004872 <UART_WaitOnFlagUntilTimeout+0x1a>
 8004870:	e097      	b.n	80049a2 <UART_WaitOnFlagUntilTimeout+0x14a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004872:	f7fc fdcb 	bl	800140c <HAL_GetTick>
 8004876:	0002      	movs	r2, r0
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800487e:	429a      	cmp	r2, r3
 8004880:	d302      	bcc.n	8004888 <UART_WaitOnFlagUntilTimeout+0x30>
 8004882:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004884:	2b00      	cmp	r3, #0
 8004886:	d139      	bne.n	80048fc <UART_WaitOnFlagUntilTimeout+0xa4>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004888:	f3ef 8310 	mrs	r3, PRIMASK
 800488c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800488e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004890:	647b      	str	r3, [r7, #68]	; 0x44
 8004892:	2301      	movs	r3, #1
 8004894:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004898:	f383 8810 	msr	PRIMASK, r3
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4949      	ldr	r1, [pc, #292]	; (80049cc <UART_WaitOnFlagUntilTimeout+0x174>)
 80048a8:	400a      	ands	r2, r1
 80048aa:	601a      	str	r2, [r3, #0]
 80048ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048ae:	633b      	str	r3, [r7, #48]	; 0x30
 80048b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b2:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048b6:	f3ef 8310 	mrs	r3, PRIMASK
 80048ba:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80048bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048be:	643b      	str	r3, [r7, #64]	; 0x40
 80048c0:	2301      	movs	r3, #1
 80048c2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048c6:	f383 8810 	msr	PRIMASK, r3
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	689a      	ldr	r2, [r3, #8]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	2101      	movs	r1, #1
 80048d6:	438a      	bics	r2, r1
 80048d8:	609a      	str	r2, [r3, #8]
 80048da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048e0:	f383 8810 	msr	PRIMASK, r3

        huart->gState = HAL_UART_STATE_READY;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2220      	movs	r2, #32
 80048e8:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2220      	movs	r2, #32
 80048ee:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2274      	movs	r2, #116	; 0x74
 80048f4:	2100      	movs	r1, #0
 80048f6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	e063      	b.n	80049c4 <UART_WaitOnFlagUntilTimeout+0x16c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	2204      	movs	r2, #4
 8004904:	4013      	ands	r3, r2
 8004906:	d04c      	beq.n	80049a2 <UART_WaitOnFlagUntilTimeout+0x14a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	69da      	ldr	r2, [r3, #28]
 800490e:	2380      	movs	r3, #128	; 0x80
 8004910:	011b      	lsls	r3, r3, #4
 8004912:	401a      	ands	r2, r3
 8004914:	2380      	movs	r3, #128	; 0x80
 8004916:	011b      	lsls	r3, r3, #4
 8004918:	429a      	cmp	r2, r3
 800491a:	d142      	bne.n	80049a2 <UART_WaitOnFlagUntilTimeout+0x14a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2280      	movs	r2, #128	; 0x80
 8004922:	0112      	lsls	r2, r2, #4
 8004924:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004926:	f3ef 8310 	mrs	r3, PRIMASK
 800492a:	613b      	str	r3, [r7, #16]
  return(result);
 800492c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800492e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004930:	2301      	movs	r3, #1
 8004932:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	f383 8810 	msr	PRIMASK, r3
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4921      	ldr	r1, [pc, #132]	; (80049cc <UART_WaitOnFlagUntilTimeout+0x174>)
 8004946:	400a      	ands	r2, r1
 8004948:	601a      	str	r2, [r3, #0]
 800494a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800494c:	61bb      	str	r3, [r7, #24]
 800494e:	69bb      	ldr	r3, [r7, #24]
 8004950:	f383 8810 	msr	PRIMASK, r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004954:	f3ef 8310 	mrs	r3, PRIMASK
 8004958:	61fb      	str	r3, [r7, #28]
  return(result);
 800495a:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800495c:	64bb      	str	r3, [r7, #72]	; 0x48
 800495e:	2301      	movs	r3, #1
 8004960:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004962:	6a3b      	ldr	r3, [r7, #32]
 8004964:	f383 8810 	msr	PRIMASK, r3
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	689a      	ldr	r2, [r3, #8]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2101      	movs	r1, #1
 8004974:	438a      	bics	r2, r1
 8004976:	609a      	str	r2, [r3, #8]
 8004978:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800497a:	627b      	str	r3, [r7, #36]	; 0x24
 800497c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497e:	f383 8810 	msr	PRIMASK, r3

          huart->gState = HAL_UART_STATE_READY;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2220      	movs	r2, #32
 8004986:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2220      	movs	r2, #32
 800498c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2280      	movs	r2, #128	; 0x80
 8004992:	2120      	movs	r1, #32
 8004994:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2274      	movs	r2, #116	; 0x74
 800499a:	2100      	movs	r1, #0
 800499c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e010      	b.n	80049c4 <UART_WaitOnFlagUntilTimeout+0x16c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	69db      	ldr	r3, [r3, #28]
 80049a8:	68ba      	ldr	r2, [r7, #8]
 80049aa:	4013      	ands	r3, r2
 80049ac:	68ba      	ldr	r2, [r7, #8]
 80049ae:	1ad3      	subs	r3, r2, r3
 80049b0:	425a      	negs	r2, r3
 80049b2:	4153      	adcs	r3, r2
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	001a      	movs	r2, r3
 80049b8:	1dfb      	adds	r3, r7, #7
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	429a      	cmp	r2, r3
 80049be:	d100      	bne.n	80049c2 <UART_WaitOnFlagUntilTimeout+0x16a>
 80049c0:	e753      	b.n	800486a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049c2:	2300      	movs	r3, #0
}
 80049c4:	0018      	movs	r0, r3
 80049c6:	46bd      	mov	sp, r7
 80049c8:	b014      	add	sp, #80	; 0x50
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	fffffe5f 	.word	0xfffffe5f

080049d0 <__libc_init_array>:
 80049d0:	b570      	push	{r4, r5, r6, lr}
 80049d2:	2600      	movs	r6, #0
 80049d4:	4d0c      	ldr	r5, [pc, #48]	; (8004a08 <__libc_init_array+0x38>)
 80049d6:	4c0d      	ldr	r4, [pc, #52]	; (8004a0c <__libc_init_array+0x3c>)
 80049d8:	1b64      	subs	r4, r4, r5
 80049da:	10a4      	asrs	r4, r4, #2
 80049dc:	42a6      	cmp	r6, r4
 80049de:	d109      	bne.n	80049f4 <__libc_init_array+0x24>
 80049e0:	2600      	movs	r6, #0
 80049e2:	f000 f821 	bl	8004a28 <_init>
 80049e6:	4d0a      	ldr	r5, [pc, #40]	; (8004a10 <__libc_init_array+0x40>)
 80049e8:	4c0a      	ldr	r4, [pc, #40]	; (8004a14 <__libc_init_array+0x44>)
 80049ea:	1b64      	subs	r4, r4, r5
 80049ec:	10a4      	asrs	r4, r4, #2
 80049ee:	42a6      	cmp	r6, r4
 80049f0:	d105      	bne.n	80049fe <__libc_init_array+0x2e>
 80049f2:	bd70      	pop	{r4, r5, r6, pc}
 80049f4:	00b3      	lsls	r3, r6, #2
 80049f6:	58eb      	ldr	r3, [r5, r3]
 80049f8:	4798      	blx	r3
 80049fa:	3601      	adds	r6, #1
 80049fc:	e7ee      	b.n	80049dc <__libc_init_array+0xc>
 80049fe:	00b3      	lsls	r3, r6, #2
 8004a00:	58eb      	ldr	r3, [r5, r3]
 8004a02:	4798      	blx	r3
 8004a04:	3601      	adds	r6, #1
 8004a06:	e7f2      	b.n	80049ee <__libc_init_array+0x1e>
 8004a08:	08004a8c 	.word	0x08004a8c
 8004a0c:	08004a8c 	.word	0x08004a8c
 8004a10:	08004a8c 	.word	0x08004a8c
 8004a14:	08004a90 	.word	0x08004a90

08004a18 <memset>:
 8004a18:	0003      	movs	r3, r0
 8004a1a:	1812      	adds	r2, r2, r0
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d100      	bne.n	8004a22 <memset+0xa>
 8004a20:	4770      	bx	lr
 8004a22:	7019      	strb	r1, [r3, #0]
 8004a24:	3301      	adds	r3, #1
 8004a26:	e7f9      	b.n	8004a1c <memset+0x4>

08004a28 <_init>:
 8004a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a2a:	46c0      	nop			; (mov r8, r8)
 8004a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a2e:	bc08      	pop	{r3}
 8004a30:	469e      	mov	lr, r3
 8004a32:	4770      	bx	lr

08004a34 <_fini>:
 8004a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a36:	46c0      	nop			; (mov r8, r8)
 8004a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a3a:	bc08      	pop	{r3}
 8004a3c:	469e      	mov	lr, r3
 8004a3e:	4770      	bx	lr
